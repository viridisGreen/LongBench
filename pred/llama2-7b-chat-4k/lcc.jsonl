{"pred": "\t\t\t\tGump g = (Gump)m_Participants[i].Backpack;\n\t\t\t\tif ( g is DuelContextGump )\n\t\t\t\t{\n\t\t\t\t\tDuelContextGump dcg = (DuelContextG", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tZ_.add_edge(e_v, e_u, **data.copy())\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "       a = Sndfile(ofilename, 'r')\n        # Now, read some frames, go back, and compare buffers\n        # (check whence == 1 == SEEK_CUR)\n        a.read_frames(1024)\n        a.", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "   unisubs_page = VideoPage(\"https://www.unisubs.com/videos/123456789\")\n    unisubs_page.open_video_page(\"123456789\")\n    print unisubs_", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"name\", styleValue.getName());\n\t\t\t\t\twriter.addAttribute(\"value\", styleValue.getValue());\n\t\t\t\t}\n\t\t\t", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "       for a in self.answers:\n            ret += a + \" \"\n        return ret\nclass _AnswerData(_QAData):\n    def __init__(self, answer):\n        self.answer = answer\n        self.id = len(self.answers)\n        self", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   mob.Prompt = new SR_NewRunePrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 3:\n                    mob", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "           for (X509Certificate cert : chain) {\n                s.println(cert);\n            }\n        }\n    }\n}\n/*\n * CertificateRequest ... send by CLIENT\n *\n * The client sends its certificate request to the server.  This is a\n", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "           sp = new JESpace (name, path);\n            spaceRegistrar.put (name, sp);\n        }\n        return sp;\n    }\n    public synchronized static void removeSpace (String name) {\n        spaceRegistrar.remove (name);\n    }", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic void onBack() {\n\t\t\tsuper.onBack();\n\t\t\tif (owner", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "       request = SimpleXMLElement(environ['REQUEST_BODY'])\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        #", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "       mark = \"setRepeated('%s');\" % status_id\n        self.webview.execute_javascript(mark)\n    def unmark_status_as_repeated(self, status_id):\n        mark = \"unsetRepeated('%s');", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "   def run_subprocess(self, logger, action, status_id, *args, **kwargs):\n        try:\n            # ...\n            # ...\n            # ...\n            # ...\n            # ...\n            # ...\n            # ...\n            # ...\n            # ...\n", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tZoneIdentityPermission z = (ZoneIdentityPermission) a.Union (b);\n\t\t\tAssert.IsTrue (Same (a, z), \"Trusted+Untrusted\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, z), \"!Reference", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "   return self.trust_managers[0].getAcceptedIssuers()\n\n# FIXME FIXME FIXME\n# for now, we're hardcoding the truststore location\n# but in the future, we should use the system property\n# or a", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "```\n    async def __play_audio(self) -> None:\n        ...\n\n    async def __stop_audio(self) -> None:\n        ...\n\n    async def __encode_audio(self) -> None:\n        ...\n\n    async def __render_audio(", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\tjumpID = (int) store.GetValue (iter, columnOther);\n\t\t\t\t\t//don't catch 0 value\n\t\t\t\t\twhile ( store.IterNext(ref iter) ){", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                argValues[i] = \"\";\n            } else {\n                argValues[i", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t}), TIMED(new ConfigFile<UUID, TimedData>()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic TimedData create(UUID id, ConfigurationSection conf)\n", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tgeneralNode.setPage(new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new BooleanFieldEditor(AUTO_SAVE,\n\t\t\t\t\t\t\"Auto save", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "\n            }\n        }\n    }\n}\n\nPlease help me complete the code.\n\nAnswer:\n\nHere is the completed code for the `ArchProtectionSpell` class:\n```\nusing System;\nusing System.Collections.Generic;\nusing Server.Network;\n", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "       self.identity_map = self._identity_cls()\n        self._new = {}\n        self._deleted = {}\n\n    def _begin_nested(self, *entities, **kwargs):\n        self.begin()\n        self.begin_nested()\n        return self", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) { \n\t\t\tfinal String name = field.getField().getName().toString();\n\t\t\tList<IField> named = name2Field.get(name);\n\t\t\tif (named==null) { \n\t\t\t", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   like `removeslash` but for the opposite case.\n    \"\"\"\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        if not self.request.path.endswith(\"/\"):\n            if self.", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t}\n}\n\n", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   WigleDownloader(args.user, args.password, args.coordfile, args.outpath).run()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod >= 156 && mod <= 160)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.Possible", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "       builds = android_builds(build, builds)\n    else:\n        builds = [{'os': 'os_android', 'os_pretty': 'Android',\n                  'arch': 'x86', 'arch_pretty': 'Android x86',\n                 ", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tstateBeansList = StatusBL.loadAllowedByProjectTypesAndIssueTypes(projectID, issueTypeID);\n\t\tif (stateBeansList==null || stateBeansList.isEmpty()) {\n\t\t\treturn true;\n\t\t}\n\t\tT", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (ArgumentSyntax argument in argumentSyntaxs) {\n                if (argument.Parent is InvocationExpressionSyntax invocation) {\n                    if (invocation.Method.Identifier.ValueText == \"ByRef\" && argument.Value.IsKind(SyntaxKind.IdentifierName)) {\n                ", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       split_test = self._update_partition_id(0)\n        # Verify that the child verticals have been updated to match the new group configuration.\n        self.assertEqual(2, len(split_test.children))\n        vertical_0 = self.get_item_", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           // Process the font\n            Process(ttfAfm);\n            // Create the font dictionary\n            PdfDictionary font = GetFontBaseType(piref, subset, ttcIndex);\n            // Add the font to the document\n            writer.AddFont(font);\n            //", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tcgn.x = (int)(xScale * (cell.getDepth() + 1));\n\t\t\t\t\t\tcgn.y = (int)(yScale", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       task = new ListenableFutureTask<>(callable);\n        task.addListener(new ListenableFutureTask.Listener<Bitmap>() {\n          @Override public void onSuccess(Bitmap result) {\n            bitmapReference = new SoftReference<>(result);\n          }\n          @Override", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n               ", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "   prerequisite = NavigateToSibling('ManagePolicies')\n    def step(self):\n        self.prerequisite_view.policy.item_select('Manage Policies')\n\nI'm not sure what the issue is, but it", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequenceTitles);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralPose pose) {\n\t", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "               base.Render(writer);\n            }\n        }\n    }\n}\n```\n\nPlease help me complete this code. I am not able to understand the purpose of the code and how to use it.\n\nI am using ClearCanvas RIS/PACS open source project.\n", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\n\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t\t\n\t\tif (compound.hasKey(\"FireAspect\"))\n\t\t{\n\t\t\tfire = compound.getShort(\"FireAspect\");\n\t\t}\n\t\t\n\t", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return \"Effect{\" + getId() + \"}\";\n    }\n}", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "   i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'everyone',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "   self.assertEqual(p.owns[0], o)\n    self.assertEqual(o.owner, p)\n\nExpected output:\n\n    Traceback (most recent call last):\n  File \"C:\\Python27\\lib\\unittest\\testcase.py\",", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "           else:\n                self.line(x=x, y=y, sel_dim=sel_dim)\n        else:\n            self.line(x=x, y=y, sel_dim=sel_dim)\n    def plot_3d(self, x=None", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               if (rootFolder.IsIgnored(path))\n                {\n                    toScan.Add(path);\n                }\n            }\n            foreach (var path in toScan)\n            {\n                var watcher = _fileSystemWatchers[path];\n                if (watcher", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E getAndCompute(K key,\n\t\t\t\t\t\t\tFunction<? super K, ? extends E> mappingFunction) {\n\t\tI result = internalMap.get(key);\n\t", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       cat = getToolByName(self.context, 'uid_catalog')\n        resbrains = cat.searchResults(query)\n        if len(resbrains) == 1:\n            contobj = resbrains[0].getObject()\t    \n            \n            if con", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\tset { m_ID = value; }\n\t\t}\n\t\tpublic Tile( ushort id, sbyte z )\n\t\t{\n\t\t\tm_ID = id;\n\t\t\tm_Z = z;\n\t\t}\n\t}\n", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   // create a new parcel voice channel\n                    //m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": Parcel \\\"{1}\\\" ({2}): avatar \\\"{3}\\\": creating new parcel voice channel", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\tDialogResult=DialogResult.Cancel;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriodCur.DateStart=textDateStart.Text;\n\t\t\tPayPeriodCur.DateStop=textDateStop.Text;\n\t\t\tPayPeriod", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)\n        # Convert averaging/integrating period to timedeltas.\n        column_headings['Av or Int period'] = _calc_integration_period(\n            column_", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   return authz.is_authorized('group_or_org_member_create', context, data_dict)\ndef _group_or_org_member_update(context, data_dict):\n    user = context['user']\n    return authz.is_authorized('", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\texample.setValue(predictionAttribute, example.getValue(predictionAttribute));\n\t\t\t\t// updating outcomes and confidences\n\t\t\t\toutcomes[parentIndex] = resultIndex;\n\t\t\t\tconfidences[parentIndex] *= Math", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           return new[] { new SearchResults() { Action = Action.Search, ErrorCode = ErrorCode.InvalidOperation } };\n        }\n        #endregion // Methods\n        #region Overridden Methods\n        #region ITranslationProviderLanguageDirection\n        public override string LanguageDirection\n", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           codePoint = Character.toCodePoint(ch);\n            if (codePoint < 0x10000) {\n               return offset + 1;\n            }\n         }\n         return -1;\n      }\n   }\n   static class NotSet extends AbstractChar", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "     if (existingRequired && (StringUtil.isEmpty(studyFormName)) {\n        return ValidationResults.REQUIRED_FAIL;\n      }\n      return ValidationResults.SUCCESS;\n    }\n}\n}\n\n", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Mod != ModData.Manifest", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add((CatsReferralPendingEmergencyNonEDAdmissionListVo)beans[x].buildVo());\n\t\t}\n\t\t", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "   xbmc.executebuiltin(\"Reboot\")\n\nI have no idea what this code does, but it seems to be a script for a Kodi addon. It contains several functions that perform different tasks, such as cleaning up various caches, removing packages, and modifying", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": " if not 'plotName' in pD:\n    return S_ERROR( \"Missing plot name!\" )\n```\nThis code is a Django view that handles requests to the `accountingplots` URL. It uses the `Accounting` module to interact with the Accounting system and retrieve plots", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tforeach (var b in builders)\n\t\t\t\tb.SetRallyPoints();\n\t\t}\n\t\tvoid AddNewProductionBuilding(IBot bot, string buildingType)\n\t\t{\n\t\t\tif (Info.NewProductionCashTh", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       return plan.getPlan();\n    }\n    public void compileAndCache(String sql, int paramCount) {\n        compile(sql, paramCount, true);\n        m_currentPlan = null;\n    }\n    public void compileAndCache(String sql, int paramCount,", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(200, 21);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\tthis.comboBox1.Text = \"Select a peer\";\n\t\t\t//", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = parity;\n\t\t\tdcb.DataBits = data_bits;\n\t\t\tdcb.StopBits = bits;\n\t\t\tdcb.Hand", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "       page = self.get_page(self.user.get_profile().get_url(),\n                             login_as=admin)\n        self.assertEquals(page.context['cobrand'],\n                          cobrand)\nclass UserProfileViewTest(TestCase):\n   ", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   args = parser.parse_args()\n    if args.keep_tempdir:\n        _keep_tempdir = True\n    else:\n        _keep_tempdir = False\n    #print \"keep_tempdir is\", _keep_tempdir\n    TestMethods(tempdir", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\t\tself.list.append(self.newAPList[0])\n\t\t\t\tself.oldlist[ap] = self.newAPList[0]\n\t\t\t\tself.newAPList.pop(0)\n\t\t\t\tif len(self.", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               float barHeight = size * 3;\n                float x = 0;\n                float y = 0;\n                if (n > 0) {\n                    for (int k = 0; k < n; ++k) {\n                        int i = fCode.", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return results;\n  }\n}\n\n\n", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "       y_points = np.arange(-90, +90, 10)\n        # ...\n        self.assertCML(\n            traj_interpolate(test_cube, self.sample_points),\n            (\"trajectory\", \"tri_pol", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           Clipboard.SetText(currPacket.ToHex());\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket = GetCurrentPacket();\n            byte[] bytes = currPack", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "   elif color == 'yellow':\n        print '\\033[1;32;40m'\n    else:\n        print '\\033[1;30m'\n    print\n\nif __name__ == \"__main__\":\n    # build_dataset('", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "\n        }\n    }\n}\n\nI am trying to complete the code for the class RefCountedSet<TK> but I am having trouble understanding how the code is supposed to work. Can someone please explain how the code is supposed to work and what each line of code is doing?\n\n", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.treeView1.ImageList = imageList1;\n            // \n            // DummySolutionExplorer_Load\n            // \n            this.treeView1.NodeMouseClick += new System.Windows.Forms.TreeNodeMouseClickEventHandler(this.treeView1", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "   def nullFunction(self, functionName, *argTypes):\n        \"\"\"Create a function that does nothing and returns None\"\"\"\n        from OpenGL import wrapper\n        return wrapper.nullFunction( functionName, *argTypes )\n\nYou have provided a code for a class _CheckContext which is", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "\n            writeUint64(header, emptyStreams.length());\n            for (int i = 0; i < emptyStreams.length(); i++) {\n                baos.write(emptyStreams.get(i) ? 0x01 : 0x00", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                   alphaLevel += (inRamp ? 10 : -10) * (System.currentTimeMillis() - start) / rampDelay;\n                    inRamp = !inRamp;\n                }\n                repaint();\n                try\n                {\n                   ", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_not_be_removable_if_max", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "\n            }\n        }\n    }\n}\n```\nPlease note that this code is just an example and may not work as-is in your project. You may need to modify it to fit your specific needs and requirements.", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "\n    def SersicConstrain(constrain_file, cO):\n        f_constrain = open(constrain_file, 'ab')\n        f_constrain.write(str(cO) + '       x       ' + \\\n                          str(-c.center", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "\n            }\n            lo[0] = i;\n        }\n    };\n    public static sega_decryptPtr sega_decrypt77 = new sega_decryptPtr() {\n        public void handler(int pc,/*unsinged*/ int[] lo) {", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "       return self.course_key.url\n    def _create_course(self):\n        \"\"\"\n        Create the course in Studio.\n        \"\"\"\n        # Create the course\n        course_data = {\n            'org': self.org,\n            'number': self.number,", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length>1) {\n\t\t\tchance=Float.parseFloat(splitNumber[1]);\n\t\t}\n\t\tint result = (int)(chance*100);\n\t\treturn result;\n\t}\n}\n*/\n\n", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "   if response['status'] == 200:\n        module.exit_json(changed=True, message=response['message'])\n    else:\n        module.fail_json(msg=response['message'])\n    # Now delete the config directory\n    if os.path.exists", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.lblPrivacy.AutoSize = true;\n            this.lblPrivacy.Location = new System.Drawing.Point(6, 33);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "       for plugname, plug in self.loaded_plugins:\n            try:\n                plug.collect()\n                plugruncount += 1\n                self.ui_log.info(\" %s: %s\" % (plugname, plug.get_description()))\n            except", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "   from MaKaC.conference import IConference\n    from MaKaC.conference import IConferenceParticipation\n    from MaKaC.conference import ILocalFile\n    from MaKaC.conference import IMaterial\n    from MaKaC", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                           parent.alertError(parent, \"Error importing message: \" + e.getMessage());\n                            setVisible(true);\n                            return false;\n                        }\n                        return true;\n                    }\n                };\n                result = messageBrowser.importMessages(fileTextField.", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t\t\t\tlayer = ((Scriptable) value).getIntValue(LAYER, -1);\n\t\t\t\t} else if (value instanceof Number) {\n\t\t\t\t\tlayer = (int) value;\n\t\t\t\t}\n\t\t    \t}\n    ", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       if (currentSession != null && currentSession.getAccessToken() != null) {\n            GraphUser user = getUser();\n            if (user != null) {\n                updateUI();\n            }\n        }\n    }\n    private GraphUser getUser() {\n        final Session", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions) {\n\t\t\tsum += emotion.strength;\n\t\t}\n\t\tfor (Emotion emotion : emotions) {\n\t\t\temotion.strength = sum / emotions.length;\n\t\t}", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "                   'property1': 2, 'property2': 3}\n            }\n        ],\n        self.build.stages_to_list())\n    def test_export_to_xml(self):\n        \"\"\"Test exporting BuildJob to XML.\"\"\"\n        # read", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   LatRad = phi1*_deg2rad\n    LongRad = LongOrigin + (x/a)*cos(phi1Rad)\n    if NorthernHemisphere:\n        LongRad = -LongRad\n    return (LatRad, LongRad)\n#================================================================", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "       form = ReportUserForm(request.POST)\n        if form.is_valid():\n            reason = form.cleaned_data['reason']\n            message = form.cleaned_data['message']\n            UserProfile.objects.get(user=user).report_user(reason", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   label = \"Add new series\"\n    field_names = [\n        \"name\",\n        \"description\",\n        \"series\",\n        \"product\",\n        ]\n    @action(\"Add\", name=\"add\")\n    def add_action(self, action, data):\n       ", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\tform.RightToLeft = RightToLeft.Yes;\n\t\t\t\tform.RightToLeftLayout = true;\n\t\t\t}\n\t\t}\n#endif\n\t}\n}\n#if !KeePassLibSD\nusing System.Drawing;\nusing", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>= 8;\n            }\n        }\n        return arr;\n    }\n}\n\nPlease complete the code by writing the remaining code for the methods and constructors.\n\nNote:\n\n* The `ID3Tags` class is not provided in the code snippet, so", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "               new_positional_tags_list.append((flag, re.compile(regex)))\n            return new_positional_tags_list\n    def _add_compile_tag_regex(compile_tag_regex):\n        self._compile_tag_regex = compile_tag_regex", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "               return new object[0];\n            }\n        }\n    }\n}\n\nPlease help me complete this code. I am new to C# and .NET framework.\n\nThank you.", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "packet = OBD_PID00(data=b'0x00000000')\n\nPlease help me to complete the code.\n\nThank you.", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tif ready_pipe == -1:\n\t\t\tready_pipe = os.pipe()\n\t\telse:\n\t\t\tdbus.service.Object.listen(self)\n\tdef close(self):\n\t\tif ready_pipe != -1:\n\t\t\t", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "\t\t\t\t\n\t\t\t\tthis.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);\n\t\t\t\tthis.AddRes(index, typeof(RunedPrism), ", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "   def __enter__(self):\n        self.push()\n        return self\n    def __exit__(self, exc_type, exc_value, tb):\n        self.pop(exc_value)\n        if exc_type is not None:\n            self.app.do", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   response = _pubsub_consumer(session, cluster_id, needs_columns=needs_columns)\n    if topic_name:\n        response = response.filter(PubSubTopic.name==topic_name)\n    return response\n# ###################################################################################################", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "   axis_proj = _axis_in_detector(ray_trafo.geometry)\n    rot_dir = _rotation_direction_in_detector(ray_trafo.geometry)\n    # ...\n\nI'm not sure what the code is doing, but it seems", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "           return regx\n        else:\n            return regx\n    def _doLogin(self):\n        if self.isEnabled():\n            # Check if we have a valid proxy login\n            if self.url and self.username and self.password:\n                try:\n                    #", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn font_size_names [type];\n\t\t}\n\t}\n}\n\n", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\t\tvar inner = (JObject)obj.Properties[0].Value;\n\t\t\t\tAssert.That(inner.Properties.Count, Is.EqualTo(2));\n\t\t\t\tAssert.That(inner.Properties[\"In this test\"].Value.Type, Is.", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "for (int w = 0; w < width; w++) {\n                T2 edge = new T2(w, h);\n                edges.add(edge);\n            }\n            return edges;\n        }\n        @Override\n        public Collection<String> getVertices() {", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   iso = isoelastics.Isoelastics(ds)\n    iso.get(col1=\"area_um\", col2=\"deform\")\n    assert np.allclose(iso.data[0][0], [1.61819e+", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "\n        final LocalTripleStore expected = new LocalTripleStore(\n                new File(\"expected.ttl\"),\n                new File(\"expected.rdf\"),\n                new File(\"expected.json\"),\n                new File(\"expected.nt\"),\n                new File(\"expected.rdfxml\"),", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "   def test_check_for_alert_with_no_history(self):\n        \"\"\"We should not create an alert if there is no history.\"\"\"\n        history = []\n        subscription = {'name': 'Sub for 1b',\n                     'threshold':'0.05", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\tString downloadedJarFile = performDownload();\n\t\t\tif (downloadedJarFile != null) {\n\t\t\t\treturn performInstallerLaunch(downloadedJarFile);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tcontext = IntPtr.Zero;\n\t\t\tSDL.SDL_GL_DeleteContext(context);\n\t\t\tcontext = IntPtr.Zero;\n\t\t\tSDL.SDL_GL_DestroyWindow(window.Window);\n\t\t\twindow =", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "       projected onto the *y* axis).\n        :rtype: numpy.ndarray or None\n        \"\"\"\n        return self._project_cov_mat(\n            self.x_data_cov_mat_inverse, self.y_data_cov_mat_inverse,", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       CmsLink link = new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n        return link;\n    }\n    @Override\n    public String toString() {\n        return ReflectionToStringBuilder.", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "                   adminUser = getEucalyptusAdmin();\n                  }\n                }\n              } catch (AuthException e) {\n                // ignore\n              }\n            }\n            // Transfer the ownership of the object to the owning account\n            osgObject.setOwnerCan", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        public event EventHandler Initialized\n        {\n            add { _initialized += value; }\n            remove { _initialized -= value; }\n        }\n       ", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       ImportVmTemplateCommand command =\n                new ImportVmTemplateCommand(createParameters());\n        command.setIsImportAsNewEntity(isImportAsNewEntity);\n        command.setTemplateName(name);\n        assertEquals(isImportAsNewEntity, command.canDoAction());", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.XOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\tw10.YOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\t// Container child table1.Gtk.Table+TableChild\n\t", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "       self.set('MY_KEY', 'MY_VALUE')\n\nI'm trying to understand how to use this script to write my own custom post-processing script for NZBGet.\n\nI have a few questions:\n\n1. What is the purpose of the `PostProcessScript", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attribs, CallingConventions callConv, Type[] parameterTypes)\n\t\t{\n\t\t\treturn DefineMethod(name, attribs", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "     return new Builder(prototype);\n    }\n    public override Builder Clone() {\n      return CreateBuilder(this);\n    }\n    public static SendInvitationRequest DefaultInstance {\n      get { return global::bnet.protocol.channel_invitation.SendInvitationRequest", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "                   vertices[x] = getVertex(getVertIndex(i, x));\n                else\n                    vertices[x] = vertices[x].add(getVertex(getVertIndex(i, x)));\n            }\n        }\n    }\n    protected Vector3f getVertex(", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       result.addAll(CmsStringUtil.splitAsList(showDateData, ';'));\n        return result;\n    }\n    /**\n     * Collects the names of the columns to show in the document list view, including the document id column by default.<p>\n     * ", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForSeconds (0.1f);\n\t\t\tCalculateHeight();\n\t\t}\n\t}\n}\n```\n\nThis code is for a `InputField` component in Unity, and it provides a custom `InputFieldConfig` class that handles the", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       Height = GetBestHeight();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n  }\n}\n```\n\nThis code is for a CommandButton control in a Windows Forms application. It has been modified to include an arrow image", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                   lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (!string.IsNullOrEmpty(lastUser))\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            // send email to each user\n            foreach (string user in Users", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\treturn directions", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           // Handle addition to/removal from TVerificationResultCollection\n            VerificationResultCollection.Auto_Add_Or_AddOrRemove(this, VerificationResult, ValidationColumn);\n        }\n        private void LoadDataManual(ref TFrmConferenceMasterSettings AMainForm", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, buffer.Length);\n                // Adding file content as blob/byte[].\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}\n```\nThis code is part of the Phosphorus Five library, which is", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "   def __str__(self):\n        return \"PayloadRequirements(apply_called_for_all_requirements=%s, apply_cb=%s)\" % (self.apply_called_for_all_requirements, self.apply_cb)\n\nI have a feeling that", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return Enabled && CopyCustom; }\n\t\t}\n\t\t#endregion\n\t}\n}\n#pragma warning restore 0419,1574,1587,1591\n}\n```\nThis code is a custom component", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget {\n\t\t\t\treturn dataDir;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tdataDir = value;\n\t\t\t}\n\t\t}\n\t}\n}\n\nThis code is a Gnome application that inherits from the IN", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "\n            if (bugAnnotation.getType() != BugAnnotation.TYPE_SOURCE_LINE) {\n                throw new IllegalArgumentException(\"Invalid bug annotation type: \" + bugAnnotation.getType());\n            }\n        }\n    }\n}\n\n\n\n", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\tpublic override void OnDoubleClick( Mobile from )\n\t{\n\t\tbase.OnDoubleClick( from );\n\t\tif ( from.InRange( this.GetWorldLocation(), 1 ) )\n\t\t{\n\t\t\tEat( from );\n\t\t}\n\t", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                       if (eFarm.Count > 0)\n                        {\n                            SpellManager.PredCast(E, eFarm[0]);\n                        }\n                    }\n                }\n            }\n        }\n        private void JungleClear()\n        {\n", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, anchor);\n\t}\n}\n}\n\nThis code is a small helper class to create GridBagConstraints in a more readable way with less typing. It provides static methods to create a GridBag", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "       fb = self._retr_file(filename)\n        try:\n            year, month, day = re.findall(r\"\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d\", fb)[0].split('-')\n        except:\n", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "       self.assertEquals(field_def['rules'], field_model_def['rules'])\n        self.assertEquals(field_def['producer'], field_model_def['producer'])\n        self.assertEquals(field_def['pid'], field_model_def['pid'])", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                   new[] {new object[] {\"E1\", 10L}});\n                // cleanup\n                env.UndeployAll();\n            }\n        }\n        internal class InfraMultipleColumnMultipleIndex : RegressionExecution\n        {\n            private readonly bool namedWindow", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "   def __div__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n        c = self.copy()\n        return c.__idiv__(other)\n    \n    def __idiv__(self, other):", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "   view = self.browse(cr, uid, view_id, context=context)\n    arch = view.arch\n    # ...\n\\end{code}\n\nThis code is a view class for OpenERP, which is a web application framework built on top of Python's", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           value = createHTMLView(c, text);\n            c.putClientProperty(BasicHTML.propertyKey, value);\n        }\n        else {\n            c.removeClientProperty(BasicHTML.propertyKey);\n        }\n    }\n    private static final String propertyKey = \"", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = create(filename, contents=content)\n    assert s.name_is_testharness\n    item_type, items = s.manifest_items()\n    assert item_type == \"testharness\"\n    expected_urls = [\n        \"/html/test.\" +", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.sqlloader = new HbmSqlLoader(namedQueryReference);\n\t\t\t}\n\t\t}\n\t\tpublic void Loader(string namedQueryReference, Action<ILoaderMapper> loaderMapping)\n\t\t{\n\t\t\tif (loaderMapping == null", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tforeach ( PlayerState pl in m_Members )\n\t\t\t{\n\t\t\t\tpl.Serialize( writer );\n\t\t\t}\n\t\t\tm_F", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "       invocationQueue.removeFirst();\n    }\n    private void moveForward() {\n        assert !graphQueue.isEmpty();\n        CallsiteHolderExplorable current = (CallsiteHolderExplorable) graphQueue.peek();\n        InlineInfo currentInfo = current", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "               print(\"  Running pytest with arguments:\", pytest)\n                if sprout_appliances:\n                    print(\"  and sprouting to appliance:\", sprout_appliances[0])\n                else:\n                    print(\"  and not sprouting\")", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    ValueNode phi = getCachedPhi(value, value.getStamp());\n                    if (phi != null) {\n                        entry.setValue(phi);\n                    }\n                }\n            }\n        }\n    }\n", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "       if (mCallback != null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n}\n\nPlease help me complete the code.\n\nThank you.", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendGump(new EodonWallMapGump(from));\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic class EodonWallMapGump : Gump\n\t\t{\n\t\t\tpublic EodonWallMapGump", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "   models = [\n        Record,\n        RecordMetadata,\n        BibrecBib01x,\n        BibrecBib02x,\n        BibrecBib03x,\n        BibrecBib04x,\n        BibrecBib05x,\n", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "   def remove_user_session(self, username, domain, resource):\n        user = '%s@%s' % (username, domain)\n        session = self.module.get(user).get('sessions', set()).pop(resource)\n        if session is not None:\n", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "         - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath, 'to_binary')\n    def percent_translated(self):\n        \"\"\"\n        Convenience method that return the percentage of translated", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      gLogger.error( \"Failed to determine waiting problematics for transformation\", res['Message'] )\n      return res\n    else:\n      self.integrityClient.setTransformationParameter( transID, 'Status', 'WaitingIntegrity'", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\tif(uri.getPath() != null && uri.getPath().length() > 0) {\n\t\t\t\t// FIXME what about /downloads/ /friends/ etc?\n\t\t\t\tif(uri.getPath().equals(\"/\"))\n\t\t", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       gsp = yield self.setupGerritStatusPush(summaryCB=sampleSummaryCB)\n        d = self.run_fake_single_build(gsp, buildResult, verifiedScore)\n        yield d\n        self.assertEqual(gsp.sendCodeReview.", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.term = 'http://example.com/category'\n    self.assert_(self.category.term == 'http://example.com/category')\n    new_category", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "           Map<String, AnnotationMirror> r2) {\n            Map<String, AnnotationMirror> result = new HashMap<String, AnnotationMirror>(r1);\n            result.putAll(r2);\n            return result;\n        }\n        @", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "```\n# Add the material property panel\nbl_ui.add_panel(MaterialPropertyPanel)\n\n# Add the material options panel\nbl_ui.add_panel(MaterialOptionsPanel)\n\n# Add the material physics panel\nbl_ui.add_panel(MaterialPhysicsPanel)", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           if (_engine.Memory.Map.Cartridge.MapperNo == 16)\n            {\n                var map16 = (Mapper16) _engine.Memory.Map.CurrentMapper;\n                mapper16_latch1 = map16.Latch1;\n", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           JMenu jMnuOpenDocument = new JMenu(\"Open Document\");\n            jMnuOpenDocument.add(new JMenuItem(oActionListener, \"Open...\"));\n            _jMnuRoot.add(jMnuOpenDocument);\n        }\n        private JMenuItem getIn", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Giant Spiders]\n\t}\n}\npublic class AranwenShop : NpcShopScript\n{\n\tpublic override void Setup()\n\t{\n\t\t", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\treturn base.SizeHeightToFit (min);\n\t\t}\n\t}\n}\n}\n\nPlease help me to complete the code.\n\nThank you.", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "       return self.announcement.title", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "```\nimport sphinx\nimport os\nimport shlex\nimport re\nimport sys\nimport os\nimport shlex\nimport re\nimport sys\nimport sphinx.ext.intersphinx\nimport sphinx.ext.todo\nimport sphinx.ext.ifconfig", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "                ORDER BY sdate, stime ''', (i,))\n    rows = cursor.fetchall()\n    print \"Rows are: \", rows\n    for row in rows:\n        print \"Row is: \", row\n        time_start = row[3]\n        time_end =", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "       conn.table('projects').update({'project_id': project_id}, {'$set': {'last_snapshot': timestamp}})\n        conn.close()\n    }\n    finally:\n        if conn:\n            conn.close()\n\nI have tried to provide the code as", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\tbreak;\n\t\t}\n\t}\n}\n```\nPlease complete the code.", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "\t\tname\t- aname/ename/gname\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_REVOKED'\n        self.codehead =", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "   def add_host(self, host_data):\n        self.host_data[host_data.uuid] = host_data\n\nI have completed the code for you. Please let me know if you have any questions or need further assistance.", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "           }\n        }\n    }\n}\n\\end{code}\n\nThis code is from an Android app that resolves URLs and displays a toast message when the URL is resolved. The app uses the `unshorten.it` API to resolve URLs, and it also has a feature to", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   if primary.keys():\n        raise AssertionError(\"Primary.xml contains packages\")\n    else:\n        pass\n        # Do nothing\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "           inputs.extend(self.get_finalized_command('build_ext').get_outputs())\n\nI have tried to complete this code by adding the missing functions and variables, but I am not sure if I have done it correctly. Please let me know if there is anything else I can do", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tobject propValue = disassembledValues[j];\n\t\t\t\tif (propValue != null)\n\t\t\t\t{\n\t\t", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "       '--',\n        '--',\n        '--',\n        '--',\n        '--',\n        '--',\n        '--',\n        '--',\n        '--',\n        '--',\n        '--',\n        '--',\n        '--',", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           return View(\"Form\", new DelegateViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [HttpPost]\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")] \n        public ActionResult SaveEventDelegate(Delegate", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                       var circle = (Circle) obj;\n                        return string.Format(\"({0},{1})\", circle.X, circle.Y);\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex);\n            }", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "   def checkDownload(self, *args, **kwargs):\n        res = self.load(\"http://www.fileserve.com/link-checker.php\", *args, **kwargs)\n        return json_loads(res)\n\nI'm having trouble understanding how to use the", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path.Count > 0)\n\t\t\t{\n\t\t\t\t// If we found a path, follow it:\n\t\t\t\tforeach (var p in path)\n\t\t\t\t\tself.SetTargetLine(Target.FromCell(self.World", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "           self.logger.info(\"dhcpd restarted\")\n            return True\n        else:\n            self.write_dhcp()\n            return True\n    def write_tftpd(self):\n        self.logger.info(\"rendering TFTPD files\")\n        self", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return Event.newBuilder();\n    }\n}\n\nI am trying to complete the code by implementing the methods that are missing in the provided code.\n\nPlease let me know if there is anything else I can do to help.", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           while (true)\n            {\n                if (++stateIndex >= MAXIMUM_ORDER)\n                {\n                    goto NoLoop;\n                }\n                PpmState state = context.Statistics + (++context.NumberStatistics);\n                state.Successor = up", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Signed Short VR.\n        /// </summary>\n        public static readonly DicomVr SSvr = new DicomVr(\"SS\", false, false, true,", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tsessionValuesArray.Add(tFull[3]);\n\t\t}\n\t\t//now we have the list of sessions that have this test\n\t\t//now we can delete the test type\n\t\t//or we can do something else\n\t\t//or we can do nothing\n", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "       o = self.file(b'abcdefghij')\n        insert_bytes(o, 4, 9)\n        self.assertEquals(b'abcdefghij\\x00\\x00ij', self.read(o))\n    def test_larger", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "   <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Mac OS X (", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   ax.plot(cr['combined'][app][test]['durations'], label=test)\n    ax.set_xlabel('Time in ms')\n    ax.set_ylabel('Count')\n    ax.set_title('%s, %s, individual %ss", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "   def test_GID(self):\n        \"\"\"\n        Check GID/UID switches when current effective GID is non-root.\n        \"\"\"\n        self.mockos.egid = 1\n        self.mockos.euid = 0\n        util.runAs", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t}else if(bDrawCheck || bDrawCross){\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlColor());\n\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - ", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": " def simulateClassifier(self, knn, patternDict, testName):\n    failures = \"\"\n    for i in range(len(patternDict)):\n      pattern = patternDict[i]['pattern']\n      category = patternDict[i]['category']\n      if knn.distance", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       mirror.writeElement(kind, (offset - headerSize()) / kind.width.numberOfBytes, value);\n    }\n    @HOSTED_ONLY\n    public void writeArray(Object array, ObjectMirror mirror) {\n        visitObjectCell(array, mirror);\n", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           if (string.IsNullOrEmpty(relativePath)) {\n                return null;\n            }\n            // try to resolve relative path as a file in the project directory\n            string filePath = FileUtils.CombinePaths(Parent.Directory.FullName, relativePath);\n            if", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "   return string.format(*args, **kwargs)\ndef get_version():\n    try:\n        return sys.version_info.major\n    except:\n        return '?'\ndef get_platform():\n    try:\n        return sys.platform\n    except:\n        return '", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "       Dcopy.dcopy(i16, paramArrayOfDouble12, i19 - 1 + paramInt22, 1, paramArrayOfDouble12, i27 - 1 + paramInt22, 1);\n}\n}\n\nPlease complete the", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += \"\t\" + s.name + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t}\n\t\n\tpublic class State {\n\t\tpublic string name;\n\t\tpublic AnimationGraph graph;\n\t\tpublic", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "                   CollisionObjects = new[] { CollisionObjectTypes.YasuoWall },\n                });\n            #endregion Lucian\n            #region Lux\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Lux\",\n                   ", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(\"test.user\", \"test.password\"));\n\t}\n}\n\n", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "       self.assertRaises(subprocess.CalledProcessError, lambda: subprocess.Popen(\n            ['/bin/bash', '-c', 'echo \"hello\"'],\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n           ", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tPropertyService.Start();\n\t\t\tResourceService.Start();\n\t\t\tAddInManager.Start();\n\t\t\tMessageService.Start();\n\t\t\tLoggingService.Start();\n\t\t\t// ...\n\t\t}\n\t}\n}\n// </", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t\t//call once before adding a constraint to a collection\n\t\t\t//will throw an exception to prevent the add if a rule is broken\n\t\t\tthis.AddToConstraintCollectionSetup (this.ConstraintCollection);\n\t}\n}\n#endregion", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "       self.accept()\n\nI have tried to modify the code to match the above layout but I am getting an error message saying that the widgets are not properly aligned.\n\nCan someone please help me to fix this issue?\n\nThank you in advance.", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "\n            } else {\n                // Display the TAF details\n                showTaf( wxs );\n            }\n            return super.onResult( result );\n        }\n    }\n    private void showTaf( Cursor wxs ) {\n        // Display the TAF details\n", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tstring continents = \"from Continent\";\n\t\t\t\tint results = s.CreateQuery(continents).List().Count;\n\t\t\t\tQueryStatistics continentStats = stats.GetQueryStatistics(continents);\n\t\t\t\tAssert.Is", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiCRCITTSum = (uiCRCITTSum >> 8) ^ (ulong)uiByteValue ^ polynom;\n            }\n            return (ushort)uiCRCITTSum;\n        }\n        private ulong reflect(ulong crc,", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn 1;\n\t}\n\tpublic void shoot(EntityTarget target, float speed, float range, SoundEvent sound) {\n\t\tif (target != null) {\n\t\t\tthrowableEntity = new Bullet(level, this);\n\t\t\tdouble baseY =", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           return new IHyperlinkDetector[] { \n                    new CeylonHyperlinkDetector() };\n        }\n        return new IHyperlinkDetector[] { \n                new CeylonJavaBackendHyperlinkDetector(controller), \n                new C", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "       self.drawingModeWidget.setObject3D(object3d)\n        self.l.addWidget(self.drawingModeWidget)\n        self.privateInterface = Object3DPrivateInterface(self)\n        self.l.addWidget(self.privateInterface)\n       ", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set location\n\t\t\t\t\t{\n\t\t\t\t\t\ttoSet = new Point2D( m_Mobile.Location );\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\tshouldSend = true;\n", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                    for (Object valueChoice : valueChoices)\n                     {\n                        Object convertedChoice = selectConverter.convert(valueChoice);\n                        if (convertedChoice.equals(value))\n                        {\n                           chosenObj = valueChoice;\n                           break;\n                ", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\t\tif (acceptableChange[i][j])\n\t\t\t\t\tsb.append(\" \"+i+\"->\"+j+\"\\t\"+fractionWithAmount[i][j]+\"\\n\");\n\t\t\t\telse\n\t\t\t\t\tsb.append(\" \"+i", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "                           foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //get the index of the purchase order and line that contained the unpriced product\n                                int orderIndex = unpricedLine.Key;\n                                int", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t}\n}\n```\n\nThis code is a class `ClientOperation` that represents a single operation on a client side. It has various", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       final String ownerName = \"owner\" + ownerId;\n        final String groupName = \"group\" + ownerGroupId;\n        final String aceName = \"ace\" + ownerId + \"-\" + ownerGroupId;\n        final ACE_ACCESS_TYPE accessType = ACE", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn viewport.ToVector2 () * (v - viewport.Center) / viewport.Size;\n\t\t}\n\t}\n}\n}\n```\nThis code is a collection of utility functions for working with vectors, matrices, and other geometric data in a 3D", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "e = endpoint_key(vlan=10, mac_hi=0x1234, mac_lo=0x5678)\nprint(type(e))\nprint(repr(e))\npacket = endpoint_value(port=100)\n", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic void Send(string[] messages)\n\t\t{\n\t\t    Send(messages, true);", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           switch (type) {\n                case Step:\n                    logDataSet(list);\n                    break;\n                case Activity:\n                    logDataSet(list);\n                    break;\n            }\n        }\n    }\n    @Override\n    public void onError(int request", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " PrintLongLine('                               %s%d<ReturnType%s>,' %\n                (parent_class, exec_count, exec_type_str))\ndef GenerateCallback(bind_count,\n                     exec_count,\n                     function_name,\n                     parent", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   response = HttpResponse(\n        simplejson.dumps(items), content_type=\"application/json\"\n    )\n    return response\ndef range_items(items):\n    \"\"\"\n    Returns a list of dictionaries representing the information from a\n    given range query.\n    Each", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                       VarNode(\"score\"), null/* c */, Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(serviceGraphPattern);\n            }\n        }\n        //\n        // Test the optimizer.\n        //\n        final ASTSearchOptimizer", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "       form = UserForm(request.POST)\n        return UserDetailView(request, form=form)\n\\end{code}\n\nThis code is a Django admin view for managing users. It includes a form for editing user details, a toolbar with actions for changing the user's password,", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    #region IAssemblyReference Members\n    IAssembly IAssemblyReference.ResolvedAssembly {\n      get { return this.ResolvedAssembly; }\n    }\n    AssemblyIdentity IAssemblyReference.Unified", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "\n            // Perform the TFQMR iteration\n            for (int k = 0; k < 100; k++)\n            {\n                // Compute the LU factorization of A\n                var lu = matrix.LUDecomposition();\n                // Compute the Q", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\tApfloat median = sortedNumbers[left];\n\t\t\treturn new Apfloat[] {median};\n\t\t} else {\n\t\t\tApfloat leftMedian = sortedNumbers[left];\n\t\t\tApfloat rightMedian = sortedNumbers[right];\n\t\t", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "               A[v, :] = L[v, :]\n                L[v, :] = A[v, :]\n                v = parent[v]\n        for edge in edges_in:\n            parent[edge.child] = edge.parent\n            v = edge.", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "       for item in self.items:\n            item['ocean-unique-id'] = item['id']\n            item['metadata__updated_on'] = datetime.fromtimestamp(item['updated_on']).isoformat()\n            item['metadata__timestamp'] = datetime.fromtimestamp(", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tvar bot = slot.Value.GetBot();\n\t\t\t\t\t\t\t\t\t\tif (bot != null)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\toptions.", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n}\n}", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "       return frame_header + padding_bytes + self.data\n    def __repr__(self):\n        return '<DataFrame length: {}, flags: {}, stream_id: {}, data: {}>'.format(\n            len(self),\n            '<{}>'.format(','.join(str", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           var b = cluster.BoundingBox;\n            var bb = cluster.RectangularBoundary.BoundingBox;\n            if (b.Intersects(bb)) {\n                var intersection = b.Intersection(bb);\n                if (intersection.IsEmpty) {\n", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\nvoid btKinematicCharacterController::addContactResult(btCollisionWorld::LocalRayResult& rayResult,bool normalInWorldSpace)\n{\n\tif (rayResult.m_collisionObject == m_me)\n\t\treturn;\n\tClosestRay", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       for (ExpressionTree initializer : initializers) {\n            if (canBeLeaked(initializer)) {\n                checker.report(Result.failure(\"unique.leaked\"), initializer);\n            }\n        }\n        return super.visitNewArray(node, p", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound != null)\n\t\t\t{\n\t\t\t\tNBTTagCompound nbttagcompound1 = nbttagcompound.getCompoundTag(\"display\");\n\t\t\t\tif (nbttagcompound1 !=", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\t_returnType = new ClassItem(typeAttribute.Value);\n\t\t\t}\n\t\t}\n\t\t//--------------------------------------------------------------------\n\t\t// Private methods\n\t\t//--------------------------------------------------------------------\n\t\tprivate void CreateMethods()\n\t\t{\n\t", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\tmyTrackBar.Width = 200;\n\t\t\t\tmyTrackBar.Height = 250;\n\t\t\t\tmyTrackBar.Orientation = Orientation.Vertical;", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\twhen(classType.isClass()).thenReturn(false);\n\t\t\tdoReturn(Collections.singleton(annotationType)).when(lookup).findAll();\n\t\t\tCollection<? extends ImmutableClassType> result = instrumentation.addInstrumentationPoints(agentConfiguration,", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (isImplicit != other.isImplicit)\n\t\t\treturn false;\n\t\t\n\t\t// If we've reached this point, we know that the access paths are\n\t\t// equal, and the rest of the fields are equal.\n\t\t// Therefore,", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           int min2 = wideLExtent[end][r.leftChild];\n            int min = (min1 > min2 ? min1 : min2);\n            if (min > narrowL) { // can this left constituent stretch far enough to reach the right constituent?\n              continue", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "```\n    def test_bwlimit_ssh_invocation(self, popen, pipe_processor_loop):\n        ret = 0\n        out = 'out'\n        err = 'err'\n        pipe = _mock_pipe(popen, pipe_processor_loop,", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tvar state = process.GetOrCreateData<ProcessState>();\n\t\t\tstate.IgnoreThreadsChangedEvent = false;\n\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n\t/**\n\t * Writes a material with the given appearance.\n\t *\n\t * @param   appearance   Appearance to be used", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( proxyThat instanceof Contact ) {\n\t\t\tContact that = (Contact)proxyThat;\n\t\t\tif ( this.getId() == null ) {\n\t\t\t\tif ( that.getId() != null ) {\n\t\t\t\t\treturn false;\n", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "   if n == n_steps - 1:\n      print((\"Saving final configuration : %s\" %n))\n      if (reject_wall+reject_jump) == 0:\n        body_offset = 0\n        for i, ID in enumerate(struct", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "       if cdata is None:\n            return\n        # Check if the constant is a scalar\n        if cdata.ndim == 0:\n            # This is a scalar constant, so we can remove the Subtensor\n            subtens = Subtensor(node.op.idx_list)", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "   class Meta:\n        model = Group\n        fields = ('id', 'name')\n        helper_class = SubmitCancelFormHelper\n        helper_cancel_href = \"{% url 'index' %}\"\n        widgets = {'groups': forms.CheckboxSelectMultiple}\n       ", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "                   return fn(*arg, **kw)\n        return wrap\n    def after_compile(self, query):\n        \"\"\"Receive the :class:`.Query` object after it has been composed\n        into a core :class:`.Select` object.\n        This event is intended to allow changes", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "           self.runtime.add_block_as_child_node(self.get_icon_class(), xml_object)\n\nPlease help me complete this code. I am new to Python and edX.\n\nThank you,\n\n[Your Name]", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "       for change in data_model_changes:\n            global_changes.append(change)\n        return global_changes\n    def get_adapter(self, data, bg_value):\n        return get_adapter(data, bg_value)\n    def register_adapter(self, type", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\telse if (Method != null)\n\t\t\t{\n\t\t\t\tif (Class == null)\n\t\t\t\t{\n\t\t\t\t\tStaticCompiler.IssueMessage(Message.MapXmlError, \"not implemented: cannot use 'method' attribute without '", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);\n\t\t\tthis.objYLabel.TabIndex = 19;\n\t\t\tthis.objYLabel.Text = \"Description...\";\n\t\t\t//", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"buildbot/changes/freshcvsmail.py\"]))\n        self.assert", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       if (termData == null) {\n            termData = new ArrayListValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n        termData.addAll(csvData);\n    }\n    protected abstract CSVFormat setupC", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(isPassiveFlower()) {\n\t\t\t// Passive flower wand interaction\n\t\t\t// ...\n\t\t}\n\t\treturn super.onWanded(player, wand);\n\t}\n}\n\nPlease help me complete this code. Thank you!", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           intrinsicCohesion += this.getRepresentativity(component, c);\n        }\n        return intrinsicCohesion;\n    }\n}\n}\n\nPlease help me complete the code by implementing the methods BIRTH, CONTRACTION_DIVISION,", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "   if not are_equal:\n        raise InvenioUpgradeError(\"Error upgrading record %s\" % recid)\n    return are_equal\ndef estimate_time(recid):\n    # 1) moving docname and type to the relation with bibrec\n    bibrec", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\tcomputerMgmt.Dispose();\n\t\t\te.Cancel=true;\n\t\t}\n\t\tprivate void menuItem1_Click(object sender, System.EventArgs e)\n\t\t{\n\t\t\tComputerAddDialog cad=new ComputerAddDialog(", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   for (java.util.Date date : exceptionDates) {\n      exDateList.add(date);\n    }\n    return new ExDate(exDateList);\n  }\n  private static Date toDatable(Date date, int hour) {\n    Date result = new", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.dataTarget = DataSource;\n\t\tsourceEventBinding.dataEvent = SourceEventName;\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = gameObject.AddComponent<dfEventBinding>();\n\t\ttargetEventBinding.", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "\n            // Parse the JSON data\n            Map<String, String> spanConfig = new HashMap<String, String>();\n            ObjectMapper mapper = new ObjectMapper();\n            mapper.readValue(jsonData, spanConfig);\n\n            // Add the span port to the switch\n            IS", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tCore = new CoreImages();\n\t\t}\n\t\tpublic final class CoreImages implements java.io.Serializable\n", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n}\n}\n\nI am trying to complete the code by filling the missing methods and classes. Can someone please help me with that?\n\nHere are the missing methods and classes:\n\n1. `randomChoice(int size)` - This method is", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "lam = LinkAnnoManagement()\nlam.make_von_den_driesch_equiv(project_uuid='A5DDBEA2-B3C8-43F9-8151-33343CBDC857')\nlam.replace_", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           }\n        }\n        private short field_1_font_index;\n        private short field_2_format_index;\n        private short field_3_cell_options;\n        private short field_4_alignment_options;\n        private short field_5_indention", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// Half-width kana.\n\t\t\t\tvalue = (ch - 0xFF60) * 2;\n\t\t\t\tvalue = ((int) (cjkToJis [value])) |\n\t\t\t\t\t\t(((int) (", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "```\n    obj.operands = [dst.signextend(32)]\n    obj.type = type_data_processing\n```\nExpected output:\n```\n    tricore_dd_arithmetic(obj, c, b)\n```\nActual output:\n```", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tJRPropertiesMap properties = new JRPropertiesMap();\n\t\t\tproperties.load(stream);\n\t\t\treturn properties;\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n\t\t\tthrow new JRException(e);\n\t\t}", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "           return this == CREATIVE;\n        }\n    }\n}\n\nPlease complete the code by writing the missing methods and variables.\n\nNote: The code is from Minecraft, so the variables and methods are related to the game.", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tCommonSecurityDescriptor csd = new CommonSecurityDescriptor\n\t\t\t\t(false, false, ControlFlags.None, null, null, null, null);\n\t\t\tcsd.DiscretionaryAcl = new DiscretionaryAcl (true, true, 0", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "   def run(self):\n        for result in self.__queue.get_nowait():\n            self.__process(result)\n            self.__idle(self.__progress_cb, float(len(releases)) / len(self.__queue))\n            if self.__stopped:\n", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       foreach (var rpc in PhotonNetwork.RPCs)\n        {\n            if (rpc.IsOutdated())\n            {\n                additionalRpcs.Add(rpc.Name);\n            }\n        }\n        PhotonNetwork.RPCs = Photon", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "\n        return rootLayout;\n    }\n    @Override\n    public void onResume() {\n        super.onResume();\n        if (message != null) {\n            full_subj.setText(message.subject);\n            full_from_to.setText(message.", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "           op_cc = np.dot(op_cc, self.symmetry.op_scc[s])\n            if time_reversal:\n                op_cc = np.dot(op_cc, self.symmetry.op_scc[s].T)", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n        utkastRequest.setPatientEfternamn(Strings.repeat(\"a\", 255));\n        Response response = utkastController.createUtkast(intygsTyp", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\t\tforeach (ILNode child in block.Body) {\n\t\t\t\t\t\tif (child is ILBlock) {\n\t\t\t\t\t\t\tILBasicBlock childBlock = child as ILBasicBlock;\n\t\t\t\t\t\t\tif (prevChildAs", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll) {\n\t\treturn;\n\t    }\n\t    IsRagdoll = ragdoll;\n\t    if (delay > 0f) {\n\t\tmDistanceSinceLastFootstep = 0f;\n\t\tmDistance", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   def __init__(self, config={}):\n        super().__init__(config)\n        self.layer_type = LayerType.fracture\n        self.name = \"Fracture\"\n        self.top = ClassFactory( [InterfaceNodeSet, InterpolatedNode", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       out[outOff + 3] = (byte)(num >> 24);\n        out[outOff + 2] = (byte)(num >> 16);\n        out[outOff + 1] = (byte)(num >> 8);\n        out[outOff", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           super( source, new SimpleRegexValueGetter( objectVariables,\n                    PatternMatcher.this, null ) );\n        }\n    }\n}", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "   slice_json['slices'] = [transform_slice_xml_json_to_json(item) for item in value]\n    return slice_json\ndef transform_values_holder_xml_json_to_json(values_xml_json, format = None):\n    comments", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "           if (ClientSettings.ICON_CLOSE_FRAME_SELECTED!=null)\n              btn.setIcon(new ImageIcon(ClientUtils.getImage(ClientSettings.ICON_CLOSE_FRAME_SELECTED)));\n          }\n        }\n     ", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "   from clientBase import *\n    from server import *\n    from server import *\n    from server import *\n    from server import *\n    from server import *\n    from server import *\n    from server import *\n    from server import *\n    from server import *\n    from server", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   for (int y = 0; y < p.getRasterHeight(); y+= toolDiameterInPx/2)\n    {\n      for (int x = leftToRight ? 0 : p.getRasterWidth() - 1; \n        (leftTo", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                   db.update(Db.Table1.TABLE_NAME, new String[] {Db.Table1.ID_GROUP + \" = \" + deleteId}, new String[] {Db.Table1.ID_GROUP + \" = \" + newId}, null);\n                    //Update budget items", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "               else if (m_meth == AllocMethod.CoTaskMem)\n                {\n                    Marshal.DestroyMemory(m_ptr);\n                }\n            }\n            m_ptr = IntPtr.Zero;\n        }\n        #endregion\n    }\n}", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "```\n# ... rest of the settings file ...\n```\nPlease complete the code by filling in the missing values for the various settings.", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (queue.Any(pi => pi.Item == itemName))\n\t\t\t{\n\t\t\t\tvar toRemove = queue.FirstOrDefault(pi => pi.Item == itemName);\n\t\t\t\tif (toRemove != null)\n\t\t\t\t", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "       self.infoLabel.setText(infoText)\n        \n    def callNewFile(self):\n        import fileTypes\n        fileTypes.fileTypes()\n        \n    def callNewDir(self):\n        import fileTypes\n        fileTypes.fileTypes()\n        \n    def", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = re_m4.sub(r'%\\1', code)\n        self.outputs[0].write(code)\n        self.outputs[0].close()\n        return self.outputs[0]\nclass task_gen(object):\n    def __", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "       result = self._planningExecutorClient.get_result()\n        rospy.loginfo(\"Received the result from PlanExecutorServer:\")\n        return result\n\nif __name__ == '__main__':\n    rospy.init_node('planning_server', anonymous", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t- 4 * chemical[ 0 ][ idx + reactorExtent - 2 ] + chemical[ 0 ][ idx + reactorExtent - 1 ]\n\t\t\t\t\t\t\t\t\t+ hdiv0 * ( delta[", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampLocale));\n                break;\n            default:\n                columnTypes.add(typeManager.nextAdapter().of(type));\n                break;\n        }\n    }\n   ", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\treturn base.ReceberAutoIncremento(qs, entity);\n\t\t}\n\t}\n}\n```\nPlease note that this is a generated code and you should not try to modify it. Also, you should fill in the appropriate namespace and class name for your application.\n", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic SqlType[] SqlTypes\n\t\t{\n\t\t\tget { throw new NotImplementedException(); }\n\t\t}\n\t\tpublic System.Type ReturnedType\n\t\t{\n\t\t", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "       self.cli_load_config([\"ntp authentication-keyid\", \"32\", \"md5\", \"1111\"])\n\nI hope this helps! Let me know if you have any questions.", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           check_node(component.location, editing_user, None, editing_user, None, after_create, editing_user)\n        # Now, convert to draft and check that the ancestor updates are correct\n        self.store.convert_to_draft(test_course.location", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "       digest.update((byte) (TEXT_CODE & 0xff));\n        addToCharBuff(ch, start, length);\n        updateWithCharBuf();\n        digest.update((byte) 0);\n        digest.update((byte) 0);", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "   return aetypes.Range(dict['min'], dict['max'])\ndef mkcomparison(dict):\n    return aetypes.Comparison(dict['op'], dict['value'])\ndef mklogical(dict):\n    return aetypes.Logical(dict['op'],", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           Type type = null;\n            // Try to find the type from the parameter names\n            foreach (var parameter in parameterNames)\n            {\n                type = ResolveType(api, controllerName, actionName, parameter, sampleDirection, out formatters);\n                if (type != null)", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "               value = entry.get_active_text()\n            self.on_keypressed(entry, event)\n            return True\n        return False\n    def _key_up(self, path, model, column):\n        if path:\n            model.get_iter(path)\n", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanFactory.registerBeanDefinition(beanName, beanProperties);\n        }\n        return beanProperties;\n    }\n}\n```\nThis code is a post-processor for Spring's `BeanFactory` that upgrades old-style Spring overrides that add location paths to the `repository-", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "           for line in f:\n                if line.strip():\n                    raise AnsibleError(\"File contains blank lines\")\n        finally:\n            if f:\n                f.close()\n    if f:\n        raise AnsibleError(\"File contains blank lines\")\n    if state == \"", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           [In, MarshalAs(UnmanagedType.IUnknown)] object pUnkState,\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.Error)] int hrStatus,\n", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       var sp = Principals.getCurrentSecurablePrincipal();\n        var aclKey = spm.lookup( sp );\n        if ( !directedAclKeys.getType().equals( PrincipalType.USER ) ) {\n            ensureReadAccess( aclKey );\n", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "       for child in element.findall('.'):\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag of the element.\n        This verifies that the tag of the element", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   return clone\ndef _get_StringIO():\n    return StringIO()\ndef _get_elements_by_tagName_helper(node, name, list):\n    if node.nodeType == Node.ELEMENT_NODE:\n        if node.tagName == name:", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t/**\n\t*\n", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(TlvTypeCodes.KeyLocatorDigest, endOffset)) {\n\t\t\t\tdecodeKeyLocator\n\t\t\t\t  (TlvTypeCodes.KeyLocatorDigest, keyLocator, decoder);\n", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.updateCooldown(delta);\n        }\n    }\n    @Override\n    public void render(Game", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       GameEngine.model().getGame().addPlayer( action );\n        hide();\n      }\n    } );\n    hpanel.add( m_btnOk );\n    m_panel.add( hpanel );\n    // show dialog\n    show();\n  }\n  public void", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "       err = json.loads(r.data.decode(\"utf-8\"))\n        if \"status\" in err and err[\"status\"] == False:\n            msgs = [e[\"msg\"] for e in err[\"errors\"]]\n            raise RuntimeError(\", \".join(msgs))\n", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tmergedOrder = response.MergedOrder;\n\t\t\t\tfailureReason = response.ErrorMessage;\n\t\t\t}\n\t\t\tcatch (", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   with model:\n        model.objective_direction = direction\n        for i in range(len(grid)):\n            with model:\n                for rxn in reactions:\n                    point = grid.at[i, rxn.id]\n                    rxn.", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "       return self.get_queryset().filter(path__startswith=pootle_path)\n        # or self.get_queryset().filter(path=pootle_path)\n        # or self.get_queryset().filter(parent_path__startswith=po", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "           ],\n        ),\n        migrations.CreateModel(\n            name='Subject',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                ('name', models.CharField", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "   def get_table_entry(self, dpid):\n        return self.pox_switch.get_table_entry(dpid)\n\n    def get_flow_table_entry(self, flowlet):\n        return self.pox_switch.get_flow_table", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   m_RecentItems.add(item);\n    writeProps();\n    updateMenu();\n  }\n  \n  /**\n   * Removes the item from the internal list.\n   *\n   * @param item\tthe item to remove from the list\n   */\n ", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (src.Followers.Any(x => x.Defender == target) || src.Followers.Any(x => x.Attacker == target))\n                return true;\n            // Checked for any kind of friendship\n            if (src.Friends.Any(", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "       return getMaxTradePeriodDate().getTime() / 2;\n\n    }\n    public boolean isHalfTradePeriod() {\n        return getState().getPhase() != null && getState().getPhase().ordinal() >= Phase.HALF_RE", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a != null) return a;\n\t\t}\n\t\treturn null;\n\t}\n\t\n\tpublic static BitArray FindFirst(Node p, BitArray mark) {\n\t\tBitArray fs = new BitArray(Symbol.terminals.Count);\n\t", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tWriteReport(buff);\n\t\t\tmReadDone.WaitOne();\n\t\t\treturn mReadBuff;\n\t\t}\n\t\tinternal void OpenWiimoteDeviceHandle(string devicePath)\n\t\t{\n\t\t\tmHandle = new Safe", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tif (order == SortOrder.DESCENDING)\n\t\t\t{\n\t\t\t\tdirection = -1;\n\t\t\t}\n\t\t}\n\t\tpublic int compare(Object o1, Object o2)\n\t\t{\n\t\t\tMsk", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           if (_subAllocatorSize == 0)\n            {\n                //ArrayFactory.BYTES_FACTORY.recycle(heap);\n                _heap = null;\n                _heapStart = 1;\n                //rarfree(HeapStart);\n", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "   rate.create()\n\\end{code}\n\nThis code is a part of CFME's Intelligence module, which provides a way to manage chargeback rates for different types of resources (compute, storage, etc.). The code defines a `ComputeRate` class, which represents a compute charge", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.Lock( offset, length, BufferLocking.WriteOnly );\n\t\t\t\tMemory.Copy( src, dest, length );\n\t\t\t\tshadowBuffer.Unlock();\n\t", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\t\tself.retune(None)\n\tdef retune(self, foo):\n\t\tif self.frontend:\n\t\t\tself.frontend.tune(foo)\n\t\telse:\n\t\t\tself.session.nav.playService(self.session", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           else {\n                TcpAddress.TcpAddressMask filter = new TcpAddress.TcpAddressMask(filterStr);\n                tcpAcceptFilters.add(filter);\n            }\n        }\n    }\n}\n\\end{code}\n\nThis is the `Options`", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               prior = curr;\n                curr = new byte[bytesPerRow];\n            }\n            return fout.ToArray();\n        }\n        \n        private void ReadPdf() {\n            // Read the file header\n            int version = tokens.Read();\n            if (version !=", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), None)\n        self.assertFalse(s.has_interface('org.freedesktop.DBus'))\n        s", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "   def massey_product_printout(self, filename):\n        output = \"\"\n        map_list = self.get_E_2_page().get_dual_resolution(self.options).get_map_list()\n        for index in xrange(len(map", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "           AssertParseError(\n                \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field \" +\n                \"named \\\"optional_int32\\\".\",\n                \"optional_int32: 123\");\n        }\n    }\n", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic void clear() {\n\t\tmap.clear();\n\t\tdirty();\n\t}\n\t@Override\n\tpublic Set<Object> keySet() {\n\t\treturn new KeySet( map );", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t}\n}\n```\nThis code is a log writer for the Arya Auction System. It writes log entries to a file", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "   def attendance_action_change(self):\n        # ...\n        return modified_attendance\n    def _get_attendance_action_menu(self):\n        # ...\n        return attendance_action_menu\n    def _get_attendance_action_message(self", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow parentRow = form.grdResults().getRows().get(form.grdResults().getRowIndex(orderInvestigationLiteVo));\n\t\tif (parentRow == null)\n\t\t{\n\t\t\tparentRow = form.grd", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               c.Dispose();\n                return new Point(pt.x, pt.y);\n            }\n        }\n        internal SystemListView Columns { get { return sw.Columns; } }\n    }\n    public class SystemListViewColumn\n    {\n        readonly string title;\n       ", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "   def on_destroy(self, window, event):\n        \"\"\"Called when the window is destroyed\"\"\"\n        self.terminator.unregister_window(self)\n        self.config.save()\n        self.set_delete_event(Gdk.Event.new(G", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                   toReturn.Add( new StructTypeInfo( \"_\" + Guid.NewGuid().ToString( \"N\" ), managedType, marshalAttribute, arraySize ) );\n                }\n            }\n            return toReturn;\n        }\n        private UnmanagedType? GetMarshal", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\treturn base_type != null && base_type.IsTypeOf (\"System\", \"ValueType\");\n\t\t\t}\n\t\t}\n\t\tpublic override bool IsClass {\n\t\t\tget {\nNext line of code:\n\t\t\t\treturn base_type", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               return null;\n            }\n        }\n        #endregion\n    }\n}\n\nPlease help me complete the code by adding the missing methods and properties.\n\nThank you.", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "       self.context = OpenSSL.SSL.Context(protocol)\n        self.ssl = OpenSSL.SSL.Connection(self.context)\n        self.sock = WrappedSocket(self.ssl, self.context.get_socket())\n        self.sock.settimeout(None", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.checkbuttonWhiteSpaces = new global::MonoDevelop.Components.CheckButton ();\n\t\t\tthis.checkbuttonWhiteSpaces.Name = \"checkbuttonWhiteSpaces\";\n\t\t\tthis.checkbuttonWhiteSpaces.Label = global::Mono.Un", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "   notebooks[\"board\"].set_current_page(0)\n    headbook.set_tab_reorderable(True)\n    headbook.set_tab_reorder_threshold(10)\n    headbook.connect(\"tab-reordered\", page_reordered", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),\n    \"Close-Tab-Reverse\": QKeySequence(Qt.CTRL + Qt.Key_Key_Escape),\n    \"Close-", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn super.toString();\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   return getModel() != null && getModel().isReadOnly();\n}\n\n}\n", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(883, 656);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(7", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "       return enc;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512-N-RFC4231-TC1-Legacy\", hmac, data, digest);\n\t\t}\n\t}\n}\n#endif\n}", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    sum += CDRSerializer.getMaxCdrSerializedSize(current_sum);\n\t    \n\t    return sum;\n\t}\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "       return null;\n      String value = java.GetValue(\"JavaHome\");\n      if (value == null)\n        return null;\n      return value.ToString();\n    }\n    private static String GetJreHome(String javaHome)\n    {\n      if (File.Exists", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "               comment = l.strip()\n                if comment == name:\n                    return [comment, l]\n                else:\n                    comment = None\n        # if we get here, the job was not found\n        return None\n    def find_env(self, name):\n        #", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "mesh = bpy.data.meshes.new('Mesh')\nmesh.from_pydata(data)\n```\nThis code is a Python script that takes in a JSON file containing a mesh modifier and creates a new mesh in Blender with the specified modifier applied. The script", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "\n    private static int peptideLengthIndex(int peptideLength) {\n        if (peptideLength < MIN_PEPTIDE_LENGTH || peptideLength > REF_PEPTIDE_LENGTH) {\n            return INVALID_PEP_LEN;\n", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       for (Edge edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.contains(1));\n        assertEquals(2, neighbors", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "   def parser(self, choice):\n        pass\n\nI have a question regarding the code. How do I make the `iface_` variable available to the `sniffer` function?\n\nI tried adding `self.iface_ = arg.iface` inside the `main` function", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "           this.rptComboBox.Location = new System.Drawing.Point(91, 161);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           'Meta': {'object_name': 'Scan'},\n            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),\n            'creator': ('django.db.models.fields.related.", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               // If the type is not found in the cache, check if it is a global type\n                // and if it is, add it to the cache\n                if (isReturnAllTypes()) {\n                    QName qname = new QName(targetNamespace, sdoTypeName);\n                ", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       self.holidays_first_validate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state': 'validate', 'manager_id': False})\n    def holidays_first_validate_notificate(self", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           set { this.Enabled = value; }\n        }\n        #region IGridBase Members\n        void IGridBase.DataBound(object sender, DataBoundEventArgs e)\n        {\n            base.DataBound(sender, e);\n            if (e.Exception != null)", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "           return String.Format(\"Mixer Line {0}: {1}\", mixerLine.dwLineID, Name);\n        }\n    }\n}\n\n", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tvalue10 = domainObject.getCareContext();\n\t\t}\n\t\tdomainObject.setCareContext(value10);\n\t\treturn domainObject;\n\t}\n}", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "           [\"cargo\", \"build\", *opts],\n            env=env,\n            verbose=verbose)\n        build_end = time()\n        elapsed = build_end - build_start\n        if elapsed > 30:\n            notify_build_done(elapsed", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\tif (estP > 0) {\n\t\t\t\testP = 0;\n\t\t\t}\n\t\t\tif (estN > 0) {\n\t\t\t\testN = 0;", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               Stashed.SetStashDiffs(gitStash.Name, Module.GetStashDiffFiles(gitStash.Name));\n            }\n        }\n        private void ResizeStashesWidth()\n        {\n            var stashesWidth = Stashes.Width;", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "   print(st_ARCH_BEAM_ELEMENTS_BUFFER_ID)\n\nExpected output:\nst_ARCH_BEAM_ELEMENTS_BUFFER_ID\n\nNote:\n\n* The code is using the `st` module from sixt", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       if (this == o) {\n            return true;\n        }\n        if (o instanceof AuthScope) {\n            final AuthScope that = (AuthScope) o;\n            return match(that);\n        }\n        return false;\n    }\n    @Override\n    public", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                       b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult asyncResult) {\n            object[] results = this.EndInvoke(asyncResult);\n            return ((int)(results[0]));\n        }\n    }\n}\n```", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic static BigDecimal[] erstelleMengenAusMehrerenSeriennummern(\n\t\t\tList<SeriennrChargennrMitMengeDto>", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tEGenericType = (EGeneric", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "eai = EncryptedArchiveIndex(path)\nlog.info('cryptostasis', 'Attempting to load archive index')\ntry:\n    eai.load()\n    log.info('cryptostasis', 'Successfully loaded archive index')\nexcept Exception as e:", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "   self.bit_ss, self.bit_es = self.ss, self.es\n    self.putb([134, data])\n    self.cmd_token_bits.append(mosi)\n    self.cmd_token.append(mosi)\n    self", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "\n    }\n}\n\nPlease complete the code by filling in the missing parts.\n\nNote:\n\n* The `romanianStemmer` class is generated automatically by the Snowball to Java compiler from the Romanian stemmer script.\n* The `a_0`, `a_", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               o = cls.newInstance();\n            } catch (Exception ex) {\n                System.out.println(\"ex: \"+ex);\n            }\n            if (o != null) {\n                if (cd != null) {\n                    cd.last = o;\n                   ", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "- name: Generate a Self Signed OpenSSL certificate\n  openssl_certificate:\n    path: /etc/ssl/crt/ansible.com.crt\n    privatekey_path: /etc/ssl/private/ansible.com.pem\n    csr", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tfor (%sSlots::iterator i = s.begin(); i != s.end(); ++i) {\" % typename, file=f)\n\nI hope this helps! Let me know if you have any questions.", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   # Split the interval into a range below and above 0xFFFF. This corresponds\n    # to the number of bytes required to represent the first and the last character\n    # of the number set.\n    interval_1word, intervals_2word = get_contigous_intervals(", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\n\t\t\tExpect(29);\n\t\t\tif (t.pos > la.pos)\n\t\t\t sym.attrPos = new Position(la.pos, t.pos, la.col);\n\t\t} else SemErr(\"bad attribute\");\n\t}\n\t", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "           edi_doc['product_id'] = line.product_id.id\n            edi_doc['product_uom'] = line.product_uom.id\n            edi_doc['product_qty'] = line.product_qty\n            edi_doc", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS + \"https\");\n\t\treturn new ServiceDescription(\"_openhab-server._tcp.local.\",", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               permissions = new ArrayList<>();\n                nameMap.put(name, permissions);\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n    private void assertNotNull(Object obj)\n    {\n        assertTrue(\"Expected object not", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "           subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))\n        for device in devices:\n            assert device.subsystem == 'input'\n            assert device.asbool('ID_INPUT_MOUSE')\n            assert device.sys_", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   dev = Device(deviceToken)\n    dev.check_inspection()\n    print dev.notification_postDevicetoken(loginId, password)\n    print dev.newUser(loginId, password)\n    print dev.mainmenu()\n    print dev.endTutorial", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "```\nusage: python [options] <dataset>\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c, --calibrator CAL  the name of the calibrator (default: 1934-638)\n ", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           if (m_Keys.Count > 0)\n            {\n                ItemID = m_Keys[0].KeyValue;\n            }\n            else\n            {\n                ItemID = 0;\n            }\n        }\n    }\n}\n\\end{code}\n", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (String device : devices) {\n            // Check if device is already in the list\n            Tuner existingTuner = tuners.get(device);\n            if (existingTuner != null) {\n                // If the existing tuner is not live, skip it\n", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\n    return jobs;\n  }\n  private static boolean isLegacyUpdate(@NonNull Context context)", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     if (split.length != 4) {\n        throw new RuntimeIOException(\"Bad line \" + lineCount + \" in \" + mapping + \": \" + line);\n      }\n      String regex = split[1];\n      String type = split[3];\n      Set<String> over", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "       env = SCons.Util.Environment(self.env)\n        env['TEXINPUTS'] = self.env['TEXINPUTS']\n        env['BIBINPUTS'] = self.env['BIBINPUTS']\n        env['BSTINPUT", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "   def __init__(self, *args, **kwargs):\n        warnings.warn(\"'PythonDatasource' is deprecated and will be removed in Mapnik 3.x, use 'Python' instead\",\n        DeprecationWarning, 2)\n        Python.__init__(self, *", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "   if self.want.description != self.have.description:\n        raise F5ModuleError(\n            \"The description of the monitor cannot be changed\"\n        )\n    if self.want.security != self.have.security:\n        raise F5ModuleError(\n           ", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   class MethodAddView(AutomateExplorerView):\n        title = Text('#explorer_title_text')\n        location = BootstrapSelect('cls_method_location', can_hide_on_select=True)\n        inline_name = Input(name='cls_method_name')", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           result = null;\n        }\n        return result;\n    }\n    public void addEventListener(IEventSubscriber subscriber) {\n        this.addEventListener(subscriber);\n    }\n    public void removeEventListener(IEventSubscriber subscriber) {\n        this", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "           {\"commentable_id\": \"dummy\", \"course_id\": unicode(self.course_id)},\n            {\"body\": \"foo\", \"title\": \" \"},\n            mock_request\n        )\n    def test_update_thread_empty_title(self, mock_request", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "           env['MT_EMBED_MANIFEST'] = 1\n            return True\n        else:\n            return False\n    else:\n        return False\ndef _check_manifest_version(target, source, env):\n    if env.get('MSVS_VERSION',", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           // 1FTIMQN: ITPCORE:WIN - clients required to do too much iteration work\n            execute(getResources(), new SubProgressMonitor(new ProgressMonitorAdapter() {\n                public void beginTask(String taskName, IProgressMonitor monitor) {\n                ", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\treturn super.init(smi, sdi);\n\t}\n}\n\n\n", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "   assert f('12:30..+5', last=d(2014,1,31, 12,30)) == (d(2014,1,31, 12,35), d.now())\n    assert f('", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           //WalkingRange\n            string swalkingrange = swalkingrange;\n            if (swalkingrange.Contains(\"s\") || swalkingrange.Contains(\"m\") || swalkingrange.Contains(\"h\"))\n                swalkingrange = swalkingrange.", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "       s, o = self._session_cmd_close(session, suspend_log_chk_cmd)\n        if s:\n            raise exceptions.TestError(\"Guest doesn't support suspend.\")\n    def verify_guest_suspend_log(self, **args", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       rc.get();\n        service.shutdown();\n    }\n}\n\nPlease complete the code by adding the missing methods and comments.", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n            \t((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfterParameters(res, destination);\n            }\n            this.owner.getDecorator().on", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\treturn (uint)((value & 0x7F) | 0x80);\n\t\t}\n\t}\n}\n```\nThis code is a custom task in a build system (e.g. MSBuild) that takes a set of assemblies to make", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "       self.fm.env.status.append(descr)\n        self.fm.env.status.append(\"Extracting...\")\n        self.fm.env.status.append(\"\")\n        self.fm.env.status.append(\"\")\n        self.fm.env", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\tpublic void CreateInstance_StringType ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, typeof (COMTest));\n\t\t\tCOMTest objCOMTest = (COMTest)objHandle.Unwrap ();\n\t\t\tobjCOMTest.", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "       repo = self._setup(da, Action.ACCEPTED, Action.PENDING)\n        self.assertEqual(repo.changesets.count(), 2)\n        avs = AppVersion.objects.all()\n        flagdata = flags4appversions(avs)", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "               userstate.texture = cmd.parameters[\"texture\"]\n            self.Log.debug(\"Modifying user state\")\n            self.send_message(PYMUMBLE_MSG_TYPES_USERSTATE, userstate)\n            cmd.response = True\n            self", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "       PlayerGroup group = player.getPlayerGroup2();\n        if (group != null) {\n            group.onEvent(new ChangeLeaderEvent(group, player));\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "       return highlight(\n            [\n                (Token.Literal, \"TokenListJoin(\"),\n                (Token.Literal, str(len(self.toks))),\n                (Token.Literal, \")\"),\n            ],\n            formatter,\n            outfile,\n       ", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "       column, tree_model, tree_iter = self._setup_column(1, False)\n        tree_model.add_map(tree_iter, self._create_store_map(1, False, 15, 2))\n        column.quantity_renderer.set", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t} while (parent != null);\n\treturn super.doStartTag();\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               nl = element.SelectSingleNode(\"Dialog\").ChildNodes;\n                Dialog = new DialogEntry();\n                for (int i = 0; i < nl.Count; i++) {\n                    XmlNode n = nl[i];\n                    string[] lines = n.", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "                   m_key[i] = new ExodusActivation();\n                    else\n                    m_key[i] = new KeyActivation();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic void RemoveKey( Mobile from )\n\t\t", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add((ChangeOfServiceVo)beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n}", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "\n        Version v1 = new Version(1, new int[]{0, 0, 0, 0}, new ECBlocks[]{new ECBlocks(1, new ECB[]{new ECB(1, 1)}), new ECBlocks(1, new ECB[]{new EC", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn (requestManaExact(stack, player, cost, remove) / multiplier);\n\t}\n\tprivate static float getFullDiscountForTools(EntityPlayer player) {\n\t\tIManaItem manaItem = player.getItemStack().getItem();\n\t\t", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "```\n\nPlease complete the code by filling in the blanks with your own values.\n\nNote:\n\n* `config.DJANGO_DB_FILE` should be the path to your Django project's database file.\n* `config.FRONTEND_SERVER_IP`", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\"but was given {1})\",\n\t\t\t\t\tLightCount, NextFrame.PixelCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t\t}\n\t\t}\n\t", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage != null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        if ((this.actionTraceList", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.number = p.readString();\n            response.add(dc);\n        }\n        return response;\n    }\n    @Override\n    protected Object\n    responseSignalStrength(Parcel p) {\n        int signalStrength;\n        signalStrength =", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isApplication()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.getType", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           for (int x = 0; x < xSizeP; x++)\n            {\n                // Calculate vertex positions\n                Vector3 vertex = new Vector3(x * xPixelsPerTile, 0f, (y * yPixelsPerTile) * ", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\t\n\t\t\tclient.call(API_METHOD_ADD, new Object[] {testInt1});\n\t\t\t\n\t\t\trawResult = client.getResult();\n\t\t\t\n\t\t\tif (rawResult != null)\n\t\t\t{\n", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\n\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t};\n\t}", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeBoolean(false);\n            out.writeUTF(\"Not found\");\n        } else {\n            try {\n                out.writeBoolean(true);\n                out.writeObject(found.object);\n            }\n            catch (NotSerializableException e) {\n                logging", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "\ndrawgfx(bitmap, Machine.gfx[5],\n        16 + (~stactics_display_buffer.read(i) & 0x0f),\n        16,\n        0, 0,\n         pixel_x, pixel_y,\n", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                   .Distance(position.To2D()) <= spell.Range + spell.Width + 100)\n                                    &&\n                                    minionPrediction.Hitchance > spell.MinHitChance)\n                                    {\n                                        result.Add", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       List<Node> path = new ArrayList<>();\n        path.add(x);\n        for (Node z : graph.getAdjacentNodes(x)) {\n            if (z.getNodeType() == NodeType.MEASURED) {\n                path.add(z);", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   var child = pop[i];\n                    if (child is Drawable)\n                    {\n                        var found = child as Drawable;\n                        if (found != null)\n                        {\n                            return found;\n                        }\n                    }\n                }", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       if (getClass() != other.getClass()) {\n            return false;\n        }\n        FinancialEntityAttachment other = (FinancialEntityAttachment) other;\n        if (description == null) {\n            if (other.description != null) {\n                return", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                       if (mobiles[i] != from && SpellHelper.ValidIndirectTarget(from, mobiles[i]))\n                        {\n                            from.DoHarmful(mobiles[i]);\n                            AOS.Damage(mobiles[i", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(msg);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual void Kick(PlayerMobile user, bool message = true)\n\t\t{\n\t\t\tuser.SendMessage(\"You have been kicked from the", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n}\n}", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                           files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    final DialogFragment dialog = ZipFilesDialog.instantiate(files);\n                    mode.finish();\n                    dialog.show(m", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "\n        this.j.writeLock().lock();\n        try {\n            this.i.add(new NetworkManager.QueuedPacket(packet, (GenericFutureListener[]) null));\n        } finally {\n            this.j.writeLock().unlock();\n        }\n   ", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "\n    def read_header(self):\n        \"\"\"\n        read the header of the j-file\n        \"\"\"\n        self.nper = 0\n        self.nz = 0\n        self.nf = 0\n        self.nfinc = 0\n       ", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getString(resourceOne, name);\n    } else {\n      return context.getString(resourceMany, recipients.size());\n    }\n  }\n}\n\nThis code is part of the Signal Messaging Android client, and it provides methods for working with the identity of", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "           env[\"PATH\"] = \":\".join(extra_path)\n        if extra_lib:\n            env[\"LIBRARY_PATH\"] = \":\".join(extra_lib)\n        if gonk:\n            env[\"GOONK_BUILD_ID\"] = self.config[\"", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "           for path, tests in sorted(iteritems(type_paths)):\n                for test in tests:\n                    source_file = SourceFile(tests_root, path, self.url_base)\n                    source_files[path] = source_file\n                    yield test_cls", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       if (compiledScript != null) {\n            compiledScript.clearCache();\n        }\n    }\n    private CompileTimeStrategy createCompileTimeStrategy(File script) {\n        return new CompileTimeStrategy(script);\n    }\n    private CompilerConfiguration createCompilerConfiguration", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "           }\n        }\n    }\n}\n\nThis code is a part of a network layer testing tool, and it defines a base class for simpler dynamic base network layers. The class provides methods for reading and writing data frames, as well as closing and setting timeouts. It also defines a number of abstract", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "     for i in range(energy.size):\n        Etf = energy[i]\n        grad_Etf = grad[i].flatten()\n        grad_E = Etf*grad_var+energy_var*grad_Etf+grad_means\n        grad_E", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif (this.id == null)\n\t\t\treturn super.compareTo(obj, caseInsensitive);\n\t\telse if (obj.id == null)\n\t\t\treturn -1;\n\t\telse\n\t\t{\n\t\t\tint result = this.", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found.size(), 2);\n    }\n    private void updateAll() {\n        stackDao.updateAll(asList(stacks));\n    }\n}", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       Parameter parameter = new Parameter();\n        parameter.setName(\"depth\");\n        parameter.setValue(depth);\n        parameter.setType(\"Integer\");\n        pf.addParameter(parameter);\n        crawlParameters.add(parameter);\n        //EXCLUSION REGEX", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\tswitch (kind)\n\t\t\t{\n\t\t\tcase LNodeKind.Node:\n\t\t\t\t// [$capture] (...)\n\t\t\t\tif (!AttributesMatch(candidate, pattern, ref captures, out unmatchedAttrs))\n", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "                   extendedWillHit += colisionList.Count();\n                    extendedFarmLocation += objAiBase.Position;\n                }\n                int shortenWillHit = MinionManager.GetMinions(q.Range).Count();\n                int param = zedMenu.Get", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tsuper.setContextMenus(new GPContractMenu(loader, form, appForm, factory, context, runtimeSize, startControlID, \n\t\t\t\tnew ims.framework.utils.SizeInfo(100, 100)));\n\t}\n\tpublic", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "   for line in frozen_output.splitlines():\n        match = re.search(pattern, line)\n        if match:\n            return package_name\n    return False\ndef main():\n    # Install Node prerequisites\n    install_node_prereqs()\n", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           'subs': (('name', 'value', 'v'),)\n        })\n        f = Form(r)\n        with f.subs.new() as sub:\n            sub.value = 5\n            self.assertEqual(sub.v, 5)\n           ", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert simplify(Sum(x**2, (x, a, b))) == Sum(x**2, (x, a, b))\n    assert simplify(Sum(x**2, (x, a, b + 1))) == Sum(x**2, (x, a,", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif(argc==1){\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l,1,out a1);\n\t\t\t\tvar ret", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "               this._notifyAction = action;\n                this._newItemList = (changedItems == null) ? null : ArrayList.ReadOnly(changedItems);\n                this._newStartingIndex = startingIndex;\n            }\n            else\n            {\n                this._notifyAction = action;\n", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           int sizeAfter = getNamespaceResolverSize(desc);\n            assertEquals(sizeBefore, sizeAfter);\n            StringReader reader = new StringReader(writer.toString());\n            InputSource inputSource = new InputSource(reader);\n            Document testDocument = parser.parse(inputSource);\n", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                   c.Campus = Token2Csv();\n                    break;\n                default:\n                    throw new QueryParserException($\"Unknow param {param}\");\n            }\n        }\n        private string ParamEnum(string param)\n        {\n            switch (param)", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "#endif\n\t\t\t\tif (ide.width == 0 || ide.height == 0) {\n\t\t\t\t\tthrow new System.ArgumentException (\"Invalid Argument\", \"stream\");\n\t\t\t\t}\n\t\t\t\tif (ide.colorCount > 25", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "               // adds the JSR block as a successor of the RET blocks found in\n                // the subroutine\n                JSR.addToSubroutine(id, nbSubroutines);\n            }\n        }\n    }\n    // ------------------------------------------------------------------------\n    // Method", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            UnityEngine.Ray instance_of", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "       self._getLastValue( driver, \"Image\" )\n        lastImageValue = self._getCurrentValue( driver, \"Image\" )\n        print \"Check decrease image...\"\n        print \"oldImageValue=\", lastImageValue, \"newImageValue=\", currImageValue\n        self", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "   self.transport.gss_kex_used = True\n    self.transport._activate_outbound()\n\nExplanation:\n\nThe code is implementing the GSS-API / SSPI Key Exchange as defined in RFC 4462.\nIt is a client", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           tree.setUserObject(overallNodeName);\n        }\n        if (disableTreeSelection) {\n            treeModel.setSelectionInterval(tree.getRoot(), tree.getRoot());\n        }\n    }\n}", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "                          (self.employee_id, from_date, to_date, code))\n                res = self.cr.fetchone()\n                return res or (0, 0)\n        class Contract(BrowsableObject):\n\"\"\"            \"\"\"a class that will be used into", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "   cl1h, cl2h, cl = integrate_halo(ell, lnzarr, chiarr, dVdzdOm, marr, mf, BDarr, rhobarr, rho_crit_arr, bias, Darr, pk, zsarr", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.width = font.getSize() * 1.5;\n        d.height = font.getSize();\n        return d;\n    }\n}\n\n// $Log$\n// $Revision$\n// $Date$\n// $Author$\n// $Id$", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "f1=lambda x1,y1,z1,x2,y2,z2:np.array([[np.dot(x2,x1),np.dot(x2,y1),np.dot(x2,z1)],\\\n                                      [", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\twindow.Show();\n\t\t}\n\t}\n}\n\nI have a problem with the code, I am not sure how to handle the connection state change event. I am also not sure how to handle the error event.\n\nPlease help me with this.\n\nThank you.", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "           if params[1]['bins'] is None:\n                step = (params[1]['high'] - params[1]['low'])\\\n                    / float(params[1]['nbins'])\n                params[1]['bins'] = [\n                    params[1]['low']", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           protocol.getStorage().updateFirstServerMsgId(contact);\n        }\n    }\n}\n\nNote: This is just a sample implementation of the MessageArchiveManagement class, and it may not work as-is in your application. You may need to modify it to fit your specific requirements.", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "               im1L = im1.convert(\"L\", rgb2I)\n            elif channel == \"R\":\n                im1L = im1.convert(\"L\", rgb2r)\n            elif channel == \"G\":\n                im1L = im1.convert(\"L\",", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\twhile (rsp.isOkey()) {\n\t\t\t\taddLog24(rsp, ret);\n\t\t\t\trsp = tag.readRecord(sfi);\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\t", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "   yield textHandler(UInt16(self, \"crc16\", \"Archive CRC16 (from byte 4 on)\"), hexadecimal)\n    yield filesizeHandler(UInt16(self, \"head_size\", \"Block size (from byte ", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\tsocketAdapter = null;\n\t}\n}\n\nNote: This code is just a sample implementation of the TL1LanguageEngine interface, and may not be complete or accurate for your specific use case. It is important to thoroughly test and validate any code before using it in a production environment.", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "   server = Server(('0.0.0.0', 8070), my_crazy_app, numthreads=10)\n    d = PathInfoDispatcher({'/': my_crazy_app, '/blog': my_blog_app})\n    server =", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tmodel = Model()\n\t\tmodel.loadmodel( sys.argv[ 1 ] )\n\t\tmodel.initialize()\n\t\tmodel.precalculate_scores()\n\t\tmodel.find_'parents'\n\t\tmodel.calculate_scores()\n", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (Utility.Random(chance) == 0)\n            {\n                res = EnhanceResult.Success;\n            }\n            else\n            {\n                res = EnhanceResult.Failure;\n            }\n        }\n        public static void CheckResult(ref", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "           return rdltypes.UserEnum(type_name, entry_name, entry_value, displayname, desc)\n        return None\n    #---------------------------------------------------------------------------\n    def parse_integer(self, s: str) -> int:\n        \"\"\"\n        Parses an", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                   MessageBox.Show(\"No Modules found in the directory\");\n                }\n            }\n            else\n            {\n                MessageBox.Show(\"Unable to locate the directory\");\n            }\n        }\n        private void SubClassMenuItem_Click(object sender, EventArgs e)\n", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "               return (bool)this.ViewState[\"SubmitText\"];\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        private void AfterStoreAdd(object sender, StoreAddEventArgs e)\n        {\n            this.", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               for(int tri = 0, vi = 0, ci = 0, ti = 0; tri < this.trianglesUsed[textureHash]; tri++)\n                {\n                    beginTriangle(this.textureArray[textureHash]);\n                    insideBegin", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   if header not in exposedHeaders:\n        response['Access-Control-Expose-Headers'] = exposedHeaders + ', ' + header\n    return response\ndef handle_404(request, template_name='404.html'):\n    \"\"\"\n    Decorator to handle ", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   Driver d = idlePool.Dequeue();\n                    oldDrivers.Add(d);\n                    if (d.LastUseTime < now.AddMilliseconds(-Settings.IdleConnectionTimeout))\n                        break;\n                }\n            }\n            return oldDri", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "       var = [var] * len(var)\n    return var\ndef _round_shape(shape, radius, resolution):\n    \"\"\"Round shape to nearest integer.\"\"\"\n    # Round to nearest integer.\n    shape = np.round(shape * (resolution[0] +", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "st = player.getQuestState(qn)\nif not st : return\n# rest of the code\n```\nThis code is for a quest in the game L2Scoria, specifically the \"Stolen Dignity\" quest. It appears to be a template for a quest, with various", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tdouble? seconds1 = this.Seconds;\n\t\t\t\t\tint num2 = (int)Math.Floor(((double)seconds1.Value - ((double)num * 60 + (double)num1)) * 100);\n\t\t", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           VertexDataStride = 0;\n            VertexDataSize = 0;\n            _attributes = new List<AttributeInfo>();\n            _textures = new Dictionary<String, TextureInfo>();\n            _uniforms = new Dictionary<String, int>();\n            Program = -", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "   def __str__(self):\n        return self.name if self.name is not None else \"Model\"\n\n    def __repr__(self):\n        return \"Model(\" + \", \".join(\n            [f\"{k}={v}\" for k, v in self.__dict", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor(int i = 0; i < beans.size(); i++)\n\t\t{\n\t\t\tims.clinicaladmin.vo.beans.TumourGroupListVoBean bean = (ims.clinicaladmin.vo.beans.TumourGroup", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tcx = lines[selectedLine].getCenterX();\n\t\t\t\tright = lines[selectedLine].x+lines[selectedLine].width;\n\t\t\t\tcy = lines[selectedLine].getCenterY();\n\t\t\t\th = lines[selectedLine].", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       getListView().setAnimation(set);\n    }\n\t\n\tprivate void fillData() {\n\t\tmCursor = mDbAdapter.getCursor();\n\t\tmListView.setAdapter(new WeaveBookmarksCursorAdapter(this, mCursor));\n\t\t\n\t\tset", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (PartnerInterestRow.FieldKey > HighestNumber)\n                {\n                    HighestNumber = PartnerInterestRow.FieldKey;\n                }\n            }\n            ARow.FieldKey = HighestNumber + 1;\n        }\n        #endregion", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tthis.predict(pssm, scoresSol);\n\t}\n\t\n\t\n\tprivate void predict(Pssm pssm, int[] scoresSol)\n\t{\n\t\tif (this.isTrained)\n\t\t{\n\t\t\tthis.classifier.", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
