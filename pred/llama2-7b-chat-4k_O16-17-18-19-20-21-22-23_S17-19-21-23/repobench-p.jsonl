{"pred": "   private final transient JKademliaRoutingTable routingTable;\n    private final transient JKademliaStorageEntry storageEntry;\n\n    public JKademliaNode(String ownerId, KadServer server, KademliaDHT dht, JJK", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "       // InterlaceEffect interlaceEffect = new InterlaceEffect();\n        // mEffects.add(interlaceEffect);\n        // Register the effect for the toggle menu item\n        mParameterToggleMenuItem = mActivity.getMenu().getMenuToggleButton();\n        mParameterToggleMenuItem.set", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "   private ContrastBrightnessAdjustmentEffect mContrastBrightnessAdjustmentEffect;\n    private FlowAbsSubEffect mFlowAbsSubEffect;\n    private QrMarkerEffect mQrMarkerEffect;\n    private FlipEffect mFlipEffect;\n", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "               new EventCommandHandler<>(UpdateFrequencyChangeCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(PingCommand.class, PingEvent::fromCommand, this::queueEvent));\n", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "    */\n    private LocalRateLimiter localRateLimiter;\n\n    public TaskRunnerContainer(TaskProperties taskProperties, TaskRunnerConfig runnerConfig) {\n        this.taskFactory = new TaskFactory(taskProperties, taskAPI);\n        globalRateLimiter = new GlobalRateLimiter(", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\tStream<Problem> problems = integrityCheck.check(args.path(), passphrase, args.checkFileIntegrity());\n\t\t\tSet<Problem> problemsSet = new Counter();\n\t\t\tproblemsSet.increment();\n\t\t\tif (problemsSet.", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "           // save private and public Key to storage\n            rsa.saveRSAKeys(deviceId);\n            // set the deviceId to the user\n            User userForServer = new User(user.getUserId(), user.getUserName());\n            userForServer.setDeviceId(", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "   SignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_ENROLL);\n}\n\n  @Test\n  public void testGetSignResponse() throws U2FException {\n    u2fServer = new U2FServerReference", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "               if (url != null) {\n                    try (Stream hStream = new HTTP.HTTPStream(url)) {\n                        if (hStream != null) {\n                            try (Paraset p = new Paraset(hStream)) {\n                                if (p != null) {", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "       // Create a new instance of PostLocationDataBody.\n        PostLocationDataBody request = new PostLocationDataBody();\n        request.setLatitude(latitude);\n        request.setLongitude(longitude);\n        // Add the user information to the request.\n        request.set", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "if self.ntype in ['InputLayer', 'ConvLayer', 'FCLayer', 'PoolingLayer', 'InterLayerPipeline']:\n    raise ValueError('Invalid type.')\n\n    def test_len_len_len(self):\n        # Length length length.", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "   def __new__(cls):\n        init_called = True\n        return super().__new__(cls)\n\n    User = cls.from_dynamo(engine)\n    assert init_called\n\n\ndef test_bind_column_bind_index(engine):\n\n", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "                   new HDRTransformation(),\n                    new InvertTransformation(),\n                    new LookupTransformation(),\n                    new MapColorsTransformation(),\n                    new MirrorTransformation(),\n                    new ParкурTransformation(),\n                    new PolarTransformation(),\n", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "   private final Unbinder unbinder = ButterKnife.newUnbinder(this.view.viewholder.view, this);\n\n    @BindView(R.id.image_backdrop) ImageView blurPoster;\n    @BindView(R.id", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "\n            } catch (MBeanException mbea) {\n                throw new IOException(mbea);\n            }\n            }\n        }\n\n    private class UnregisterMBeanHandler implements Common.MessageHandler {\n\n        @Override\n        public void handle(DataInput input, final", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "```\n    async def wild_embed(ctx, pkmn: Pokemon):\n```\n```\n    async def wild_report_enabled(ctx):\n```\n    def monitors_status(self):\n```\n    def create_task_tuple(self, *args):\n```", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "\n    if c['vocab_text']:\n        vocab_text = Vocabulary(c['vocab_text'])\n    else:\n        vocab_text = None\n    # Load dictionary\n    if c['vocab_def']:\n       ", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": " assert isinstance(doppler, TCXOSine)\n  assert doppler.amp_sine_rad_per_m_per_s_m_per_s_rad_per_m_per_s_rad_per_m_per_s_rad", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "           }\n            else {\n                Toast.makeText(getActivity(), \"Invalid Participants\", Toast.Style.WARNING_AND_ERROR, Toast.LENGTH_SHORT).show();\n            }\n        }\n        else {\n            Toast.makeText(getActivity(), \"No Particip", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "\n    def test_random_key(self):\n        for i in range(10):\n            key = random_key(red redis=self.red redis_errors=self.red redis_errors)\n            assert not self.redlock.acquire(key=key)\n           ", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "\n    def get_sample_rate(self):\n        \"\"\"The sample rate in Hz.\n\n        :rtype: int\n        \"\"\".\n\nError:\n\nUnable to compile sound.py\n\nUnroremonable desition (Maybe lacking venbe)\n\n", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "   def parse(self, packet):\n        super(CompressedData, self).parse(packet)\n        self.calg = int(self.header.bytearray()[0])\n\n        if self.calg == 0:\n            # ZIP-compressed packet\n", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "   if not imgshape is None:\n        findCellIntensity(imgshape, img, findCellIntensityParameter = findCellIntensityParameter, maxLabel = maxLabel, method = method, verbose = verbose, out = out, **parameter);\n        #intensity of cells", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "           TapZone tapZone = world.tapZone;\n            if (tapZone != null) {\n                Tone audio = new Tone(Assets.tapSound, 0, 0, 5000);\n                audio.play();\n            }\n       ", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "   }\n\n    private void exit(int exitCode) {\n\n    }\n\n    private void wait() {\n\n    }\n\n    private boolean checkFileValid(File file) {\n\n        return file.isFile();\n\n    }\n\n    private boolean checkDirectoryValid", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "               // Post process the query to handle dimensions and metrics\n                // This is a custom implementation of the query handling logic\n                // It is not the standard way of handling query logic in the driver\n                // It is recommended to use the standard query handling logic\n                // in the driver for consistent behavior\n               ", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "   return SegmentSequence(find_segments(query=['HNHBK', 'HNHBS'], version=1, callback=self.encrypt))\n\n\n    def decrypt(self, message: FinTSMessage):\n        raise NotImplemented()\n\n\n", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                       if (env.captureHistory[i]) {\n                            // r = 0 ???\n                            combExpCheckRecursive(root, i);\n                        }\n                        }\n                    }\n                }\n            }\n        } // USE_CEC\n", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "\n    url(r'^prefilled-forms$', RedirectView.as_view(permanent=True, url='/prefilled-forms')),\n    url(r'^prefilled-forms/(?P<form_id>[\\w\\-\\+]+", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\t\n\t\tpublic ResourceData (Meter meter, EnumSet<SRSLevel> srsSet)\n\t\t{\n\t\t\tthis.meter = meter;\n\t\t\ttags = new EnumMap (SRSLevel);\n\t\t\tcolors = new EnumMap", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "       self.set_client_id(client_id)\n        self.set_user(user)\n        self.set_pass(pass_word)\n        self.set_host(host)\n        self.set_port(port)\n        self.set_connect_time", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "   public ThenStepFactory thenStepFactory(); {\n    return thenStepFactory;INSTANCE;\n}\npublic class GivenTwoArgumentsWhenSteps implements AndGivenTwoArguments<$SystemUnderTest, $Argument, $Argument2> {\n\n    private final Preparation preparation;\n   ", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": " try {\n    // Block until the process completes.\n    try {\n      waitForFinish(process);\n    } catch (InterruptedException e) {\n      throw new IosDeviceException(RealDeviceImpl.this, e);\n      // or Throw(e);\n", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\tif (textColor != null) {\n\t\t\ttv.setTextColor(textColor);\n\t\t}\n\t\t}\n\tpublic void setIconPack(String iconPackName) {\n\t\tif (iconPackName.equals(getIconPacks().getDefaultString()))", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t\ttry {\n\t\t\tReceivedMessage(xml);\n\t\t} catch (RobotException e) {\n\t\t\tlog.warn(\"RobotException: \" + e.getCode(), e);\n\t\t}\n\t\treturn xml;\n\t}\n\n\tpublic void", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "   if not os.path.isdir(os.path.dirname(file_path)):\n    # 创建 os.path.dirname(file_path) 目录，如果已经运行过该 apk 文件，则创建 os.path.dirname(file", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "   @channel_checks.raid_report_enabled()\n    async def cmd_raicity(ctx, *city):\n        \"\"\"\n        **!raicity channel-mention city** - sets the city for the raid party.\n\n        \"\"\"\n        raise BadArgument\n", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "       self.assertIsInstance(date_string_dmy_to_date(\"25/11/2015\"), datetime)\n        self.assertIsInstance(date_string_ymd_to_date(\"25/11/2015\"), datetime)\n", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "   ]  # ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ...", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                           ShareUtil.sharePic(mActivity, picUrl, \"分产自煎蛋\");\n\n                            return \"分产自煎蛿\";\n                        // 其他选项\n                        else:\n                            return", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "```\n\t\t\t\t\t\tmgh_outdata = np.column_stack((image_array,negative_data))\n\t\t\t\t\t\tmgh_outdata = np.column_stack((mgh_outdata,-np.log10(1-positive", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "               ResponseSyncAdapter.class,\n                ResponseFiles.class,\n                ResponseTypedOutput.class,\n                OmhDataPointHeader.class,\n                OmhDataPointTypedOutput.class,\n                OmheltActivity.class,\n                OmheltActivity.Ohmelt", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "       if self.sigtype == SignatureType.BinaryDocument:\n            return ECDHCipherText(self.enc_ct())\n\n        elif self.sigtype == SignatureType.Positive_Cert:\n            return ElGCipherText(self.enc_ct())\n", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "   }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n   ", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "     'no_members': Counter\n      }\n\n  def __init__(self, sink_stack, **kwargs):\n    \"\"\"Creates a new sink and sets up the heap.\"\n\n    Args:\n      sink_stack - The stack of sinks.\n        **kwargs -", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "       nc.send_message_with_protocol(OK, protocol)\n        self.assertEqual(1, protocol.send_string.call_count)\n        self.assertEqual('11:ok,', protocol.send_string.called()[0])\n\n    def test", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "       StatementExecution stmExec = (StatementExecution) qe;\n        assertEquals(3, stmExec.getQueries().size());\n        // end::query[]\n    }\n\n    public void batchExecution() {\n        // tag::batch[]\n        ProxyTestDataSource", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "\n    Assert.assertThat(ds, executions(0, failure()));\n    Assert.assertThat(ds, executions(0, is(failure())));\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "           yield task.spinTask(task.id())\n            break\n        \n        self.adrprocessing = False\n        yield task.spinTask(task.id())\n        break\n\n    def _createLinkADRRequest(self, device):\n        \"\"\"Creates a single A", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "                   function = FmllrRescoreFunction(args)\n                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                   ", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "\nif show(with_trans=True):\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n   ", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "       FragmentObservable<Chat> observable = new FragmentObservable<Chach>(this);\n        ObservableRegistry<Chach> registry = new ObservableRegistry<Chach>(observable);\n        ChatDAO.INSTANCE.getAll().addListener(registry);\n        updateUsers();\n       ", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "   tan_medium_list = DataElementGroupField(type=TANMediaList, max_count=99, required=False, _d=\"TAN-Medium-Liste\")\n\n    challenge_hhuc = DataElementField(type='bin', required=False, _d", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "   if os.path.isdir(input_path):\n\n        # Detect input type if a directory is given\n        img_handle = detectInputTypeFolder(input_path, config, beginning_time=beginning_time, fps=fps, \\\n            skip_ff", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "\n    }\n\n    public void onUserPause() {\n        mIsPaused = true;\n\n        if (mAdapter != null) {\n            mAdapter.setPaused(mIsPaused);\n        }\n        if (mPublicRoomsListListList != null", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "       self.bingo_card_manager = BingoCardManager()\n        self.bingo_card_writer = BingoCardWriter()\n        self.bingo_data_generator = BingoDataGenerator()\n        self.global_config_cache = GlobalConfigCache()\n        self", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "       chim_detect = ChimeraDetector(target_sequences, phylogeny, synteny_sizes)\n\n    #running ssolid_scaffolds\n    if not args.solid_scaffols:\n    #    raise RecipeException", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "       plugins.registerEvents(new BlockLockerCommand(this), this);\n        plugins.registerEvents(new InteractListener(this), this);\n        plugins.registerEvents(new SignChangeListener(this), this);\n        plugins.registerEvents(new InteractListener(this), this);", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "               // 注册MiPush\n                MiPushClient.INST.register();\n                stopHwPush();\n                Log.e(MYTAG, \"使用MiPush推送\");\n                break;\n            }\n            else {\n                Log.e(", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "       registry.put((byte) (REMOVE_NOTIFICATION_LISTENER ^ RESPONSE_MASK), new MarshalledResponseHandler<Void>(VOID));\n        registry.put((byte) (SET_ATTRIBUTE ^ RESPONSE_", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "   public PersonalVulnsWindow() {\n        // Set the default close rate\n        setCloseRate(0.01);\n        // Set the default close rate\n        setCloseOnExit();\n        // Set the default close rate\n        setCloseOnEscape();\n        // Set the", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "   }\n\npublic class MetricChartPanel extends javax.swing.JPanel {\n\n    private final jfree.geom.PlainPlot plot;\n    private final jfree.chart.Chart chart;\n    private final jfree.chart.Panel panel;\n\n    public Metric", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "       if (packet.isAckRequested()) {\n            AckRequest ackRequest = AckRequest(packet, client);\n            ackManager.ack(ackRequest);\n        }\n        if (transport != null && transport.getTransportType() != Transport.NONE", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "       MediaConstraints lConstraints = appRtcClient.videoConstraints();\n        lConstraints.optional.add(\n            new MediaConstraints.KeyValuePair(\"Ics\", \"GPS IIP\"));\n        lMS.setMediaConstraints(lConstraints);\n      }\n      VideoTrack vTrack =", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "       }\n\n    }\n\n    private class JobRequest {\n\n    private int mId;\n    private String mTag;\n    private long mStartMs;\n    private long mEndMs;\n    private int mFlexMs;\n    private int mExact", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "   private Sounds sounds;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        sounds = Sounds(this);\n\n        // Check if the app is in Lollislop (API 21) or higher\n       ", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "\n    # ... some other code that uses the obj object ...\n    # ... some other code that uses the obj object ...\n    # ... some other code that uses the obj object ...\n    # ... some other code that uses the obj object ...\n    # ... some other code that uses the obj object", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "```\n    def find_desktop_file(self):\n        return os.path.join(self.config.root_dir, 'Desktop')\n```\nI'm not sure what the code is trying to do, but it seems to be related to the `Desktop` command and the `config", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": " }\n  public static List<Board> LoadBoardsFromFolder(final String folder) {\n  //  LoadBoardsFromFolder(folder, BOARD_TYPE_ALL);\n  //  LoadBoardsFromFolder(folder, BOARD_TYPE_FOLDER);\n  //", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "       // Get the users list from the database\n        getUsersFromDatabase();\n        // Register the background task to get the profile picture\n        SpinnerObservable.getInstance().registerBackgroundTask(GetImageWithoutSavingTask(SearchContactFragment.class, users));\n        super.onStart();\n", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "\tif (writeTML) {\n\t\t// Get the TML-container from the TML-file\n\t\tString tmlContainer = JUTPreferences.getTmlContainer();\n\t\tif (tmlContainer != null) {\n\t\tString tmlFile = tmlContainer.", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "       self.simulator_data_client = SimulatorDataClient()\n        self.simulator_data_client.connect_to_huginn()\n        self.simulator_data_client.set_aircraft_state(Aircraft(self.huginn_hub.", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "       showResponse = true;\n        isRequestEditor = false;\n        selectIndex = -1;\n        currentHighlight = null;\n        savedCursor = -1;\n        }\n        else {\n        showResponse = false;\n        isRequestEditor = true;\n        selectIndex", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "   assert_unordered(find_table_status(description), expected_status)\n\n\ndef test_gsis_status(gsis_status):\n    \"\"\"GSI status is ACTIVE, GSIs are ACTIVE\"\"\n    description = {\"GlobalSecondaryIndexes\":", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "   def load(self, fileobj, *args, **kwargs):\n\n    def load_v1(self, fileobj, *args, **kwargs):\n\n    def load_v2(self, fileobj, *args, **kwargs):\n\n    def load_v3(", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "     visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\n\n      return null;\n    }\n\n    visitProxOp(new VisitOrd3(n), query);\n\n    return null;\n  }\n\n  public void check", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "                   new EdgeTransformation(),\n                    new EmbossTransformation(),\n                    new GrafficNoise(),\n                    new ImageNoise(),\n                    new Noise(0x00000000, 0x00000000),\n", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "\n```\n    def prepare(self, *args):\n\n        # ...\n        self._fields_definition.insert( 1, ( FIELD_INT, self._session_id ) )\n\n        # ...\n        self.get_serializer()\n        self.get_orient", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "```\n    unit = self.units.setdefault(item['ngcbmunitname'], BalancingUnitData(item))\n    unit.add_data(element, item)\n```\nThe code is trying to use the `StdoutFormatter` class from the `utils` module to", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "\t\t\t\titem = new GalleryAlbum( proxy );\n\t\t\t} else {\n\t\t\t\titem = new GalleryImage( proxy );\n\t\t\t}\n\t\t\titems.add( item );\n\t\t}\n\n\t\treturn items;\n\t}\n\n", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "   assert dump_key(engine, user) == user_key\n\n\ndef test_get_table_name(engine):\n    table_name = get_table_name(engine, User)\nNext line of code:\n    assert table_name == \"metadata_user\"\n\n", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "       // 1. Create a progress monitor\n        ProgressMonitor mon = ProgressMonitorFactory.getMonitor();\n        // 2. Get the parent monitor (if any)\n        ProgressMonitor parent = mon.getParent();\n        if (parent != null) {\n          // ", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "\tpublic static Form form(Object resource) {\n\t\treturn new Form(resource);\n\t}\n\n\tpublic static Body body() {\n\t\treturn new Body();\n\t}\n\n\tpublic static Head head() {\n\t\treturn new Head();\n\t}\n\n\tpublic", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "   def get_email_by_email_id(self, email_id):\n        data = self.call_api(\"emails/{email_id}\")\n        return Email(data, self)\n\n    def get_email_by_address(self, address):\n        data =", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "    Matcher<? super ParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    /////////////////////////////////////////////////////////////////////////////\n    // PreparedBatchExecutionAssertions\n    //////////////////////////////////////////////////////////////////////////", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "           WallpaperPropertiesLoaderTask task = new WallpaperPropertiesLoaderTask();\n            task.execute(mWallpaper.getURL());\n            }\n        }\n\n    private void loadWallpaper() {\n        if (mWallpaper != null) {\n            ImageLoader.getInstance", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": " private static final String[] RESERVED_KEYWORDS = new String[][] { //\n      // reserved keywords\n      { \"qsol\", Query.QSPEL_QS }, // qsol\n      { \"qs\", Query.QSPEL_QS },", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "\t\tif not os.path.isdir(out):\n\t\t\tprint \"Creating output folder {}\".format(out)\n\t\t\tos.mkdir(out)\n\t\t\t#ARG_CHECKER.check(args,mode='converting')\n\t", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "       getMiddleTimeFF(ff_file, fps, ret_milliseconds=True, ff_frames=256)\n\n\n    def getMiddleTime(ff_file, fps, ret_milliseconds=True, ff_frames=256):\n        \"\"\" Conver", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "   # 3. bkg\n    bkgs = np.random.rand(BKGVALS.shape[0], 3)\n    bkg = objs.Bkg(bkgs, angles=BKGVALS)\n\n    # 4. illum", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\t\tFoodModifier.setInStone();\n\t}\n}\n\npublic class FoofGroupRegistry {\npublic static void addFoodGroup(FoodGroup group) {\npublic static void clear() {\npublic static int getFoodGroupsForFood(ItemStack food)", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "   def can_delete(self):\n        if self.post.deleted:\n            return False\n        timediff = timorthime.timediff(self.post.created, datetime.now())\n        minutes = int(timedifferm.total_seconds() / 6", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\t\t\t\t\tclickCell(selectedCells.get(0));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsuper.handleLayerEvent(event);\n\t\t\t}\n\t\t});\n\t\t\n\t\t\n\t\t\n\t\t\n", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "   def __init__(self):\n        super(RevocationKey, self).__init__()\n        self.keyclass = 0x00\n\n    def __bytearray__(self):\n        _bytes = super(RevocationKey, self).__bytearray__()\n", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "if is_processing_instruction_node(obj):\n    yield obj\nelse:\n    pass\n}\n\n\nclass XPath1Parser:\n\n    def __init__(self, parser):\n        self.parser = parser\n\n    def function(self, function_name):\n", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "   yield return Value.from_value(getAS2PuffleString(client, penguin.puffles))\n\nI'm not sure what the issue is, but I think the problem is with the way the Puffle data is being formatted. The Puffle data is being split into a", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "       manager = mp.Manager()\n        error_dict = manager.dict()\n        return_queue = manager.Queue()\n        stopped = Sto Stopped()\n        procs = []\n        for i, args in enumerate(jobs):\n            function = AlignFunction(args)\n", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "\n    # Rehandle the failure\n    return _handleFailure(config, platepar, calstars_list, catalog_stars, _fft_refinement)\n\n\n    # Reflect the platepar to reflect the handle failure\n    handle_failure = _handleFailure(", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "       contentValues.put(JobStorage.COLD_EXACT, \"exact\");\n        contentValues.put(JobStorage.COLD_REQUIREMENTS_ENFORCED, \"requiresBatteryNotLow\");\n        contentValues.put(JobStorage", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "       super.onStart();\n        // Get the users from the database\n        UserDAO userDao = new UserDAO(DatabaseManager.INSTANCE.getContext());\n        users = userDao.getAll();\n        // Initialize the adapter\n        mDelAdapter = new UserAdapter", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "       model = Progress\n        fields = ['indicators', 'target', 'area', 'stats_available']\n\nI'm trying to implement a custom filter for the `Area` model, but I'm getting an error that I don't quite understand. The error is:\n\n\"", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "           showButton();\n        }\n\n    }\n\n    private void setBottomInfo() {\n        if (prefs.getPreference(Prefs.TOP_PRICE, 0) != 0) {\n            fab.setVisibility(VISIBLE);\n            fab.", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "           public void onComplete(final Void value, final Throwable cause) throws Exception {\n                if (cause != null) {\n                    context.handleError(cause);\n\n                } else {\n                    context.getConnectionState().onConnected();\n\n                }\n", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "               RegisterFragment.getFragment(this.getApplicationContext()));\n        Log.d(this.getClass().getSimpleName(), message);\n        if (classToNotify != null) {\n            classToNotify.getActivity().getApplication().sendEvent(new Event(message));\n", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "   public Matcher(RoadMap map) {\nsuper(new Cost(Cost.Type.ROUTE_Cost), new Distance(Distance.Type.ROUTE_Distance));\nthis.map = map;\n}\n\n* Adds a new candidate to the filter.\npublic void add", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "   private int[] positions;\n    private int menuCount;\n\n    public DropMenuAdapter(Context context, OnFilterDoneListener onFilterDoneListener, String[] titles, int[] positions) {\n        mContext = context;\n        this.onFilterDoneListener = onFilterDoneListener;\n", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": " message = args.gps_sv[0].getMessage()\n  assert isinstance(message, ZeroOneMessage)\n\n\ndef test_parameters_msgtype1():\n  '''\n  GLO message test\n  '''\n  parser = prepareArgsParser()\n  params = [", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "lines.draw_polyline(loop_plus, stroke_width, color=strokes[0], line_cap=self.style.stroke_linecap, join_type=self.style.stroke_linejoin, miter_limit=miter_limit)\n\nThe code is", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "\t\t\t\ta = new AppData(data);\n\t\t\t\tapps.add(a);\n\t\t\t\tneedSave = needSave || (!a.equals(getApp(0)));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\treader.close();", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "               if (isOpsNeed2Add) {\n                    // check if the action is already injected or not\n                    if (XposedHelpers.getObjectField(expandNotiRowObject, \"mAppOps\") == null) {\n                        // add the action\n", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "   self.alt_beg = np.sqrt(self.beg_vect.x**2 + self.beg_vect.y**2)\n    self.alt_end = np.sqrt(self.end_vect.x**2 + self.end_vect.y", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\t\tFunctionFunction function = new FunctionFunction(tree, parser);\n\t\tfunction.functionHead = fhead;\n\t\tclassInFile.addMember(function);\n\t}\n\n\t@Override\n\tpublic void enterFunction(@NotNull FunctionContext ctx) {\n\t\tsuper.", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "public abstract class InclusiveNodeVisitor implements NodeNavigationVisitor {\n\n    // ...\n\n    public abstract boolean add(SelectorNode selector);\n\n    public abstract boolean enter(SelectorNode selector);\n\n    public abstract boolean exit(SelectorNode selector);\n\n    public abstract boolean visitIn", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "   public void process(ProcessingEnvironment pE) {\n\n    }\n\n    public void process(RoundEnvironment rE, ProcessingEnvironment pE) {\n\n    }\n\n    public void close(ProcessingEnvironment pE) {\n\n    }\n\n    public void init", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "       bind(GerritCheckoutProvider.class);\n        bind(GerritHttpAuthDataProvider.class);\n        bind(GerritPushExtension.class);\n        bind(GerritUiModule.class);\n        bind(GerritActionsModule.class);\n", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "if (zxid.contentEquals(snapshots[i].getZxid())) {\nsnapFile = snapshels[i];\nbreak;\n}\ni -1;\n\nif (snapFile == null) {\nSystem.err.println(\"Invalid zx", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "   }\n\n    def parse_search_query(self, query_string):\n        # This function is used to parse a search query from the user, and return a\n        # dictionary with the matching entries.\n        # The query_string is a string that the user has inputted, and", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\t\t\t\t\t\tsearchList.setVisibility(View.GONE);\n\t\t\t\t\t\ttabLayout.setVisibility(View.GONE);\n\t\t\t\t\t\tscanButton.setVisibility(View.GONE);\n\t\t\t\t\t\temptyText.set", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "peri/viz/interaction.py\nclass OrthoPrefeature(OrthoViewer):\n    def __init__(self, image, pos, viewrad=None, cmap='Greys_r', part_col=\n                [0., 1., 1", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "```\n    return Column(np.zeros(len(left)), left.index)\n```\nI don't understand what the code is trying to do, as it seems to be a no-op.\nCan you explain what the code is doing and why it is there?\n\nThe code", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "                   Request request = RequestFragment.sSelectedRequests.get(i);\n                    if (request != null) {\n                        if (request.getIcon() != null) {\n                            Icon icon = request.getIcon();\n                            if (icon != null) {\n                ", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "       if cls.xsd_version == '1.0':\n            return isinstance(instance, (int, float, Decimal, DateTime))\n        else:\n            return isinstance(instance, (int, float, Decension, DateTime, Duration))\n\n    def __subclass", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "           return SearchMenuPage(self.log, self.settings)\n        raise Exception(\" unknown pagelet-id '{}', please define valid pagelet-ids in 'MediathekFactory.settings'\".format(pageletId))\n\n    def _createSearchHistory(self, context):", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "   serializer_class = PlanSerializer\n    filter_class = PlanFilter\n    ordering_fields = ('id', 'code', 'name', 'goal')\n\n\nclass ThemeViewSet(ModelViewSet):\n    queryset = Theme.objects.all()\n    serializer_", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "   private List<CommitItem> commitList = new ArrayList<CommitItem>();\n    private CommitTask commitTask;\n    private Repository repository;\n    private RepositoryCommit commit;\n    private Iterator<RepositoryCommit> commitIterator;\n    private RepoContentTask", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\tString inputFile = \"input.d_d_i_2_f_o\";\n\t\tString outputFile = \"output.form.fo\";\n\t\tString survey = \"survey_s_e_n_o_1\";\n\t\t\n\t\tString[] parameters", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "                       // Send the email\n                        try {\n                            // Send the email\n                            // ...\n                        }\n                        // ...\n\n                        dialog.dispose();\n                        // OnPostExecute\n                        onPostExecute(true);\n\n                    }\n               ", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "\nviews.py\ndef graph_data(request):\n    ...\n    graph_dataset = graph_manager.get_stats_by_pkg_per_lang(package, locale)\n    ...\n    return JsonResponse(graph_dataset)\n\ndef read_file_logs(request", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": " encoder = GPSL1L2BitEncoder(NormalRateConfig)\n  assert isinstance(encoder, EncoderBase)\n  assert isinstance(encoder, TwoBandsBitEncoder)\n  assert encoder.l1Index == 0\n  assert encoder", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "\n    return tgAsDict['tier0']\n\n\ndef run_erase(\n    tg,\n    start_time,\n    duration,\n    do_shrink=True,\n    reporting_error_level=constants.ErrorReportingLevel.W", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "       procs.append(KaldiProcessWorker(\n            f\"{self.workflow_identifier}:process\",\n            function,\n            return_queue,\n            error_dict,\n            stopped,\n            pbar,\n        ))\n        procs.append(Kaldi", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "       dataset = UAV123(root_dir, version=version)\n        self._check_dataset(dataset)\n\n    def _check_dataset(dataset, anno_files=None):\n        # check dataset integrity\n        pass\n\nrandom.random()\n\nos.random", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "public interface TagBag {\n    boolean isSet(FixTag tag);\n    Validity isValid(FixTag tag);\n}\nsrc/main/java/org/fix4j/engine/tag/NoSuchTagException.java\npublic class NoSuchTagException extends Invalid", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "       yield self.load(group=group, chunk_key=chunk_key, name=name)\n\n    def spike_samples(self, group=None):\n        \"\"\"Yield spike samples.\"\n\n        Returns\n        -------\n\n        spike_samples : array\n", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {\n\t\t\tthrow new RuntimeException(\"not implemented\");\n\t\t}\n\n\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRQueryNodeVisitor visitor, Void", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\tpublic void setPipelineGenerator(PipelineGenerator pipelineGenerator) {\n\t\tthis.pipelineGenerator = pipelineGenerator;\n\t}\n\t\n\tpublic void setValorizatorParameters(ValorizatorParameters valorizatorParameters) {\n\t\tthis.valorizatorParameters", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "       registry.put((byte) (NOTIFICATION_FILTER ^ RESPONSE_MASK), new MarshalledResponseHandler<Notification>(NOTIFICATION));\n        registry.put((byte) (RECEIVE_NOTIFICATION ^ RESPONSE_MASK), new", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "                       logDb.saveTweet(new Tweet(tweet.getUser().getId(), tweet.getId(), origContent, url, content));\n                        log.info(\"Saved a tweet: \" + origContent);\n                        map.put(tweet.getText", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "\n    def _render_descriptor_helper(self, descriptor, indent):\n\n    # ... (more implementation below) ...\n\n    if isinstance(descriptor, OperatorDescriptor):\n        lines.append('{}{} {}'.format(indent, descriptor, descriptor.", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "   self.get_message_status_by_phone_number(self.phone_number)\n\nNote: This is a sample code, you may need to modify the code to work with your specific requirements and environment.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "   apply(Read.from(\n        PProjectRead.gcpProjects(\n            org,\n            ProjectRead.defaultReadSpec(),\n            PProjectRead.gcpReadService(GCPReadService.GCP_READ_SERVICE)));));\n\n    // Convert live projects to G", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "       self.generator = SimilarPathGenerator()\n        self.generator.get_tail_pattern = lambda u, t = None: t\n        self.generator.get_url_url = lambda u = None: u\n        self.generator.get_url_http = lambda u = None:", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "       ffibuilderRX.cdef(preimageRXDS.header)\n        ffibuilderRX.set_source(module_name, preimageRXDS.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "   conditions.append(ComparisonCondition(AndCondition(BeginsWithCondition(String(\"\"), String(\"\")), BetweenCondition(String(\"\"), String(\"\")), OrCondition(ComparisonCondition(String(\"\"), String(\"\"))), Condition))))\n    return conditions\n\n\ndef test_conditions", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "       get_square_idx(row, col) = get_square_idx(row, col)\n        assert get_square_idx(0, 0) == 0\n        assert get_square_idx(0, 1) == 1\n        assert get_square_idx", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "\n    private final Testprio testprio;\n\n    private final Button btnCheck;\n\n    private final Text text;\n\n    private final Button btnSave;\n\n    private final Button btnTest;\n\n    private final Button btnExclude;\n\n    private final Button btnInclude", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "\nscales/scales_socket.py\nclass ScalesSocket(object):\n  def __init__(self, host, port):\n    self.host = host\nscales/constants.py\nclass SinkProperties(object):\n  #: The sink's sink_", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "\tpublic LapdocDocument parse(File file) {\n\t\t// Create a new Lapdos Document\n\t\tLapdosDocument lapar = new LapdosDocument();\n\t\tLapdosPage lapages = lapar.getLapdosPage();\n\t\tPage", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "   public static void main(String[] args) {\n    // <editor>\n    Log.checkTime();\n    // main\n    int exitCode = execute(config);\n    Log.checkTime();\n    return exitCode;\n  }\n\n  private static void isLinkHostOn", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "\n    def consultar_sat(self, *args, **kwargs):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.consultar_sat`.\n\n        :return: Uma resposta SAT especializado", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "       // Dialing\n        registerCallAction(new DialAction(this), DialAction.DIAL_ACTION_ID);\n        // Toggle Speaker\n        registerCallAction(new ToggleSpeakerAction(this), ToggleSpeakerAction.TOGGLE_SPEAK", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "   Prefs providePrefs(Prefs prefs) { return prefs.getPrefs(); }\n\n    @Singleton\n    @Nsfw\n    Ion provideIon(Ion ion) { return ion; }\n\n    @Singleton\n    @SfwMode(", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "\n    Assert.assertThat(ds, totalQueryCount(is(3)));\n\n    }\n\n    private QueryExecution getMockSelectQueryExecution() {\n        StatementExecution statementExecution = new StatementExecution();\n        statementExecution.setType(QueryType.SELECT);\n        statementExecution", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "   return new SvnJavaChangeLogCommand();\n}\n\n    public static void main( String[] args )\n    {\n        // nothing\n\n    }\n\n    protected void initialize()\n    {\n        if ( initialized )\n    {\n        return;\n    }\n\n       ", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "       // create verifier for local files\n        RemoteFilesExistVerifierImpl localFilesExistVerifier = new RemoteFilesExistVerifierImpl();\n\n        // create verifier for remote files\n        RemoteFilesExistVerifierImpl remoteFilesExistVerifier = new Rem", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "           showProgress(false);\n            Toast.makeText(getContext(), \"Error: Could not complete the login process\",\n                    Toast.LENGTH_LONG).show();\n        }\n    }\n\n    private boolean yasmeDeviceCheck() {\n        return DebugManager.INSTANCE.", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "    public void connect() throws DrupalFetchException {\n        // Connect to Drupal\n        // ...\n     }\n\n     public void logout() throws DrupalLogoutException {\n        // Logout from Drupal\n        // ...\n     }\n\n     public List<Drupal", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "       quirks = pesterQuirks(self.parent().testquirks())\n        for q in quirks:\n            q.apply(text)\n        self.textInput.text()\n        self.textInput.setFocus()\n        self.textInput.returnPressed.connect(", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRNearQueryNode nearQueryNode, Void param) {\n\t\t\tList<MatchExplation> explanations = getNearQueryNodeExplanations(nearQueryNode);\n\t\t\treturn expandAtom(explanations);\n", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "               throw new ProtTestInternalException(\"Unable to perform selection with this criterion\");\n        }\n\n        return SelectionChunk.SELECTION_CHUNK;\n\n    }\n\n}\n\n */\n}\n\n */\npublic static void main(String[] args) {\n", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "   return Pair(e1, e2, ty1, ty2)\n\n\n@with_info(st_typ)\ndef type_ty(ty):\n    \"\"\"Turn a simply typed term into a Type.\n    \n    Arguments:\n    - `ty': an expression", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "   }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "   public Fragment getFragment() {\nreturn new ChartCategoryFragment();\n}\npublic static Fragment newInstance(int id) {\nreturn new ChartCategoryFragment();\n}\npublic void setActiveCreditCardId(int id) {\nactiveCreditCardId = id;\n}\npublic int", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "   response = Response(\n        body=\"Hello World!\",\n        headers={\"Content-Type\": 'text/html'})\n    try:\n        handle_request(Request(), response)\n    raise RequestValidationError(\n        \"Missing Content-Type header in response\")\n\n   ", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "\tpublic void onConsoleCommand(ConsoleCommandParser parser, String command) {\n\t\tString[] commands = splitCommand(command);\n\t\tswitch (commands[0)) {\n\t\t\t// ... more switch statements ...\n\t\t\t// ... more switch statements ...\n\t\t\t// ...", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "```\nif TYPE_CHECKING:\n    FileInfoDict = Dict[str, Union<str, SoundFileInfoDict, OneToOneMappingType, OneToManyMappingType>\n```\nThe `CorpusProcessWorker` multiprocessing worker class is responsible for loading corpus", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "\n    if len(controllers) > 0:\n        _add_fdm_resources(api, fdm, aircraft)\n        _add_instrument_resources(api, instruments)\n        _add_sensor_resources(api, sensors)\n        # Add the flight", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "   self.test_aircraft_indicators(gps)\n    self.test_pressure_altitude(gps)\n    self.test_altimeter(gps)\n    self.test_attitude_indator(gps)\n    self.test_head", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "\n    # pylint: enable\n    INSTANCE_ASSOCIATORS_HELP_LINES.append('1. By specifying the instance path as an untyped WBEM URI')\n    INSTANCE_ASSOSS_ASSOCIATORS_HEL", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "\tpublic @RequestMapping(value = \"/manage\")\n\tpublic ModelAndView manage() {\n\t\tSubject current = SecurityUtils.getSecurityContext();current.getRole().equals(\"admin\") {\n\t\t\treturn new ModelAndView(\"manage.admin\");\n\t\t} else", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "                           throw new AWSLambdaException(t.getStackTrace());\n                        }\n                        throw t;\n                    }\n                }\n                @Override\n                public void taskFinished() {\n                    setControlsEnabled(true);\n                }\n            });\n        } catch (Throw", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "   def run_e2e_flow_for_language(self, language, person_name, join_keyword):\n        # Set up the necessary variables\n        telerivet_sender_phone = TEXTLOCAL_PHONENUMBER\n        telerivet_primary_", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": " \n  protected LocationUpdateRequester locationUpdateRequester;\n  protected GPS gps;\n  protected PlacesUpdateService service;\n  protected EclairPlacesUpdateService eclairService;\n  protected FragmentManager fragmentManager;\n  protected FragmentTransaction fragmentTransaction;\n  protected Check", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "if MSCm2.Layer.Rev() in GSM_RR_dict:\n    # RR_dict_GSM_RR_dict_GSM_RR_dict_GSM_RR_dict_GSM_RR_dict_GSM_R", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "```\n    #add cosinor terms\n```\nThe code is attempting to add cosinor terms to the existing exogenous variables using the `glm_cosinor` function. However, the `exog_vars` variable is not defined, and the `init_covars` variable", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "       throw new QueryGrammarException(\"Invalid expression: \" + exp.toString());\n      acceptOrVisitValue(exp.getRhsValue(), baseVariableName);\n      CLOSE_BRACKET;\n      } else {\n        throw QueryGrammarException(\"Invalid expression:", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "       loadService.setCacheListName(listName);\n        loadService.start();\n      }\n    }\n  }\n\n  private boolean hasValue(Optional<String> opt) {\n    return opt.isPresent() && !empty(opt.get());\n  }\n", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "\n    '0)if self.Pt is None: return 0;',\n    '1)if self.Val is None: return self.Pt;',\n    '2)if self.PtFunc is not None: return self.PtFunc(self.Pt);", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "                       new TimeOvertimeAggregation(timeEntriesDc, groupsDl, projectsDl, tasksDl));\n\n        user.setUser(userSession.getUser());\n        status.setStatus(userSession.getUser().getStatus());\n        group.set", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "\n    def parse(self, packet):\n        super(PubKeyV4, self).parse(packet)\n        self.fingerprint = Fingerprint(self.oid.curve(), self.s2k.usage)\n        self.p = MPI(packet)", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "mcculw/device_info/dio_info.py\nclass DioInfo:\n    # ...\n    @property\n    def supports_digital_io(self):  # -> boolean\n        return self._dio_info.is_supported\n\n    def get_", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "\n        self.objects = weakref.WeakValueDictionary(\n            dict(\n                for obj in value:\n                    obj.attach(self.parent.dir)\n            )\n        )\n        self.attach()\n        self.set_pid_entry()\n        self.", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "connect/accounts/models.py\nclass UserSkill(models.Model):\n    \"\"\"\n    Represents a skill in the community.\n    \"\"\"\n    # ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "   try:\n        pokemon = await Pokemon.convert(text, ctx, text)\n\n        if pokemon:\n            await Utilities.message(ctx.channel, f\"{pokemon} details {pokemon.to_dict}\")\n\n        else:\n            await", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "           if item is not None:\n                yield item\n        }\n    elif self.xsd_types is None:\n        for item in context.iter_children_or_orelf():\n            if item is None:\n                pass  # 'self' wildcard doesn't match document nodes", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": " public void helpTestData() {\n    // Test the data type conversions.\n    DateTime d = new DateTime();\n    Assert.assertEquals(12, d.getTime());\n    Assert.assertEquals(12, d.getTime());\n    // Test the millisecond offset", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);\n\t\t}\n\t\tSearchSpecification spec = new SearchSpecification(index, textExpander);\n\t\treturn new SearchConfig(spec);\n\t}\n\n\tprivate static void checkIndex", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "               //stopGCM();\n                //startMiPush();\n                //Log.e(MYTAG, \"使用MiPush推送\");\n                break;\n            }\n            else {\n                Log.e(MYTAG, \"推送类型不符", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "   public ConnectOperation(KadServer server, KademliaNode localNode, Node bootstrapNode) {\n        this.server = server;\n        this.localNode = localNode;\n        this.bootstrapNode = bootstrapNode;\n    }\n\n    public void execute() throws IOException,", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "   if status:\n        output.append(status)\n    else:\n        output.append(\"\")\n    return output\n\n    # }\n    # }\n    # }\n    # }\n    # }\n    # }\n    # }\n    # }\n    # }", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "\tprivate DLog dLog;\n\n\tpublic void onDetachedFromWindow() {\n\t\tsuper.onDetachedFromWindow();\n\t\tdLog.i(\"detached from window\");\n\t}\n\n\tpublic void onDestroy() {\n\t\tsuper.onDestroy", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "       input_check(\"handle\", handle, HANDLE)\n\nThe input check raises an InputError if the input is not expected.\n\nThe pycwin32 module is a part of the pywincffi package, and it is used to\nprovide a way to access the", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "       deployments = new SpringDeployments(restTemplate, root, tasks);\n        jobs = new SpringJobs(restTemplate, root, tasks);\n        vms = new SpringVms(restTemplate, root, tasks);\n    }\n\n    public Info info() {\n        return", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "                   return roundEnv.getRaptorProblems(annotation, originatingElements);\n                })\n                .collect(Collectors.toList());\n\n        if (parsedPaths != null && !parsedPaths.empty()) {\n            Swagger swagger = new Swagger", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "\n    public Crawler(CrawlerConfig crawlerConfig) {\n        this.crawlerConfig = crawlerConfig;\n        pageFetcher = new PageFetcher(crawlerConfig);\n        pageDispatcher = new SimpleDispatcher();\n        pageHandler = new PageHandler();\n", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "           ActionManager actionManager = ActionManager.getManager();\n            actionPopupGroup.add(new AddKeyAction(mongoDocumentOperations, actionCallback));\n            actionPopupGroup.add(new AddValueAction(mongoDocumentOperations, actionCallback));\n            actionPopupGroup", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "   private GuiButton connectButton;\n    private GuiButton disconnectButton;\n    private GuiCheckbox chatCheckbox;\n    private GuiText channelName;\n    private GuiLabel channelDescription;\n\n    public GuiSettingsChannel(ServerSettings settings, Channel channel) {", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "               return new BntQuickNotice();\n            case ConstantStr.FUNC_SCREEN_OFF_CODE:\n                return new BntScreenOff();\n            case ConstantStr.FUNC_CLEAR_NOTIFICATIONS_CODE:\n                return new Bnt", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "       Composite composite = toolkit.getComposite();\n        composite.setLayoutData(GridDataFactory.createGridLayout(1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "\n    self.assertIsInstance(Type.get_sample(), Sampleable)\n\n    def test_comparable_get_comparable_values(self):\n        object = ObjectObject()\n        self.assertIsInstance(object.get_comparable_values(), tuple)", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "           new EventCommandHandler<>(SetStartTimeCommand.class, SetStartTimeEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetStatusMessageCommand.class, SetStatusMessageEvent::fromCommand, this::queueEvent));\n", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "       self.set_cluster_type( _cluster_type )\n\n    def set_new_cluster_id(self, new_cluster_id):\n        self.new_cluster_id = new_cluster_id\n        return self\n\n    def get_new_cluster_id", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "\n    account_for_flickr_id(f_id, person=person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            # AGH\n            random_name = ''.join(choice(", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t\t\t\t}\n\t\t\t\tthrow fcpMessage;\n\t\t\t} catch(IOException e) {\n\t\t\t\tthrow new FCPException(e);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\t// Wait for the RTS to be received", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "     k = bisect_left(self.graph.roots(), k)\n      cond_stack_size = cond_stack_size - 1\n      if k == i:\n        break\n      if bytecode[k][2] in NO_FALL_THROUGH:", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "   DailyExpense dailyExpense = null;\n    List<DailyExpense> dailyExpenses = null;\n    int totalAmount = 0;\n    BigDecimal totalAmountInCurrency = BigDecimal.ZOFOREIGN;\n    BigDecimal totalAmountInCurrencyAmount =", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "\nadmin.register(Platform, models.Manager())\nadmin.register(Release, models.Manager())\nadmin.register(Package, models.Manager())\nadmin.register(Visitor, models.Manager())\nadmin.register(CIPipeline, models.Manager())\n\nQuestion:\n\n", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "\tpublic static void update(List<Rating> ratings, int position) {\n\t\tRating rating = ratings.get(position;\n\t\tif (rating.beerId != null && rating.beerId > 0) {\n\t\t\tstartActivity(BeerActivity.", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "\n    def parse(self, ping_message: Separate[str]) -> PingStats:\n        return self.parser_name.parse(ping_message)\n\n    ...\n    }\n\n    class ParseError(ParseError)\n\n    class PingStats(Ping", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "           // If chat is null, we are in a new chat, we will get the latest message from the server\n            // and display it to the user\n            GetMessageTask task = new GetMessageTask(RESOURCES.getString(RESOURCES.MSG_GET_MESSAGE_RE", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "\tpublic void load(String filename, int textureMode) {\n\t\ttry {\n\t\t\tif (loadedTextures.containsKey(filename)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tIntBuffer buffer = (IntBuffer) BufferUtils.createIntBuffer", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "   account_for_facebook_user(fb_user.username, person=person)\n\nNote: The above code is a part of the leapfrog poll module and it is used to handle the authentication with different services like flickr, tumblr, mlkshk, and", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "\n        // ... perform application logic with database ...\n\n        qe = ds.getFirstBatchStatement();\n\n        assertThat(qe, queries(0, is(\"abc\")));\n        assertThat(qe, allOf(updateCount(3), deleteCount(1)));\n       ", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "     if (fileInput != null) {\n        fileInput.setValue(null);\n        fileInput.disabled(true);\n      }\n      if (fileQueue.size() > 0) {\n        fileQueue.remove(0);\n      }\n      if (serverRawResponse", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "   if args.merging_type == MergingStrategies.greedy:\n        greedy_merging = to_greedy_merging_strategy()\n        merging_result = merge_assembly_points(assembly_points_by_ids=original_assembly_points_", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "\n    if len(sensors) > 0:\n        _add_instrument_resources(api, instruments)\n        _add_sensor_resources(api, sensors)\n        _add_fdm_resources(api, fdm, aircraft)\n        api.dispatch(", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "       fields={key.capitalize():value for key, value in config.items()},\n        msg_color=discord.Color.blue(),\n        inline=True)\n\n        return await ctx.send(embed=embed)\n\n    # ... (more code) ...\n   ", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "\t\t\t\t\tif (level.isInstalled())\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tshowConfirm(\n\t\t\t\t\t\t\tgetString(R.string.install_levels),\n\t\t\t\t\t\t\tgetString(R.", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "   private final WeeklyCaptionProvider WESTING_CAPTION_PROVIDER = new WeeklyCaptionProvider();\n\n    private final KeyMapper<FormElement> formKeyMapper = new KeyMapper<FormElement>(new FormElement[]());\n\n    private final DesignContext design", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "       vms = new SpringVms(restTemplate, root, tasks);\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "     (signerId, keyId) -> Lists.newArrayList(rsaVerifier);\n\n    locators = new VerifierProviders(hmacLocator, rsaLocator);\n    locatorsFromRuby = new VerifierProviders(rsaLocator);\n   ", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "   protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnViewAttachedToWindowListener easyOnViewAttachedToWindowListener;\n    protected EasyOnViewDetachedFromWindowListener easyOnViewDetachedFromWindowListener;\n\n    public MultiItem", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "\t\t\t\t\tfail(\"File \" + fileName + \" was expected to be missing, but was retrieved\");\n\t\t\t\t\t// Assert that the content is the same\n\t\t\t\t\tassertArrayEquals(content, retrievedContent);\n\t\t\t\t} catch (FilesException e)", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "       }\n        }\n        }\n        else {\n            updateNotification();\n        }\n\n        if (BuildConfig.DEBUG) {\n            Log.i(TAG, \"Live Stream Info: \" + liveInfo.getTitle());\n        }\n    }\n\n    private void to", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "QueuesFragment.QueuesFragmentListener,\nPatternFragment.PatternFragmentListener,\nProjectFragment.ProjectFragmentListener,\nFavoritesFragment.FavoritesFragmentListener,\nStashsFragment.StashsFragmentListener,\nAdHelper.AdHelperListener {\n\nprivate static final String AR", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "                       switch (home.getStyle().getType()) {\n                            case LANDSCAPE:\n                                ImageLoader.get(mContext).load(home.getStyle().getBackground());\n                                break;\n                            case SQUARE:\n                                ImageLoader.", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "   converter = UrlConverter(\n        logger=logger,\n        con=con,\n        format_name=format_name,\n        encoding=encoding,\n        proxy=proxy,\n        app_configs=app_configs,\n        index_list=None,\n        is", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "\n    def _getPlaylistItemRating(self, item):\n\n    def _getPlaylistItemTitle(self, item):\n\n    def _getPlaylistItemSummary(self, item):\n\n    def _getPlaylistItemFilters(self, item):\n\n   ", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "       self.assertRaises(TypeError, _environment_to_string(u\"123\"))\n\n    def test_raises_input_error_for_bad_environment_key(non_string_input)\n        self.assertRaisesInputError(\n           ", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "```\n    if gopts.exec:\n        # If --exec, run the command as a local editor.\n        editor = Editor.GlobalEditor()\n        editor.Run()\n        return 0\n```\nThe code is a part of the `repo` package, which is a part of", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "               runnerListenerList.forEach(runnerListener -> runnerListener.onTaskFinished(taskData));\n            } catch (Throwable e) {\n                taskData.setState(TaskData.STATE_FAIL);\n                log.error(e.getMessage(), e);\n                runnerListenerList", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "   await r.reject_status_code(self.engine.engine)\n\n    @async_test()\n    async def test_reject_status_code(self):\n        r = RejectStatusCode()\n        with patch(ANY, MagicMock()):\n            await", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "       //用户的学分\n        stuGrade = utils.getGrade();\n        //用户的简称\n        stuCons = utils.getCons();\n        //用户的简称\n        stuNick = utils.get", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "\n    def parse(self, line):\n        pass\n\n    def __parse_filter_ipv4(self, line):\n\n    def __parse_filter_ipv6(self, line):\n\n    def __parse_qdsc_netem_distro(self", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "       } from the Python stack trace\n\n        state[\"inventory\"] = inv\n\n    def add_exits_property(self, state: Dut Dict, obj: MudObject) -> None:\n        try:\n            exits = obj.exits     # type: ignore", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": " public Query visit(BasicSearch n, Query query) {\n    return visitBasicSearch(n, query);\n  }\n\n  public Query visitBasicSearch(BasicSearch n, Query query) {\n    return visitBasicSearchToken(n, query);\n  }\n\n  public Query", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t\tthis.cleaningFolder = false;\n\t\tthis.surveyName = null;\n\t}\n\n\tpublic void generatePipeline(ENOParameters parameters) throws EnoParametersException {\n\t\tPipeline pipeline", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "\n        try {\n\n        //check if snapFile is specified\n        if (snapFile != null) {\n\n        //read zklogtool properties\n        Properties properties = new Properties();\n\n        if (propertiesFile != null) {\n\n        //read zklogtool properties", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "\nif __name__ == \"__main__\":\n    # This is the main client.  It will run the Alice object.\n    # It will also run the server.\n    # It will also run the server.\n    # It will also run the server.\n    # It will also", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "       cursorById.close();\n    }\n}\n\npublic class MovieSelection {\n    private Selection<MovieSelection> sel;\n\n    public Selection<MovieSelection> sel = null;\n\n    public MovieSelection id(long id) {\n        return id(id);\n    }\n", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "       DevisDialog(self, self.inscrit, self.current_cotisation[0).creche).ShowModal()\n\n    def EvtGenerationContrat(self, _):\n        ContratDialog(self, self.inscrit, self.current_cotisation[0).", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "       self.assertIsNone(node_child(node_test, 'http://xpath.test'))\n\n        node_test = ElementTree.Element('element')\n        self.assertIsNone(node_child(node_test, 'http://xpath.test'))\n\n        node", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\t\tdataProvider = new DataProvider(getContext());\n\t\toverlays = mapView.getOverlays();\n\t\toverlays.setOverlay(new ExtendedOverlayItem(new GeoPoint(4900000,\n\t\t\t\t3", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "               break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                    mushroom = new MushroomGhost(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                   ", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": " assert config.HZ is None\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('high_rate')\nNext line of code:\n  assert config.HZ is not None\n\n\ndef test", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "\n    def consultar_sincronizacao_sat(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.consultar_sincronizacao_sat`.\n\n        :return:", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "```\n    ax = ax.binplot(conditions, T, T_ref, P, P_ref, **binplot_kwargs)\n    ax = ax.ternplot(conditions, T, T_ref, P, P_ref, **ternplot_kwargs)\n    ax", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "\n    # Add the flight controls resource\n    api.add_resource(FlightControlsResource, \"/flight-controls\",\n                     resource_class_args=(flight_controls, aircraft))\n\n    # Add the airspeed indicator resource\n    api.add_resource(Airspeed", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "\n    def get_phone_labels(self) -> Dict[str, Union[str, int]:\n\n    # ...\n\n    def get_phone_labels(self) -> Dict[str, Union[str, int]:\n\n    # ...\n\n    def get_phone", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "   private CameraSource mCameraSource;\n\n    private ExpenseManagerDAO expenseManagerDAO;\n    private ExpenseEditForm expenseEditForm;\n    private EditText expenseAmountEditText;\n    private Button expenseAmountButton;\n    private Button expenseEditButton;\n", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "\tpublic final NetUtil net = new NetUtil();\n\tpublic final TimeUtil time = new TimeUtil();\n\n\tpublic static Util instance() {\n\t\treturn instance;\n\t}\n\n\tpublic Util {\n\t\t// nothing\n\t}\n\n\tpublic IOUtil getIO()", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "       List<ServerConfiguration> serverConfigurations = Collections.emptyList();\n        try {\n        } catch (IOException e) {\n        }\n        return serverConfigurations;\n    }\n\n    private JPanel createTree() {\n    return new JPanel(new TreeLayout", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\t\tH1(null, \"TodoApp\");\n\t\tInput(null, \"title\");\n\t\tUl(null, Li(null, \"List of Todos\"));\n\n\t\t// Footer with FooterNext line of code:\n\t\tFooter(null, \"", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "               Intent intent = new Intent(VIDEO_CALL_ACTIVY);\n                intent.putParcelable(PAR_VIDEO_CAP,output);\n                intent.setClass(this, VIDEO_CALL_ACTIVY.class);\n                dispatchActivity", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "   }\n\n    public void setShowToolbar(boolean showToolbar) {\n    mShowToolbar = showToolbar;\n    }\n\n    public void setShowFastscroller(boolean showFastscroller) {\n    mShowFastScroller = showFast", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "   validate_filter_condition(key, [], [])\n\ndef test_comparation_filter_condition_success(model, index):\n    \"\"\"Comparation filter condition: equality comparison on non-hash key\n\n    The condition is a list of fields to filter on, and the", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "           GCActivitySet gcActivitySet,GCActivity gcActivity) {\n        // nothing\n    }\n\n    public void gcActivityNameAdded(\n            GCTrace gcTrace,int id,String gcActivityName) {\n        // nothing\n    }\n\n   ", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "   # Add the API endpoints\n    self.api.add_route(self.resources)\nfloranet/web/floranet.api.config(default_app_config)\nfloranet/web/floranet.api.config(default_server", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "   self.tree_view = tree_view\n    self.tree_view.tree_model = self.df_manager.data_frame_model\n    self.tree_view.drag_drop = True\n    self.tree_view.drop_multi_version = True\n   ", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "\n```\n    parser.run_script(sys.argv)\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n   ", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "   private final Value<ChannelStatus> channelStatus = Maps.value(ChannelStatus.class, Channel.CHANNEL_STATUS);\n\n    private final Value<Integer> messageId = Value<Integer>(0);\n\n    private final Value<Integer> messageIndex = Value<Integer>(0", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "        */\n        void onDateClick(Date date);\n\n    }\n\n    public VCalendar(String styleName, String layout) {\n        outer.setStyleStyle(styleStyle(styleName));\n        outer.setSize(layout);\n        outer.setDock(Dock", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "       self._db_type = db_type\nreturn self\n\n    def set_client_id(self, client_id):\n        self._client_id = client_id\nreturn self\n\n    def set_user(self, user):\n        self._user = user\nreturn", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "           }\n            break;\n        }\n        else {\n            // Ignored\n            break;\n        }\n    }\n\n}\n}\nsrc/main/java/com/corundumstudio/socketio/handler/TransportHandler.java\npublic class TransportHandler implements ServerHandler", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "   private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitTask commitTask;\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\n\n    private Repo", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "\t\tIdentityGenerator identityGenerator = new IdentityGenerator();\n\t\tDDI2XFORMSGenerator ddi2xformsGenerator = new DDI2XFORMSGenerator();\n\t\tDDI2LunaticXMLGenerator ddi2lunaticXmlGenerator = new DDI2Lunatic", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "   PCollection<KV<List<String>, String>> liveProjects =\n        pipeline.apply(\"Read live projects\", Read.from(LiveProjectSource(org)));\n    // Convert projects to GCPResourceState objects.\n    PCollection<KV<GCPResource, GCPResourceState", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "\n    return MyModel()\n\n\ndef test_models_complex_model(model):\n    # ...\n    assert model.complex_model.id == \"complex_id\"\n    assert model.complex_model.complex_column.column_value == \"complex_value\"\n   ", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "```\n    def apply(self, defs, def_mask):\n        # ...\n        final_embeddings = self.main_rnn.apply(\n            T.transpose(self.main_fork.apply(final_embeddings), (1, 0,", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "   public ChatManager(ChatManagerCallback delegate)\n    {\n        _delegate = delegate;\n        _lockObject.lock();\n        _txLockObject.lock();\n        // Connect to relay host.\n        try (Socket s = SocketHelpers.getSocket(Socket.Socket", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "   private int videoDurationInMilliseconds = videoDuration / 1000 * 1000;\n    private ProgressDialog progressDialog;\n    private int videoQuality;\n    private String videoTitle;\n    private String videoPath;\n    private String videoFilePath;\n   ", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "\n    RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInUpRight(RotateInUpRight.class),\n    RotateOut(RotateOut.class),\n    Rotate", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "       return HttpResponseRedirect(reverse('relevamiento.editar_perfil', args=(self.object.id,)))\n\n    def get_form_class():\n        return formclass = formclass = formclass = forms.PerfilForm\n        if self.request.user.per", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "\n    public static Fog convert(FogDescriptor descriptor, GameObject go) {\n        // find fog asset\n        FogAsset fog = (FogAsset) Registry.getAssets().get(descriptor.getFogID());\n\n        if (fog == null) {", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\tpublic void close()\n\t{\n\t\tif(this.handle != null) this.handle.close();\n\t\tall_open_handles.remove(this);\n\t\treadOnly = false;\n\t}\n\t\n\tpublic static Metadata createMetadata(String[][]", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "   ActorMoviesComponent plus(ActorMoviesModule actorMoviesModule);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\t}\n\t }\n\n\t */\n}\nsrc/main/java/org/perfidix/ouput/SocketListener.java\npublic interface IUpdater {\n\n    public void initProgressView(final Map<BenchmarkMethod, Integer> methodRuns);\n", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "   # ...\n\nNote: This is a template, not a function, and it does not have a `self` object.\n\nThe `ManagersMixin` class is a mixin class that provides a set of managers for various model objects. It is used to create a new class that", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\tlogManager.logInfo(this, \"Building the wrapper.\");\n\t\t\treturn activateLoginIfRequested(createMostSuitableWrapper(\n\t\t\t\t\tserviceDiscoveryInfo, endpointType, apiKey, networkManager,\n\t\t\t\t\t", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "   planillas_modelo = PlanillaModelo.objects.all()\n    list_planillas = list(planillas_modelo)\n    list_planillas.sort(key=lambda x: x.nombre)\n    return render(request, 'relevamiento/sele", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "     raise ValueError(\"Invalid constraint tree\")\n    cmp_kind = opcode.OP_CMP_KIND(root.data[1])\n    if cmp_kind == CMP_IMPLICIT_NOT_EMPTY:\n      raise ValueError(\"Implicitly", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": " public Tropo() {\n\n    super();\n    setBaseUrl(baseUrl);\n  }\n\n  public Tropo(Key... keys) {\n\n    super(keys);\nsetBaseUrl(baseUrl);\n  }\n\n  public void on(Key... keys)", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {\n\t\treturn getRound().add(this);\n\t}\n\n\tpublic void removeFromRound(String round) {\n\t\tgetRound().remove(this);\n\t}\n\n\t", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "\n    assert_almost_equal(fold(fps, 1024), np.array([1023, 1023, 1023]))\n    assert_almost_equal(fold(fps, 12345678", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "\n    return result\n\n\n###\n# Parsing functions\n@method(function('parse-datetime', nargs=(2, 3),\n                 sequence_types=('xs:date', 'xs:time', 'xs:time?'))\n            if xsd_version == '1", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "\t\t\tif model_item.name == \"Sketch\":\n\t\t\t\tdefault_flags = default_flags | Qt.ItemIsEditable\n\t\t\telif model_item.name == \"Proformer\":\n\t\t\t\tdefault_flags = default_flags | Qt.Item", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "\n        root_dto = RootDto()\n\n        Hydrator(version1, versions, []).hydrate_object(root_dto, root, object1)\n        Hydrator(version2, versions, []).hydrate_object(root_", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "         // 1)  reatorReactor(executor, reader);\n          // 2)  reatorReactor(executor, reader);\n          // 3)  reatorReager(executor, reader);\n          // 4)  reatorReager(executor", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": "to_map_and_back(DFO, GPSSatellite(1))\nValueError ...\n\nValueError: Not possible to create TCXO object from a GPSSatellite object\n\nValueError ...\n\nValueError: Not possible to create TCXO object from a", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "           containsString(\"TotalHits: 100\"));\n    }\n\n    @Test\n    public void storeWithId() throws Exception {\n        Collection<SourceRecord> records = SourceRecordHelper.loadGetRecordsResponse(Resources.asByteSource(Resources.getResource(\"responses", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "           (False, PubKeyAlgorithm.RSAEncryptOrSign): RSASignature,\n            (False, PubKeyAlgorithm.RSAEncrypt): RSASignature,\n            (False, PubKeyAlgorithm.RSASign): RSASignature,\n", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\n\t\tGeoJSONWriter.getInstance();\n\n\t\t// Inicializa el request services\n\t\trequestServices = new RequestServices();\n\n\t\t// Inicializa el cache\n\t", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "                   res = EnvelopePBE.search(context.get(Global.SearchContext.ENTITY, ExtUUID.class),\n                                                    context.get(Global.SearchContext.FILTER, String.class),\n                                                    context.get(Global.SearchContext", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "url(r'^users/$', users_list, name='users_list'),\nnew_user, edit_user, delete_user, change_password,\n\nviews.py\nfrom django.conf.urls import url\nfrom .views import *\nfrom .urls import *\n\nurl", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "                           stack.setPlayStats(stack.getPlayStatsWithEnabledSessions());\n                            updateAdapter();\n                            updateEmptyViews();\n                            Toast.makeText(getActivity(), \"Test Play\", Toast.LENGTH_SHORT).show();\n                            stack.removeListener(this);", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "   DropDownMenu dropDownMenu;\n    private int currentPage = 0;\n    private int totalCount = 0;\n    private int pageSize = 10;\n    private long totalMemory = 0;\n    private long memoryUsed = 0;\n    private int", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "       self.updateBuffImg();\n        self.update();\n        self.show();\n        self.raise();\n        #if(self.blockID != -1):\n        #   self.workspaceWidget.workspace.renderer.render(self);\n        #   self", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "\n    def test_find_preimage_8bit(self):\n        assert DP_WIDTH == 8\n\n        d1 = Constant(0, 8)\n        d2 = Constant(1, 8)\n        d3 = Constant(2, 8)\n\n", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "\t\tpublic static Node getTransform(Node node, NodeTransformer transformer) {\n\t\t\tswitch (node.getType()) {\n\t\t\t\treturn transformer.transformConstant(transformConstantNode(node));\n\t\t\t\treturn transformer.transformMultiConstant(", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\tgetCommandMap().setCommands(commands);\n\t\tlog(\"Enabled\");\n\t}\n\n\t@Override\n\tpublic void onLshieldEvent(Event event) {\n\t\t// Nothing\n\t}\n\n\tpublic static void checkGate(Location from, Location to", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "\n    public void parsePacket(Packet packet) {\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "   private SongListAdapter mSongListAdapter;\n\n    private int mSortOrder = SortOrder.SORT_BY_TITLE;\n\n    private Playlist mPlaylist;\n\n    private int mPlaylistId;\n\n    private int mPlaylistIndex;\n\n", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "           // Create a new immersive navigation\n            mImmersiveSensorNavigation = new ImmersiveSensorNavigation();\n            mImmersiveTouchNavigation = new ImmersiveTouchNavigation();\n            mImmersiveSensorNavigation.attach();\n            mImmersiveTouchNavigation.", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "   }\n    #\n    # define the common hierarchy structure\n    #\n    def set_hierarchy(self, ht):\n        self.hierarchy = ht\n    \n    #\n    # common methods for handling ESM messages\n    #\n    def get_ES", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "           // Save the edited tags\n            // Save the edited tags\n            // Save the edited tags\n            // Save the edited tags\n            // Save the edited tags\n            // Save the edited tags\n            // Save the edited tags\n            // Save the edited tags\n            // Save the edited tags\n           ", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\tpublic void addUserToUserManagement(String user) {\n\t\tUserManagement.addUser(getCurrentUserName(), user);\n\t}\n\n\t@POST\n\t@Path(\"eligibilityjob\")\n\t@Produces(\"application/json\")\n\t@Override\n\tpublic void", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "    * @Query(Constants.KEY) String apiKey;\n     *\n     * @return API plan information\n     */\n    public abstract class HostReport {\n\n     * @param total total number of results\n     * @param hosts list of hosts\n     * @param filters filters\n    ", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "   public void visit(LogMessageVisitor visitor, LogMessage message) {\n    }\n\n    public ImmutableList<Measurement> getMeasurements() {\n      return ImmutableList.empty();\n    }\n\n    public void accept(LogMessageVisitor visitor, LogMessage", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "\n  def test_glasberg_moore_example(self):\n\n  # Testing the gammatone filter bank\n\n  def test_gammathe_example(self):\n\n  # Testing the erb function\n\n  def test_erb_example(self", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "\ndef read_sequence_item(fp, is_implicit_VR, is_little_endian, encoding,\n                      offset=0):\n \"\"\"Read and return a Datasets containing a single data element.\n\n Parameters\n ---------\n fp : an opened file", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "  runProcessors(document, proxyBuilder);\n\n   // todo: implement the runProcessors method\n   throw new DocxStamperException(\"implement the runProcessors method\");\n}\n\n  public void runProcessors(final WordprocessingMLPackage document, final ProxyBuilder<", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "   protected void loadData(int page) {\n    }\n}\n}\nI'm trying to understand the code given to me, but I'm having some difficulties.\nCan you explain me what the code is doing and what are the classes and their roles in the code?\nI have some", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "\n    @flags.register(PubNotationFlags)\n    def flags_int(self, val):\n        self._flags = PubNotationFlags(val)\n\n    @flags.register(bytearray)\n    def flags_bytearray(self, val):\n        self.flags", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "   def addMessage(self, message, force):\n        if force:\n            self.messages = self.messages + message\n        else:\n            self.messages = self.messages + [message]\n        self.statusBar.setItem(0, self.messages)\n        self.", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "\n    def check_string_arg(arg, type_):\n        arg = check(arg, env)\n        with env.errors.location(arg.location):\n            unify(arg.__type__, type_)\n        return arg\n\n    def check_string_placeholder(place", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "   if isinstance(value, GregorianMonthDay):\n        return value\n\n    try:\n        if isinstance(value, UntypedAtomic):\n            return GregorianMonthDay.fromstring(value.value)\n        elif isinstance(value, (Date1", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "\nif features is None:\n    features = {}\n\n\ndef _select_model_from_candidates(candidates, ridge_alpha=None, aicc_phase_penalty=None, features=None):\n    \"\"\"\n    Select the best model from", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "   private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerComponentController componentController, FsmPlayer fsmPlayer, AdMediaModel adMedia) {\n\n    }\n\n    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerComponentController component", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "       }\n        if(type == 7 || type == 0) {\n            ProximitySensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 8 || type == 0) {\n            PressureSensorCollector.flushDBCache", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "   Call<SuggestResponse> getSuggest(@Query(\"q\") String query);\n\n    @POST(\"upload\")\n    Call<UploadResponse> upload(@Body Map<String, String> data);\n\n    @GET(\"get\")\n    Call<GetResponse> get(@Url", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "\n    def check_stream(self, model, position):\n        # noinspection PyUnresolvedReferences\n        \"\"\"Check if a stream is available for a model.\n\n        :param model: The model to check for a stream.\n        :param position: \"trim_horizon", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "```\n    def take_action(self, parsed_args):\n        self._learner = self._get_learner(parsed_args)\n\n        if not parsed_args.input.exists():\n            raise IOError(\"failed to open data file at {}\".format(parsed", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "\tprivate BannedIpServices bannedIpServices;\n\tprivate ChallengeServices challengeServices;\n\tprivate SubmissionServices submissionServices;\n\tprivate CountryServices countryServices;\n\tprivate UserServices userServices;\n\tprivate Categories cateProcess;\n\tprivate Categories cates;\n", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "   def __init__(self, *entourage):\n        super(Vertex, self).__init__(*entourage)\n        self.entourage = entourage\n\n    def __str__(self):\n        return to_str(self.__unicode__())\n\n   ", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "   def decoder(self) -> RNNArchitecture:\n        \"\"\"\n        Creates the decoder RNN.\n\n        The decoder RNN receives the decoder input sequences as input, and is initialized with zero initial states.\n\n        Returns\n        -------\n        RNNArch", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "   for platform in Platform.objects.all():\n        all_platform_slugs.append(platform.platform_slug)\n\nForms\nadmin_forms.py\nclass PackageAdmin(admin.modelsadmin):\n    # Override the default list and create views\n    # to display the package", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "   public boolean add(MediaQueryNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(MediaTypeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(MediaTypeRestriction node) {", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "\tpublic static Hr hr(Attribute... attributes) {\n\treturn new Hr(attributes);\n }\n\n\tpublic static Image image(Attribute... attributes) {\n\treturn new Image(attributes);\n }\n\n\tpublic static Input input(Attribute... attributes) {\n\treturn new Input(", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "       // 01-time | 02-time | 03-time | 04-time | 05-time | 06-time | 07-time | 08-time | 09-time\n        // 10-mean |", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": " edge_list = visitor.edges\n  while edge_list:\n      edge = edge_list.pop(0)\n      if edge.kind == ControlFlow.E_I_I_I:\n        parent_loop = edge.source\n        while parent_loop:\n         ", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\t\tbreak;\n\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.k, this.m);\n\t\t\t\tbreak;\n\t\t\telse:\n\t\t\t\tthrow new RuntimeException(\"", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "```\n    if xsd_version == '1.0':\n        raise ElementPathError(\n            \"Invalid XPath expression. XSD version 1.0 does not support \"\n            \"regex patterns with lazy quantifiers or back-references. \"\n            \"Use XSD version ", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "                   }\n                };\n            });\n        }\n\n        @Override\n        public void onReadEvent(Event event, RoomState roomState) {\n            // Ignored\n            // Ignored\n            // Ignored\n            // Ignored\n            // Ignored\n            // Ignored", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\tpublic Pipeline createPipeline(InFormat inFormat, OutFormat outFormat, PreProcessing preProcessing, PostProcessing postProcessing) {\n\t\treturn new PipelineImpl(inFormat, outFormat, preProcessing, postProcessing, identityGenerator, ddi2xforms", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "       DocumentDialog(self, ReleveSIEJModifications(annee, site)).ShowModal()\n\n    def OnGenerationReleveNomene(self, _):\n        annee = self.releves_choice.GetClientData(self.releves", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "\n    def hide_hessian(self):\n        \"\"\"Hide the Hessian tensor.\"\"\"\n        self.__hessian_handle = None\n\n    def show_hessian(self):\n        \"\"\"Show the Hessian tensor.\"\"\"\n        self.__hessian", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "       // display queued project\n        gallery.setVisible(false);\n        needles.setVisible(false;\n        gauge_description.setVisible(false);\n        yarn_weight_description.setVisible(false);\nyardage_description.setVisible(false);\nNotices", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "\n    public void onDisable() {\n        // Unregister the Economy Service\n        game.getServiceManager().setProvider(this, EconomyService.class, null);\n        // Unregister commands\n        CommandLoader.unregisterCommands(this, TextSerializers.FORMATT", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "\n    def _fit(self, trace_array, lnprob_array, k=0):\n        # ...\n        # ...\n        # ...\n\n    def _select_samples(self, trace_array, lnprob_array, k=0):\n        # ...\n", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "     return Const(arg)\n    elif op == LOAD_VAR:\n      return Ref(arg)\n  else:\n    raise ValueError(\"Invalid opcode\")\n\n  return Undef(arg)\n\n  # If the opcode is not recognized, we return an Undef node", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "\tpublic void dispose() {\n\t\tdisposeEntities();\n\t\tsuper.dispose();\n\t}\n\n\tpublic void disposeEntices() {\n\t\tdisposeEntices(entitiesEntices());\n\t\tentitiesEntices();\n\t\tentitiesEntices();", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "                   (PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor)sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                }\n                o.getGraph().setCellData(", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\tpublic List<AuthorWithBooks> getAuthorsWithBooks() {\n\t\tList<Long> authorIds = new ArrayList<>();\n\t\tAtomicInteger aInteger = new AtomicInteger();\n\t\tjdbcTemplate.query(\"SELECT AUTHOR.ID, AUTHOR", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "\tpublic void executeServer(E exp, ForestReader in, ForestWriter out) {\n\t\tif (exp instanceof SQLQuery) {\n\t\t\tSQLQuery q = (SQLQuery) exp;\n\t\t\tq.setTables(tables);\n\t\t\tq.setRootQuery(", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "   }\n    except Exception as e:\n        print \"Error: \" + str(e)\n        return\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "   Genotype parseGenotype(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return trait.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into trait\n     */\n    Tra", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "               Placeholder.typed(IntType, 'bar'),\n            ]))\n        ]),\n        {'inc': inc_type},\n    )\n\n\ndef test_optional():\n    inc_type = Func[[IntType], IntType]\n    check_expr_type(", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "\n        PreparedExecution pe = ds.getFirstPrepared();\n\n        assertThat(pe, success());\n        assertThat(pe, failure());\n\n        assertThat(pe, isPrepared());\n        assertThat(pe, isBatchPrepared());\n        assert", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "for k in range(0, len(self.drawing_view.sketch_views)):\n\tif self.drawing_view.sketch_views[k].selected_key_points is None:\n\t\tself.drawing_view.sketch_views[k].selected", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "                           return new NotFoundException(cause);\n\n                        // Other status codes\n                        // ...\n                        }\n                    }\n                    return null;\n                };\n\n    }\n\n    public final void setAdapter(final RequestInterceptor interceptor) {\n        m", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "\t\trenderers.put(Iterable.class, new DefaultIterableRenderer());\n\t\trenderers.put(List.class, new DefaultIterableRenderer());\n\t\trenderers.put(Set.class, new DefaultIterableRenderer());\n\t\trenderers.put(Arrays", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t\tlabelFactory.setCapitalization(true);\n\t\t}\n\t\treturn labelFactory;\n\t}\n\t\n\tprivate static final int getFacetSort(Element elt) {\n\t\tint sort = 0;\n\t\tif (elt.hasAttribute", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "   url(r'^hide-ci-pipeline/(?P<pipeline_id>[\\w\\-\\+]+)$', hide_ci_pipeline.as_view(), name=\"hide_ci_pipeline\")\n\n# hide_ci_pipeline\n\nhide_ci_", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "                       ActivityTransitionLauncher.setLauncher(mContext, new CandyBarWallpaperActivity.ExitTransition(mContext, intent));\n                        mExitTransition = ExitTransition.with(mContext, mImageView, Extras.EXTRA_IMAGE);\n                       ", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "   account_for_vimeo_id(access_token.token, person=person)\nleapfrog/poll/mlkshk.py\ndef account_for_mlkshk_userinfo(userinfo, person=None):\n    username = userinfo['", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "   #    print(x_mean, y_mean, test_px_sum, unmasked_ratio)\n\n\n    #    # Correct the image area for vignetting and extinction\n    #    corral = applyRecalibrate(mask.img, xe", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "   grid_size = int(np.sqrt(density))\n    grid_size = 1000\n    grid_ = np.random.rand(grid_size, 1)\n    grid_ = np.concatenate([np.zeros(1, 1", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "           Board.this.rollDices();\n          }\n      }\n });\nrollBtn.setX(boardbg.getX() + boardbg.getWidth / 2);\nrollBtn.setY(boardbg.getY() + boardbg.getHeight / 2);\n", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "\n    self.assertEqual(etree_iter_paths(root), ['a', 'b1', 'c1', 'c2', 'b3', 'c3'])\n\nHowever, the code raises a `ValueError` because the `c1` tag is not defined in the", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "   def test_detect_soft404(self):\n        entry = Entry.create(\"http://example.om/test\", response=StaticResponse(404, {\"Content-Type\": \"text/html\"}\"))\n        self.runner.run(entry)\n\n       ", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "   cfe = CFeCancelamento(\n            chCanc=_opcao('--ch-canc'),\n            CNPJ=_opcao('--cnpj-cancelamento'),\n            signAC=_opcao('--assinatura-cancelamento", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "\n    public Ancestry parseAncestry(InputStream inputStream);\n\n    public Carrier parseCarrier(InputStream inputStream);\n\n    public DrugResponse parseDrugResponse(InputStream inputStream);\n\n    public Haplogroup parseHaplogroup(InputStream inputStream", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "           EtsiResponse res = req.send();\n            System.out.println(\"Response: \" + res.toString());\n            res.getResponseContent().getContent().getContent();\n            }\n            catch (IOException ioe) {\n            ioe.printStackTrace();\n            }\n       ", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "           RotationVectorSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 12 || type == 0) {\n            RelativeHumiditySensorCollector.flushDBCache(deviceID);\n        }\n        if(type ==", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "\tpublic TeamSummary getTeamSummary() {\n\t\treturn teamSummary;\n\t}\n\n\tpublic void setTeamSummary(TeamSummary teamSummary) {\n\t\tthis.teamSummary = teamSummary;\n\t}\n\n\tpublic List<String> getRoster() {\n\t\t", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "\n    }\n\n    private void hideDailButton() {\n        feedbackView.hideDailButton();\n    }\n\n    private void showDailButton() {\n        feedbackView.showDailButton();\n    }\n\n    private void checkScreenshotSwitch(boolean activ", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "           request[table_name] = {\n                'ListItems': [\n                    {\n                        'LastEvaluatedEndpoint': key,\n                        'LastEvaluatedStartingPoint_endpoint': key,\n                        'ListEndPoint': key,\n                        'Return", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "       draw_art(key_size, key_algo, key_fpr, color=True, longid=True)\n\n        print(f\"Fingerprint: {fingerprint}\")\n        print(f\"Description: {description}\")\n        print(f\"Created at:", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "admin.site.register(Target, TargetAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Component, ComponentAdmin)\nadmin.site.register(Progress, ProgressAdmin)\n\nI have tried to provide the complete code, but I am still having", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "\n    def consultar_sus_sat(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.consultar_sus_sat`.\n\n        :return: Uma resposta SAT especializada", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "       self.assertEqual(node_document_uri(ElementTree.XML(xml_test)), 'http://www.w3.org/XML/1998/namespace')\n        document = ElementTree.parse(io.StringIO(xml_test))\n        self.assertEqual", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "                   Arrays.sort(sorted, new StartDateComparator());\n                break;\n                case START_DATE_DESC:\n                    // Nothing to do\n                break;\n                case TIME_ASC:\n                    // Nothing to do\n                break;\n                case T", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "\n    def _trainer_initialization(self) -> None:\n        \"\"\"\n        Train the GMM\n\n        Notes\n        -----\n        This function is called in parallel in multiprocessing.multiploy\n        \"\"\"\n        self.gmm_training_complete = False\n", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "   private final OkHttpClient httpClient;\n\n    public OAuth2ClientImpl(long clientId, String clientSecret, SessionController... controllers)\n    {\n        this.clientId = clientId;\n        this.clientSecret = clientSecret;\n        this.sessionController = (controls", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "   \n    public SpringDirectorClient(URI root) {\n        this.restTemplate = new RestTemplate();\n        this.info = new SpringInfo(this.restTemplate);\n        this.releases = new SpringReleases(this.restTemplate);\n        this.stemcells", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "}\nDifian/DifianApp/src/main/java/com/sonova/difian/communication/fittingconnection/FittingConnectionManagerFactory.java\npublic interface FittingConnectionManagerFactory\n{\n    public FittingConnectionManagerManager createFittingConnectionManager(", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "       return new SvnJavaAddCommand( this );\n    }\n\n    protected SvnCommand getBlastCommand()\n    {\n    throw UnsupportedOperationException\n        = UnsupportedOperationException( \"getBlastCommand() is not implemented.\" );\n}\n\n    protected SvnCommand", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "   public void onMouseEvent(GuiMouseEvent e) {\n        if (e.getMouseEvent() == MouseEvent.MODOVER) {\n            this.setAbove(ACTIVE);\n        } else if (e.getMouseEvent() == MouseEvent.MODDESCEND", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "       DATA[looptest][0], EPSILON, FiniteDifferenceSchases.FORWARD);\n        assertEquals(d3Call, DATA[looptest][1], TOLERANCE_PRICE, TOLERANCE_DELTA);\n      }", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "\n            // Register the event listeners for each module\n            for (int i = 0; i < modelClasses.length; i++) {\n                (new ModuleLoader.ModelLoader(modelClasses[i))).load();\n            }\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "    *  public DownloadQueue newDownloadQueue() {\n     *      return new DownloadQueue(mCancelerManager, mDispatchers);\n     *  }\n     *  public DownloadQueue newDownloadQueue(int threadPoolSize) {\n     *      return new DownloadQueue(mCancelerManager", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": " public void onLoad(WatcherRegistry watcherRegistry) {\n     // ...\n     // ...\n     // ...\n     // ...\n     // ...\n     // ...\n     // ...\n     // ...\n     // ...\n     // ...\n     // ...\n     // ...\n    ", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "    */\n    private QuerySetConfig parseQuerySetConfigTag(Element element) {\n        QuerySetConfig querySetConfig = new QuerySetConfig();\n        NodeList querySetList = getAllChildNodes(element, QUERY_SET_TAG);\n        for (int i = 0", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "```\n    def update_robot_ik(self):\n        prev_lf_task = self.robot.ik.tasks[self.robot.left_foot.name]\n        prev_rf_task = self.robot.ik.tasks[self.robot.", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "\n    from arxpy.bitvector.operation import BvUdiv\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\t\taOutput.writeInt16(SegmentMarker.APP14.CODE);\n\t\t\taAPP14Segment(aJPEG.mICCProfile).encode(aOutput);\n\t\t}\n\n\t\taOutput.writeInt16(Seg", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "\n            if (type == HibiscusExportType.SAMMEL) {\n                // Send the entire collection of last transactions to Hibiscus\n                // as a single batch.\n                // ...\n            } else {\n                // Send each individual last transaction to Hibiscus", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "\n    from montreal_forced_aligner.models import AcousticModel\n    from montreal_forced_aligner.utils import log_kaldi_errors, run_mp, run_non_mp, thirdparty_binary\n    from argparse import Namespace\n   ", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "       LoreProperties properties = PlayerHandler.getCollectedLore(entityPlayer);\n        if (!properties.hasLore(key)) {\n            properties.addLore(key);\n        }\n        PacketReloadLore.updateLore(entityPlayer);\n        entity", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "\n    public AccountSummary getAccountSummary(User user) {\n        return getAuthTokenDAO().getAuthToken(user);\n    }\n\nThe issue:\n\nThe problem is that the `getAccountSummary` method is not able to retrieve the account summary data because the `AuthTokenDA", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\n\tprivate Util() {\n\t\t// nothing\n\t\t// ...\n\t\t// ...\n\t}\n\n\tpublic CloudUtil cloudUtil() {\n\t\treturn CloudUtil.getInstance();\n\t}", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "   FadeOutUp(FadingOutUp.class),\n    FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadingOutRight.class),\n\n    RotateIn(RotateIn.class),\n    RotateInDown(RotateIn", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "\n    def test_get_hosts(self):\n        # ...\n        self.assertEqual(hosts, [h1, h2, h3, h4])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "       yield yield command\n        if self.is_add_shaping_rule:\n            yield yield \"zathb\"\n        if self.is_enable_iptables:\n            yield yield \"iptables\"\n        yield yield \"ls\"\n        yield yield \"ls -v\"\n", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": " assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n\n\ndef test_selectEncoder_2GLONASSL2():\n  '''\n  Encoder selection test\n  '''\n  enabledBands = {NormalRateConfig.GPS.L1", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "    */\n    public List<Expense> getExpensesFromCreditPeriod(int periodId) throws CreditPeriodNotFoundException {\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n        List<Expense> expenses = null;\n\n        Cursor cursor = ", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "   private OnDayChangeListener onDayChangeListener;\n    private OnMonthChangeListener onMonthChangeListener;\n\n    public MonthCalendar(Context context) {\nsuper(context);\ninit(context);\n}\n\npublic void init(Context context) {\nthis.context = context;\n", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "   my_stream = WhiteNoise()\n    assert isinstance(my_stream, Stream)\n    assert my_stream.take(25) == [zeros] * 25\n\n  def test_inf_input(self):\nNext line of code:\n    my_", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "           returns_markup(node)\n            t1 = get_type(node)\n            unify(t1, t2, backref)\n            accept_markup(node)\n            return returns_markup(node)\n\n            # ... (more code) ...\n           ", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "\n    blink_url = \"https://blink.account.immideo.com/account/api\"\n    blink_account_url = \"https://blink.account.immideo.com/account/api\"\n    blink_domain = \"immideo.com\"\n", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "```\nThe code is a part of the GUI framework for a CAD software, and it provides a way to interact with the CAD model through a graphical user interface. The code is written in Python and uses the PyQt5 library for creating a graphical user interface.\n\nThe main purpose of the", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "     raise Exception(ex)\n\n    stream.write(pack('!p', 0))\n    stream.write(pack('!p', 0))\n    stream.write(pack('!p', 0))\n    stream.write(pack('!p', 0))\n", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "       assertThat(out.toString(), equalTo(\"ThreadDump\"));\n    }\n\n    @Test\n\n    public void jmxLocalConnectViaCli() throws Exception {\n\n    TestThread.JMICMICer c = disposer.register(TestThread.runJ", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "       return new DrumStoreEntryImpl(data);\n    }\n}\n}\n\nNote: The above code was generated from the Java source code of the `Pair` class using the `JavaSourceTransformer` tool.\n\nWith the above code, the `Pair` class is able to generate", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "       MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视镜: \" + result.getItems().size() + \" ", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "       return new RoxanaProperties();\n        }\n\n    private ResponseProcessorManager getResponseProcessorManagerForTest() {\n        return new ResponseProcessorManager();\n    }\n\n    private class MockedMultiBusinessException extends MultiException {\n\n    private static final String ROXANA_", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": " self.Open()\n\n  def Open(self):\n    \"\"\"Creates a connection to the remote host.\"\n    This method may only be called once.\n    \"\"\"\n    if not self._open_result:\n      self._Init()\n      self._open_result = AsyncResult", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "   assert freq2lag(lag2freq(v)) == v\n\n  def test_almost_eq_with_float_numbers(float numbers):\n    for a in [0, 1, -1, 2, 3, 4, 5, 6", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "           Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy2", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "   checks.is_guild_admin()\n\nThe issue is that the `checks` module is not found in the `clembot/core/checks.py` file, and the `is_guild_admin` function is not defined.\n\nI have tried to fix the", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "   if operands[0]._comparison_type == COMPARATION_OPERATOR_TYPES.EQUAL:\n        return evaluates as True\n    elif operands[1]._comparison_type == COMPARATION_OPERATOR_TYP", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "       welcomeString.setGravity(Gravity.TOP, 0, 0);\n        // ... y agúzate el menú...\n        mDrawerToggle = new ActionBarDrawerToggle(getActivity(), mDrawerListView, drawerMenuPresentation());\n        mDrawer", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "           InviteToChatFragment inviteToChatFragment = new InviteToChatFragment();\n            FragmentActivity fragmentActivity = new FragmentActivity();\n            inviteToChatFragment.onActivityCreate(fragmentActivity);\n        }\n    }\n\n    public void onTaskRun()", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "request.sign(wxPayClient.apiSigner());\n\n        WXPayResponse response = wxPayClient.unifiedOrder(request);\n\n        if (response.resultCode != \"SUCCESS\") {\n\n            WXPayApiException ex = new WXPayApiException(response", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "       creator.create(KEY, STRING_PARAMETER_NAME_01, RANDOM_STRING_PARAMETER_VALUE_01);\n        assertEquals(creator.getKey(), KEY);\n        assertEquals(creator.getParameter(0).getFormatted", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "   public static void main(String[] args) {\n        // Create a new ErBeam driver\n        ErBeam driver = new ErBeam();\n        // Create a new ErJava driver\n        ErJava driverJ = new ErJava();\n        // Create a new ErDJava driver\n", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "\n    def create_cluster(self, name, cip, cns, cst, cvp, cwm, cqm, csl, csn,\n                        **kwargs):\n    # ...\n\n    def create_instances(self, name, cip,", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "       AlpineLinuxPingParser,\n        MacOsPingParser,\n        NullPingParser,\n        LinuxPingParser,\n        WindowsPingParser,\n        AlpineLinuxPingParser,\n        MacOsPingParser,\n        NullPingParser)\n        if", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "       videoFrameRate = Integer.parseInt(m.videoSetFrameRate.getText());\n        }\n\n        switch (e.getUnselectedCommand()) {\n        // SET_INPUT_WAV\n        // SET_OUTPUT_MP4\n        // SET_BG_OTHER", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "       self.probe = probe\n        self.channels = _get_channels(probe)\n        self.n_channels = len(self.channels)\n\n        # Extract the relevant information from the probe.\n        self.probe_adjacency", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "   public final Promise<PingResponse> ping(final TransportContext context) {\n        if (context == null) {\n            throw new IllegalArgumentException(\"Context must not be null\");\n        }\n\n        // Setup request.\n        final URI uri = Transports.buildPing", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "   self.cdf = ControlDependence(self)\n\n  def analyze(self):\n    pass\n\n  def compute_conditions(self):\n    pass\n\n  def walk(W):\n    pass\n\n  def __del__(self):\n    pass\n\n ", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "       FragmentObservable<QRData> fragmentObservable = new FragmentObservable<QRData>(QRData.class);\n        // ...\n        // ...\n        // ...\n        // ...\n        // ...\n        // ...\n        // ...\n        // ...\n        // ...\n        //", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": " public void visit(final JavaSQLFunc func) {\n    // Accept the visitor for the Java SQL function\n    func.accept(this);\n }\n}\n}\n</code</pre</pre>\n\nThe code given in the source file is a Java class that implements the interface Evalu", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\t\t\tFile inputFile = new File(basePath + \"/input.xml\");\n\t\t\tFile expectedOutput = new File(basePath + \"/expected_output.xforms\");\n\t\t\tString input = inputFile.getAbsoluteText();\n\t\t\tString expected = expectedOutput", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "\n        # Test the DiscreteDistribution class\n        d = DiscreteDistribution(pmf=0.3, X=[0, 1, 2])\n        draws = d.draw(3)\n        self.assertEqual(draws[0], 0)\n       ", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "\n        state = stateFactory.createState(VastAdInteractionSandBoxState.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vpaid state\n\n        state = stateFactory.createState(Vpaid", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "\tpublic void invalidValue(FixTag tag, InvalidValueException exception) {\n\t\tif (validities.containsKey(tag)) {\n\t\t\tthrow exception.invalidValue();\n\t\t}\n\t\telse {\n\t\t\tvalidities.put(tag, Validity.", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "   management.django_project.utils.utils.management.utils.utils.utils.utils.utils.utils.utils.utils.utils.utils.utils.utils.utils.utils.utils.utils.utils.utils.utils.utils.utils.utils.utils.utils.utils.utils", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "                       expectLastCall().andExpect(resultOf(argAtLeastOnceWith(expectedEvent() //\n                                .hasArgument(GIVEN_STRING)))\n                                .with(EXPECTED_RESULT));\n\n                        // WHEN\n                        Throwable thrown", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "   if rem == 0:\n        raise Exception(\"Parsing error: unexpected end of message\")\n    else:\n        self.append(self.P1P2P3P4P5P6P7P8P9P10P11P12P13", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "\n    def create_table(self, *objs, yield=None):\n...\n\n    def load(self, *objs):\n...\n\n    def save(self, *objs):\n...\n\n    def delete(self, *objs):\n...\n\n   ", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "\n    def __init__(self, *args, **kwargs):\n        \"\"\"Inicializa a funão de FuncoesSAT.\n\n        :param args: Uma lista de positionamento.\n        :type args: list[None]\n        :param kwargs: Uma ch", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "\n    with pytest.raises(InvalidModel):\n        engine.bind(ComplexModel())\n\n\ndef test_bind_model_with_existing_index(engine):\n    class StreamModel(BaseModel):\n        class Meta:\n            index = GlobalSecondaryIndex(", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "   assert u6.dimensions == mass\n    assert u6.base_value == 1.0\n\n    # nonzero MKS conversion factor\n    u7 = Unit(\"kg/m**2*s**-2*m**3/kg**2/m**2*s", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "\n    '    # pywbemcli command group for this test. This is the first level of\n    # the command, e.t.o.w. the command line arguments, without the command\n    # group or command name.\n    command_grp = \"class\"')\n", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "       // Load plugins\n        container.set(new PluginManager(container));\n        // Load Economy\n        economyService = new LiteEconomyService(economicStorage(), economyRegistry());\n        // Load Virtual\n        virtualEconService = new VirtualEconService(virtualStorage", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "       ckresult(get_class(\"FMOD\").get_tag(self, index, name))\n        check_type(ckresult, TAG)\n        return TAG(ckresult)\n        :rtype: TAG\n        \"\"\"\n        ckresult(get_class", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "                   public void onBroadcast(Broadcast broadcast) {\n                    }\n\n                    @Override\n                    public void onPermissionsGranted(Permissions permissions) {\n                    }\n\n                    @Override\n                    public void onPermissionsDenied(Permissions", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Path(\"page\") int page );\n\n\t@GET(\"/3/account/{username}/images/ids/{page}\")\n\tCall<", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "\n    resource = ThermometerResource(aircraft.instruments.thermometer)\n\n    thermometer_data = resource.get()\n\nself.assertAlmostEqual(aircraft.instruments.thermometer.temperature, thermometer_data[\"temperature\"], ", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "   column = User.age.foo\n    value = 3\n    expected_ref = \":v0.#n1\"\n    expected_action = actions.set({\"N\": \"3\"})\n    expected_values = {\":v0.#n1\": expected_action.", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "           Platform.runLearn(new Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tAlert alert = new Alert(AlertType.INFORMATION, \"Error requesting queue queue...\", ButtonType.OK);\n\t", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "   if nodes.filter(parent=nodes.first()).count() == 0:\n        return render(request, self.template_html, {'post' : post, 'nodes' : nodes})\n        # ... more code ...\n        # ... more code ...\n        # ... more code ...", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "   Call<EmojiResponse> getEmojiTags();\n\n    /**\n     * Retrieves a set of gifs for a given id\n     *\n     * @param id a unique id for the gif\n     * @return {@link Call}<{@link GifsResponse", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "           of(mConnectionErrorListener).ifPresent(ConnectionErrorListener::onError);\n            of(mConnectionErrorListener).ifPresent(ConnectionErrorListener::onError);\n            mWifiConnectionCallback.errorConnect(connectionErrorCode);\n        }\n    };\n}\nw", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "       }\n        if(type == 6 || type == 0) {\n            ProximitySensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 7 || type == 0) {\n            TemperatureSensorCollector.flushDB", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "       }\n        }\n\n    private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n        for (Card card : stack.getCardList()) {\n            card.removeListener(this);\n        }\n        for (Card card : stack", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "\n    yield yielded = yield(self.run())\n    log_kaldi_errors(yielded)\n    if yielded:\n        log_kaldi_errors(yielded)\n        break\n\n    if not yielded:\n    log_kaldi", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "   \n    public SpringDirectorClient(\n            final URI root,\n            final Tasks tasks,\n            final Releases releases,\n            final Stemcells stemcells,\n            final Info info) {\n        this.restTemplate = new RestTemplate();\n        this.info =", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "       ckresult(self._call_fmod(\"FMOD_Sound_GetTag\", index, byref(tag, tag.value)))\n        return tag\n        #: The tag value.\n        #: (str)\n        #: The tag name.\n        #: (", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "\n    # Release the bit_writer\n    bit_writer.release()\n    return bufr_message.bits\n\n    def process_compiled_template(self,\n                                  template_manager,\n                                  json_data,\n                                  wire_template_data=", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "       if AbuseReport.objects.create(\n            user=logged_against,\n            moderator=logged_by,\n            comments=request.POST['comments']\n        ):\n            # Set log and email settings\n            # ...\n            send_connect_email(", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "   public void output(final BenchmarkResult result) {\n        // Summary table\n        try {\n        // Get the meters\n        final List<AbstractMeter> meters = result.getAllMeters();\n        // Get the means\n        final List<Double> means = Arrays.", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "       // Checking ProtTest version\n        if (versionNumber.equals(versionNumber))\n        {\n        \tfinalize(1);\n        }\n        // ...\n        // ...\n        // ...\n        // ...\n        // ...\n        // ...\n        // ...\n       ", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\t\ttropo.mute();\n\t\ttropo.exitTone();\n\t\ttropo.beep();\n\t\ttropo.record();\n\t\ttropo.startRecording();\n\t\ttropo.conference();\n\t\tt", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "           // Se a lista de respostas é salvo, é necessário verificar se a questão \n            // fornecida é atualizada com a resposta fornecido.\n            // Se a questão não é atualizada, é necessário atualizar a lista de", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {\n\t\t\t\tif (code == 0) {\n\t\t\t\t\t// Get the track list\n\t\t\t\t\tProgramManager programManager = new ProgramManager();\n\t\t\t\t\t", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "   @Inject PlayerUIController playerUIController;\n\n    @Inject FsmPlayerImperial fsmPlayerImper;\n\n    @Before\n\n    public void setUp() {\n\n        // Create a new FsmPlayerImperial\n        playerFsm = FsmPlayerIm", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t\t\t\tSystem.exit(0);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tauthorize(browser, callback);\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\tthrow e;\n\t\t}\n\t", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "   String adapterName = adapterName(type.getQualifiedName());\n    String injectedClassName = getInjectedClassName(type);\n    String companionClassName = adapterName(packageName + INJECT_ADDRessSUFFIX);\n      // Create a companion class for the injected class.", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "       }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": " assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)\n\n\ndef test_parameters_gps_sv0():\n  parser = prepareArgsParser()\n  # Test GPS SV 0\n  # GPS L1 C/", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "\n    if is_xml_codepoint(code):\n        return f'/Q{%s}string.from_unicode(u\"{code}\")'\n    raise ValueError(f\"Unsupported function: {function_name()}\")\n\n\ndef is_xpath_node", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "\nt = Table(data={'A': (1, 2, 3), 'B': 4, 'C': 5})\nprint(stack_table_inplace(t, t))\n\nQuestion:\n\nI have a question regarding the stack_table_inplace()", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "               isTyping = Boolean.parseBoolean(typingString);\n            }\n            else\n            {\n                throw new MessageReaderException(\"Invalid message type\");\n            }\n        }\n    }\n\n    private void addMessage(ChatMessage message)\n    {\n        synchronized", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "\t\tif use_reduced_residuals:\n\t\t\tr_dmy_factor1_long = dmy_factor1\n\t\t\tr_dmy_factor2_long = dmy_factor2\n\t\t\tr_dmy_interaction_long =", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "\n    }\n\n    public static String METHOD_NAME = \"com.github.olivergondza.dumpling.factory.ThreadDumpFactoryVendorTest$Runner\";\n\n    public static class Runner extends Thread {\n\n    public static String current = null;", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "               DatePicker datePicker = new DatePicker(this);\n                datePicker.setDate(mRecord.getRecordTime().getTime());\n                datePicker.show(this.view.getParent(), false);\n                break;\n\n            // 编辑时才显示天", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "           GyroscopeSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 5 || type == 0) {\n            LightSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 6 || type == ", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "   private SetOtherFragment setOtherFragment;\n    private MomoFragment momoFragment;\n    private int mCurrentPage = 0;\n\n    @Override\n    protected void onCreate(final Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    //  XpLog.", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "if __name__ == \"__main__\":\n    # XXX this is a hack to get the traceback stack\n    # XXX traceback.stack() is a bug in 2.6.12\n    try:\n        traceback.stack()\n    except:\n        pass\n   ", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "   deltas.deltas[3].attach(File.create(api_client.api, \"file.txt\"))\n\n    # ... more tests ...\n\n    deltas.deltas[7].remove(Message.create(api_client.api, \"message.", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "       self.emails = emails\n        self.duration = duration\n        self.interval = interval\n        self.start_at = start_at\n        self.end_at = end_at\n        self.open_hours = open_hours\n        self.free_busy", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "       nightMode = getSharedPreferences(NIGHT_MODE_PREF_KEY)\n        //TODO(jontayler): check if we can use the same code for both\n        // 1) NORMAL_LIGHT_LEVEL and NIGHT_MODE\n       ", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "       lnlike = np.sum(lnprior_multivariate) - np.sum(multi_phase_error) - np.sum(eq_thermochemical_prob) - np.sum(actvity_error)\n        lnprob = lnlike\n       ", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "           Str('Identity', Pt=Identity(), Len=8, Repr='hum'),\n            if with_options:\n                Bit('O', ReprName='Optional', Pt=0, BitLen=4)\n                Str('Optional', Pt=Optional(), Len=1, Re", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "       self.__con = connect_memdb()\n        self.__logger = self.logger.getlogger(self.name)\n        self.con = self.connect_memdb()\n        self.logger = self.logger.getlogger(self.name)\n        try:\n            self", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "```\n    return Column(apply_eq(left, right), left.index)\n```\nI'm trying to understand the code and I have a question about the `apply_eq` function.\n\nThe `apply_eq` function is defined as a function that takes two arguments, `left", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "   try:\n        handle_request(request, validator_map)\n    except (SwaggerMappingError, Exception) as exc:\n        assert exc.type is not None\n        assert exc.data is not None\n        assert exc.trace is not None\n        assert validation_error", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
