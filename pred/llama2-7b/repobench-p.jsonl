{"pred": "   private final transient KademliaRoutingTable routingTable;\n    private final transient JKademliaRoutingTable routingTableJ;\n    private final transient KadConfiguration config;\n\n    private final transient Timer timer;\n    private final transient TimerTask timerTask", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "       mImmersiveSensorNavigation = new ImmersiveSensorNavigation(glView);\n        mImmersiveTouchNavigation = new ImmersiveTouchNavigation(glView);\n        mImmersiveSensorNavigation.attachTo(new NoEffect());\n        mImmersiveTouchNavigation", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "\nclass Encryption1(Encryption):  # noqa: D101\n    input_widths = [8]\n    output_widths = [8]\n\n    @classmethod\n    def eval(cls, x, y):\n        x = RotateLeft(x", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "   private ImmersiveTouchNavigation mImmersiveTouchNavigation;\n    private ImmersiveEffect mImmersiveEffect;\n    private boolean mImmersiveEffectActive;\n    private boolean mImmersiveTouchNavigationActive;\n    private boolean mImmersiveSensorNavigationActive;\n", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "               new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));\n    }\n\n    private void queueEvent(Event event) {\n        eventQueue.add(event);\n        if (event instanceof StartEvent) {\n", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "    */\n    private LocalRateLimiter localRateLimiter;\n\n    /**\n     * 任务监听器\n     */\n    private TaskListenerManager taskListenerManager;\n\n    /**\n     * 任务配置\n     */\n    private TaskProperties", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\tintegrityCheck.check(args.path(), passphrase, args.checkFileIntegrity());\n\t\t} catch (AbortCheckException e) {\n\t\t\tprint(e.getMessage());\n\t\t} catch (IOException e) {\n\t\t\tthrow new Un", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "           //save private and public Key to storage\n            rsa.saveRSAKeys(deviceId);\n            //send notification to the user\n            if (classToNotify != null) {\n                classToNotify.sendNotification(deviceId);\n            }\n            return true;\n", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "   SignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN, SESSION_ID);\n\n    verify(mockChallengeGenerator).generateChallenge(eq(ACCOUNT_NAME));\n    verify(mockDataStore).getEn", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "           self.uaA.recvEvent(CCEventTry(self.uaA.state, self.uaA.conn, self.uaA.conn_cbs, self.uaA.disc_cbs, self.uaA.dead_cbs, \\\n              self", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "   def __init__(self, uri):\n        self.uri = uri\n\n\nclass FlagList(Signature):\nNext line of code:\n    def __init__(self, flags):\n        self.flags = flags\n\n\nclass ByteFlag(Signature):\nNext line of code", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "           if num_children == 1:\n              cstr_node.rhs = convert_ast_constraint(children[0])\n              process_children(cstr_node.rhs, children[0])\n            else:\n              logger.debug(\"Consistency error. expected ", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "               intent.setDataAndType(Uri.parse(url), \"video/*\");\n                activity.startActivity(intent);\n            }\n        }\n    }\n\n    private static boolean useInternPlayer(TDActivity activity) {\n        if (activity != null) {\n            if (", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "       String locationData = LocationHelper.getLocationData(latitude, longitude);\n        Log.d(\"SettingActivity: \", \"postLocationInformation(): \" + locationData);\n        // Create a new post location data body.\n        PostLocationDataBody postLocationDataBody = new PostLocationDataBody", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "       assert self.net[0].net_name == 'net1'\nNext line of code:\n        assert self.net[1].net_name == 'net2'\nNext line of code:\n        assert self.net[2].net_name == 'net3'\nNext", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "   class User(BaseModel):\n        class Meta(IMeta):\n            pass\n\n    class Meta(IMeta):\n        pass\n\n    class User(BaseModel):\n        class Meta(IMeta):\n            pass\n\n    class Meta(IMeta):\n        pass\n\n", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "   yield from self[1].select(copy(context))\n\n\n@method(infix('?', bp=32))\ndef select_optional_map_operator(self, context=None):\n    if context is None:\n        raise self.missing_context()\n\n", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "                   new HSBAdjustTransformation(),\n                    new InvertTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MapColorsTransformation(),\n                    new MarbleTransformation(),\n                    new MaskTransformation", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "   private static final ButterKnife.Action<View> HIDE_ALL = (view, index) -> view.setVisibility(View.GONE);\n    private static final ButterKnife.Action<View> SHOW_ALL = (view, index) -> view.", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "               writeResponse(SUCCESS, correlationId);\n                log.tracef(\"[%d] CreateMBean - Success Response Sent\", correlationId);\n            } catch (InstanceAlreadyExistsException e) {\n                writeResponse(e, CREATE_MBEAN, correlationId);\n                log", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "       wild.create_task_tuple(wild.monitor_status())\n\n\n    @group(pass_context=True, category='Bot Info', aliases=[\"wild\"])\n    @channel_checks.wild_report_enabled()\n    async def cmd_", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "   data = SNLIData(c['data'])\n    # Load dictionary\n    if c['vocab_def']:\n        dictionary = Dictionary(c['vocab_def'])\n    else:\n        dictionary = None\n    # Load embeddings\n    if c['", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": " assert isinstance(doppler, DopplerPoly)\n  assert doppler.distance0_m == 0.\n  assert doppler.tec_epm2 == 50.\n  assert doppler.coeffs == (50., ", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "               new ParticipantPresenceTask(getActivity(), participant.getId()).execute();\n                new ParticipantSendTask(getActivity(), participant.getId()).execute();\n                new ParticipantDeleteTask(getActivity(), participant.getId()).execute();\n\n                new", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "       assert self.redlock.acquire()\n        assert self.redlock.locked()\n        assert self.redlock.acquire()\n        assert self.redlock.locked()\n        assert self.redlock.acquire()\n        assert self.redlock.locked()\n       ", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "       return ConeSettings(self._get_fmod_object(\"FMOD_Sound_Get3DProjectionConeSettings\"))\n\n    def get_3d_cone_settings(self):\n        \"\"\"The inside and outside angles of the 3D projection cone and the\n", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "       self._calg = calg\n\n    @calg.setter\n    def calg(self, calg):\n        self._calg = calg\n\n    @property\n    def compressed(self):\n        return self._compressed\n\n    @compressed.", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "       size = findCellSize(imgshape, findCellSizeParameter = detectCellShapeParameter, maxLabel = 100, verbose = verbose, out = out, **parameter);\n        \n        #cell intensity and size measurements\n        findCellIntensityParameter = getParameter(detectSp", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "           tapSound.play();\n        } else if (accuracy == Accuracy.NICE) {Next line of code:\n            tapSound.play();\n        } else if (accuracy == Accuracy.GREAT) {Next line of code:\n            tapSound", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "\r\n            while (transactionIterator.hasNext()) {\r\n\r\n                Transaction t = transactionIterator.next();\r\n\r\n                printer.printOperation(t.getOperation());\r\n                printer.printPath(t.getPath());\r\n                printer.printEphermal(t", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "               if (query.queryType == RequestType.SELECT) {//classifyColumnsToDimAndMetrics\n                    Either<String, Tuple2<List<String>, List<String>>> dataSourceDescRes = coordinator.aboutDataSource(stmnt.dataSource, reqHeaders);", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "   encryption_algorithm=EncryptionAlgorithm(\n                                                    UsageEncryption.OSY,\n                                                    OperationMode.CBC,\n                                                    EncryptionAlgorithmCoded.TWOKEY3DES,\n                                                    HashAlgorithm(HashAlg", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                           env.combExpMaxRegNum = 0;\n                        }\n                    }\n                }\n            }\n        } // USE_CEC\n\n        if (Config.DEBUG_PARSE_TREE && Config.DEBUG_PARSE_TREE_RAW)", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "   url(r'^pipeline-job-template$', get_pipeline_job_template, name=\"ajax-pipeline-job-template\"),\n    url(r'^ajax-save-pipeline-config$', ajax_save_pipeline_config, name=\"ajax-", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "       self._storage_type = storage_type\n        return self\n\n\n#\n# DB COUNT RECORDS\n#\n# Counts the number of records in the database.\n#\n# Request: (database-name:string)\n# Response: (result:byte)\n#", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "   public <$Argument2> AndGivenTwoArguments<$SystemUnderTest, $Argument, $Argument2> andArgument(String description,\n            $Argument2 argument) {\n        preparation.recordGivenStep(functions.toCheckedSupplier(argument));\n        return new GivenTwo", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "     try {\n        return process.await(expectedExitCodes);\n      } catch (CommandFailureException e) {\n        throw new IosDeviceException(this, e);\n      }\n    }\n\n  /**\n   * Waits for a process to terminate and returns the result of", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\tif (null == textColor) {\n\t\t\ttextColor = Themer.getColor(contextRef.get(), R.attr.colorPrimary);\n\t\t}\n\t}\n\t\n\tprivate void setFontStyle() {Next line of code:\n\t\tif (null", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t\tMessage message = Message.parse(xml);\n\t\tAbstractEvent event = null;\n\t\tif (message instanceof ReceivedImageMessage) {\n\t\t\tReceivedImageMessage imageMessage = (ReceivedImageMessage) message;\n\t\t\tevent = new ReceivedImageMessageEvent(image", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "   if os.path.exists(os.path.join(file_path, '_info_')):\n        return\n    else:\n        os.makedirs(os.path.join(file_path, '_info_'))\n    # 获取 apk 文件的", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "   @channel_checks.raid_report_enabled()\n    async def cmd_raidcity(self, ctx, *city):\n        \"\"\"\n        **!raid-city city** - sets the city for the raid party\n\n        \"\"\"\n\n        city = await ctx.city()", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "       self.assertTrue(date_string_to_date(\"25/11/2015\"))\n        self.assertTrue(date_string_to_date(\"11/12/2012\"))\n        self.assertTrue(date_string_to_", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "       config_actor = ConfigActor(config_file)\n        config_actor.start()\n        gevent.sleep(1)\n\n        # startup session database\n        database_actor = DatabaseActor(999, delay_seconds=2)\n        database_actor.start", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                           ShareUtil.sharePicture(mActivity, picUrl);\n                            break;\n                        case 1:\n                            ShareUtil.shareText(mActivity, picture.getText_content().trim());\n                            break;\n                        case 2:\n                            Intent intent =", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\t\t\t\t\twrite_tm_filetype(\"mgh_%s\" % opts.tmifile[0],\n\t\t\t\t\t\t\timage_array = outdata,\n\t\t\t\t\t\t\tmasking_array = masking_array,\n\t\t", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "               ResponseSyncAdapter.class,\n                StreamsFragment.class,\n                SurveysFragment.class,\n                SurveysFragment.SurveyPromptLoader.class,\n                SurveyActivity.class,\n                SurveyPromptLoader.class,\n                PromptFragment.class,\n", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "               PubKeyAlgorithm.ECDH: ECDHSignature,\n                PubKeyAlgorithm.ECDSA: ECDSASignature,\n                PubKeyAlgorithm.ElGamal: ElGPriv,\n                PubKeyAlgorithm.ElGamalEncrypt:", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "   if self[0].value == 'true':\n        return self[0].evaluate(context)\n    elif self[0].value == 'false':\n        return not self[0].evaluate(context)\n    elif self[0].value == 'empty':\n        return self", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "     'no_members': Counter\n    }\n\n  def __init__(self, sink_provider, sink_role, sink_properties, sink_stack,\n               sink_name, sink_description, sink_version, sink_type,\n               sink_properties_override, sink_", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "       nc.send_message_with_protocol(protocol, 'hello world')\n        protocol.send_string.assert_called_once_with('11:hello world,')\n\n    def test_send_message_with_protocol_with_bad_protocol(self):\n", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "       assertEquals(\"query\", \"select * from t1\", qe.getQuery());\n        assertEquals(\"parameters\", new String[]{\"p1\", \"p2\"}, qe.getParameters().keySet().toArray(new String[0]));\n        assertEquals(\"out parameters\", new", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "       Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n    }\n\n    @Test\n    public void testExecutionCount() {\n        StatementExecution se = new StatementExecution();", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "               yield device.update(adr_datr=target)\n                yield device.update(adr_datr=device.adr_datr)\n                yield device.update(adr_datr=target)\n                yield device.update(adr_datr=device.adr_datr", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "                   function = FmllrRescoreFunction(args)\n                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                   ", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "       if (chat == null) {\n            chat = getChat();\n        }\n        if (chat == null) {\n            Log.e(getClass().getSimpleName(), \"Chat is null\");\n            return;\n        }\n        if (chat.getStatusChanged()", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "   parameter = DataElementGroupField(type=ParameterTwostepTAN6)\n\n\nclass HITANS7(HITANSBase):\nNext line of code:\n    parameter = DataElementGroupField(type=ParameterTwostepTAN7)\n\n\nclass H", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "           jd = self.img_handle.getJD()\n\n        else:\n\n            # Get time from config\n            jd = self.config.jd\n\n\n        # Add reference time to JSON file\n        json_dict['reference_time'] = jd\n\n\n", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "       if (mPublicRoomsListList == null) {\n            mPublicRoomsListList = new ArrayList<List<PublicRoom>>();\n        }\n        mPublicRoomsListList.clear();\n        mPublicRoomsListList.add(new ArrayList<PublicRoom>", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "       self.bingo_card_manager = BingoCardManager(self.dbi, self.bot)\n        self.bingo_card_writer = BingoCardWriter(self.dbi, self.bot)\n        self.bingo_data_generator = BingoDataGenerator", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "       chim_detect = ChimeraDetector(target_sequences,\n                                      recipe[\"target\"],\n                                      recipe[\"target_length\"],\n                                      recipe[\"target_length_min\"],\n                                      recipe[\"target_length_max\"],\n", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "       plugins.registerEvents(new BlockPlaceListener(this), this);\n        plugins.registerEvents(new InteractListener(this), this);\n        plugins.registerEvents(new SignChangeListener(this), this);\n    }\n\n    @Override\n    public void onDisable() {", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "                   startMiPush();\n                    stopHwPush();\n                    Log.e(MYTAG, \"使用MiPush推送\");\n                }\n                break;\n            case \"HWPush\":\n                if(shouldInit()) {Next line of code:", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "       registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<String>>(STRING_ARRAY));\n        registry.put((byte) (QUERY_EXP ^ RESPONSE_MASK), new", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "   public boolean dirty = false;\n    public boolean is_custom_risk = false;\n    public boolean is_nessus_compliance_finding = false;\n    public boolean is_highlighted = false;\n    public boolean is_import_tool_id_set = false;", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "       createBreakdownChartPanelSingle(\n                metric,\n                datasetGenerator,\n                panelsSingle);\n        createBreakdownChartPanelMulti(\n                metric,\n                datasetGenerator,\n                panelsMulti);\n        createMetricChartPanel(\n                metric,\n                dataset", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "       if (packet.isAckRequested()) {\n            AckRequest ackRequest = new AckRequest(packet, client);\n            ackManager.ack(ackRequest);\n        } else {\n            Namespace namespace = namespacesHub.get(packet.get", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "       lMS.addTrack(new VideoTrack(lMS, appRtcClient.videoConstraints()));\n      } else {\n        lMS.addTrack(new VideoTrack(lMS));\n      }\n      videoSource = new VideoSource(lMS);\n      videoSource.start();", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "           contentValues.put(JobStorage.COLUMN_BACKOFF_MS, -1L);\n            contentValues.put(JobStorage.COLUMN_BACKOFF_POLICY, JobRequest.BACKOFF_POLICY_NONE);\n            contentValues.", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "   private CheckBoxPreferenceHideScore preferenceHideScore;\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "   return obj\n\n\ndef init_snapshot_system(obj, basedir=None):\n    # a system object is needed in order to coopy work\n    if not obj:\n        raise Exception(CORE_LOG_PREFIX +\n                \"Must input a valid object if", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "\n    def determine_executable(self, desktop_file):\n        if desktop_file.desktop_file_type == 'x-scheme-handler-default':\n            return 'xdg-open'\n        elif desktop_file.desktop_file_type == 'x-desktop-", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "   return SMTHHelper.getInstance().wService.getAllBoards().flatMap(new Function<ResponseBody, Observable<Board>>() {\n      @Override public Observable<Board> apply(@NonNull ResponseBody responseBody) throws Exception {\n        try {\n          String response = SMTHHelper", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "       if (getActivity() != null) {\n            getActivity().getWindow().setSoftInputMode(\n                    WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);\n        }\n    }\n\n    @Override\n    public View", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "\t\tif (writeTML) {\r\n\t\t\tString tmlContainer = JUTPreferences.getTMLContainer();\r\n\t\t\tif (tmlContainer == null) {\r\n\t\t\t\ttmlContainer = \"test\";\r\n\t\t\t}\r\n\t\t\tString testProjectPostfix", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "       self.assertTrue(self.simulator_data_client.received_simulator_data_datagram)\n\nclass TestSimulatorDataFactory(TestCase):\n    def test_add_simulator_data_listener(self):\nNext line of code:\n        self.", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "           showResponse = true;\n        } else {\n            showResponse = false;\n        }\n        if (httpMessage.getRes().hasRequest()) {\n            isRequestEditor = true;\n        } else {\n            isRequestEditor = false;\n        }\n        if (http", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "   assert simple_table_status(description) == expected_status\n\n\n@pytest.mark.parametrize(\"table_status, gsi_status, expected_status\", [\n    (\"ACTIVE\", \"ACTIVE\", ready),\n    (\"ACTIVE\", None, ready),", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "   @loadfile()\n    def load(self, filething, known_frames=None, translate=True, v2_version=4,\n             load_v1=True):\n        \"\"\"Load tags from a filename.\n\n        Args:\n            filename (filething): filename", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "     visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r\n\r\n      return null;\r\n    }\r\n\r\n    visitProxOp(new VisitOrd3(n), query);\r\n\r\n    return null;\r\n  }\r\n\r", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "                   new EmbossTransformation(),\n                    new EdgeTransformation(),\n                    new InvertAlphaTransformation(),\n                    new InvertTransformation(),\n                    new MosaicTransformation(),\n                    new RGBAdjustTransformation(),\n                    new SharpenTrans", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "\n            # Parse the error\n            exception_class = self._decode_field( FIELD_STRING )\n            exception_message = self._decode_field( FIELD_STRING )\n\n            # Raise the exception\n            raise PyOrientCommandException(\n                exception_class, exception", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "   api = BMUNITSEARCH(args.apikey)\n\n    params = {\n        'FromSettlementDate': args.fromdate or date.today() - timedelta(days=1),\n        'ToSettlementDate': args.todate or args", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "\t\t\t\t\titem = new GalleryAlbum( proxy );\n\t\t\t} else {\n\t\t\t\titem = new GalleryImage( proxy );\n\t\t\t} // if-else\n\t\t\titems.add( item );\n\t\t} // for\n\n\t\treturn", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "   assert dump_key(engine, user) == user_key\n\n\ndef test_extract_key(engine):\n    user = User(id=\"foo\")\n    user_key = {\"id\": {\"S\": \"foo\"}}\nNext line of code:\n    assert extract_key", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "       new Status(\"Starting...\"),\n        new Percentage(100),\n        new Fraction(100),\n        new ProgressBar(100, BAR_EQUALS),\n        new Spinner(BAR_EQUALS),\n        new", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "\tpublic static Form form(Object resource, Object... fields) {\n\t\treturn new Form(resource);\n\t}\nNext line of code:\n\tpublic static Html html(Object resource, Object... fields) {\n\t\treturn new Html(resource);\n\t}\nNext line of code", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "           events.append(Event(e, self))\n\n        return events\n\n    def get_event(self, event_id):\n        data = self.call_api(\"events/%s\" % event_id)\n        return Event(data, self)\n\n    def list_", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "           Matcher<? super ParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    /**\n     * Matcher to check the given index in batch matches with given parameter matcher.\n     *\n    ", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "           applyWallpaper();\r\n        } else if (id == R.id.menu_properties) {\r\n            showProperties();\r\n        } else if (id == R.id.menu_delete) {\r\n            deleteWallpaper();\r\n        } else if (id == R.id.", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": " private static final Pattern BOOST_EXTRACTOR = Pattern\r\n      .compile(\"^(.*?)\\\\^(\\\\d+(?:\\\\.\\\\d+)?)$\");\r\n  private static final Pattern BOOST_EXTRACTOR = Pattern\r\n      .compile(\"^(.*?)\\\\^", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "\t\tif args.hdf5:\n\t\t\tif not os.path.isdir(args.out):\n\t\t\t\tprint \"Creating output folder {}\".format(args.out)\n\t\t\t\tos.mkdir(args.out)\n\t\t\tif", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "       self.beginning_datetime = filenameToDatetime(self.vid_path)\n\n        # If the beginning time is not found, try to read it from the file\n        if self.beginning_datetime is None:\n            self.beginning_datetime = self.vidinfo.", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "   p = exactpsf.FixedSSChebLinePSF(kfki=1.07, zslab=-29.3, alpha=1.17,\n            n2n1=0.98, sigkf=-0.33, zscale=", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\t\tPacketDispatcher.get().sendTo(new PacketFoodGroup(FoodGroupRegistry.getFoodGroup(FOOD_GROUP_STRING)), player);\n\t\tPacketDispatcher.get().sendTo(new PacketFoodGroup(FoodGroupRegistry.getFood", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "       comments = Comment.objects.filter(post=post)\n        comments_count = comments.count()\n        comments_list = chain(comments, comments.filter(deleted=False))\n        comments_list = comments_list.order_by('-created')\n        comments_list", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\t\t\t\t\tif (selectedCells.size() == 1) {\n\t\t\t\t\t\t\tif (selectedCells.iterator().next() instanceof ILayerCell) {\n\t\t\t\t\t\t\t\tif (selectedCells.iterator().next() instanceof ILayerCell)", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "       def keyclass_int(self, val):\n            self._keyclass = val\n\n    @keyclass.register(six.text_type)\n    def keyclass_str(self, val):\n        self._keyclass = val\n\n    @keyclass.register(six", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "       if is_processing_instruction_node(item):\n            yield item\n\n\n@method(function('comment', nargs=(0, 1), label='kind test'))\ndef select_comment_kind_test(self, context=None):\n    if context is None:\n", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "   puffles_as2_str = getAS2PuffleString(client, puffles)\n\r\ndef getAS2PuffleString(client, puffles):\r\n    puffles_as2_str = list()\r\n    for puffle in puffles", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "   I.set_image(im)\nNext line of code:\n    I.set_tile(tile)\nNext line of code:\n    I.set_params(P, H)\nNext line of code:\n    I.set_params(P, H, P", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "           manager = mp.Manager()\n            error_dict = manager.dict()\n            return_queue = manager.Queue()\n            stopped = Stopped()\n            procs = []\n            for i, args in enumerate(jobs):\n                function = compile_information_func(args)", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "   platepar.rotation_wrt_horizon = rotationWrtHorizon(platepar.az_centre, platepar.alt_centre, platepar.lat, \\\n        platepar.lon, platepar.JD, platepar.F_scale, platepar.", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "       contentValues.put(JobStorage.COLUMN_END_MS, 60_000L);Next line of code:\n        contentValues.put(JobStorage.COLUMN_BACKOFF_MS, 60_000L);Next line of code:\n", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "       FragmentObservable.getInstance().register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        FragmentObservable.getInstance().remove(this);\n    }\n\n    @Override\n    public void onDestroy() {\n        super", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "       model = Progress\n        fields = ['indicator', 'target', 'area', 'code']\n\n\nclass AreaTypeFilter(django_filters.FilterSet):\n    name = django_filters.CharFilter(lookup_expr='iexact')\n    description = django_filters.Char", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "           setBottomInfo();\n            setTopInfo();\n            setTopInfo();\n            setTopInfo();\n            setTopInfo();\n            setTopInfo();\n            setTopInfo();\n            setTopInfo();\n            setTopInfo();\n            setTopInfo();\n            setTopInfo", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "\n                return transport.connect(context, manager, true);\n            }\n        }).then(new Accept<Channel>() {\n            @Override\n            protected void onSuccess(final Channel channel) throws Exception {\n                LOGGER.debug(\"Reconnected to transport...\");\n\n                reconnecting", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "               new RegistrationParam(success, email, password, message));\n    }\n}\nyasme/src/main/java/de/fau/cs/mad/yasme/android/ui/fragments/RegisterFragment.java\npublic class RegisterFragment extends Fragment {\n", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "   private final RoadMap map;\n    private final Router router;\n    private final SpatialOperator spatial;\n    private final Cost cost;\n    private final TimePriority timePriority;\n    private final AtomicInteger k = new AtomicInteger(0);\n    private final Atomic", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "   private String[] urls;\n    private List<FilterType> filterTypes;\n    private List<FilterUrl> filterUrls;\n    private List<String> filterUrlsList;\n    private List<String> filterTypesList;\n    private List<String> filterTypesList2;", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": " assert isinstance(args.gps_sv[0].getMessage(), ZeroOneMessage)\n\n\ndef test_parameters_msgtype1():\n  '''\n  All One message test\n  '''\n  parser = prepareArgsParser()\n  params = [\n      '--gps", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "       for i in range(len(fills)):\n            self.svg.fill_polygon(fills[i], self.style.fill_rule)\n\n    def _render_fill(self):\n        fill = self.style.fill\n        tris = self.triangles", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "\t\t\t\tif (data.startsWith(COMPONENT)) {\n\t\t\t\t\ta = new AppData(data);\n\t\t\t\t\tapps.add(a);\n\t\t\t\t} else if (data.startsWith(SHORTCUT)) {\n\t", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "               if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {\n                    isAppSetNeed2Add = Action.isNeed2Add(layoutGuts, AppSettingsAction.class);\n                }\n                if (ClipBoardAction.isShow", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "       self.beg_alt = self.beg_vect[1]\n        self.end_alt = self.end_vect[1]\n\n        # Compute the great circle\n        self.gc = greatCircle(self.beg_alt, self.end_alt)", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(ctx.ID().getText());\n\t\tMMethod m = new MMethod(s);\n\t\tclassInFile.addMember(m);\n\t}\n\n\t@Override\n\tpublic void enterFunction(@NotNull Function", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "   /**\n     * Called when the visitor reaches a node that is a child of the current node.\n     * @return Determines whether the child node will be visited.\n     */\n    boolean visitChild(Node node);\n\n    /**\n     * Called when the visitor reaches a", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "   private SpecificationGenerator specificationGenerator;\n    private CodeGeneratorFactory codeGeneratorFactory;\n    private CodeGenerator codeGenerator;\n\n    private final AtomicReference<Swagger> runtimeCache = new AtomicReference<>();\n\n    public OpenAPIProcessor() {\n        super(OpenAPIProcessor.class", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "       bind(GerritCheckoutProvider.class).to(GerritCheckoutProvider.class);\n        bind(GerritHttpAuthDataProvider.class).to(GerritHttpAuthDataProvider.class);\n        bind(GerritRestModule.class).asEager", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "                   if (snapshots.get(i).getName().equals(zxid)) {\r\n                        snapFile = snapshots.get(i);\r\n                        break;\r\n                    }\r\n                    i--;\r\n                }\r\n            }\r\n\r\n            if (s", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "       if filter_type == FilterType.Date:\n            entries = [e for e in entries if e.date in query]\n        elif filter_type == FilterType.Amount:\n            entries = [e for e in entries if e.amount >= query]\n        elif filter_type ==", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "   ]\n    def __init__(self, **kwargs):\n        self.init(**kwargs)\n        self.init_layer()\n        self.init_element()\n        self.init_elementList()\n        self.init_dbg()\n        self.init_Reserv", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\t\t\t\t\t\t\treturn Observable.just(null);\n\t\t\t\t\t\t}\n\t\t\t\t\treturn searchFromQuery(query);\n\t\t\t\t})\n\t\t\t\t.subscribe(searchResults -> {\n\t\t\t\t\tif (searchResults ==", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "   pos = np.zeros(POS.shape)\n    pos[:, 0] = np.random.randint(0, 100, pos.shape[0])\n    pos[:, 1] = np.random.randint(0, 100,", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "       result, index = apply_fast_and(left.values, right.values,\n                                       left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.and_(left.values, right), left.index)", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "                   Request request = RequestFragment.sSelectedRequests.get(i);\r\n                    if (request == null) {\r\n                        mError = Extras.Error.ICON_REQUEST_NULL;\r\n                        return false;\r\n                    }\r\n\r\n                    if (request.", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "           instance, (int, float, Decimal, AbstractDateTime, Duration)\n        ) and not isinstance(instance, bool)\n\n    def __subclasscheck__(cls, subclass: type) -> bool:\n        if issubclass(subclass, bool):\n            return False\n", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "           return SearchMenuPage()\n        if pageletId == 'ShowsAzPage':\n            return ShowsAzPage()\n        if pageletId == 'RubricPage':\n            return RubricPage()\n        if pageletId == 'RubricsPage':\n            return Rub", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "               if pattern.datafile is not None:\n                    if not checkFileExistence(pattern.datafile):\n                        errmsg += \"Data file %s does not exist.\\n\"%(pattern.datafile)\n                        rvalue = False\n                        break\n\n            #", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "   serializer_class = PlanSerializer\n    filter_class = PlanFilter\n    ordering_fields = ('id', 'code', 'name', 'theme')\n\n\nclass ThemeViewSet(ModelViewSet):\n    queryset = Theme.objects.all()\n    serializer_", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "   private StarItemAdapter starItemAdapter;\n    private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private BookmarkItemAdapter bookmarkItemAdapter;\n    private List<BookmarkItem> bookmarkItemList = new ArrayList<BookmarkItem>();\n\n   ", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\tGenerationService generationService = new GenerationService(basePathDDI2FO, preprocessors, postprocessors);\n\t\t\n\t\tFile input = new File(basePathDDI2FO + \"/\" + \"2019-01-01-00-", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "                       user.setPassword(password);\n                        user.setDeviceId(deviceId);\n                        user.setDeviceProduct(deviceProduct);\n                        user.setDeviceRegId(regId);\n                        user.setDeviceRegId(regId);\n                        user.", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "   url(r'^$', PackagesSettingsView.as_view(), name=\"settings-packages\"),\n    url(r'^new$', staff_member_required(NewPackageView.as_view()),\n        name=\"package-new\"),\n    url(r'^view/", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": " encoder = GPSL1L2BitEncoder(NormalRateConfig)\n  assert isinstance(encoder, EncoderBase)\n  assert isinstance(encoder, TwoBandsBitEncoder)\n  assert encoder.bandIndexes[0] == NormalRateConfig.", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "   return tgAsDict[\"tierList\"][0][\"entries\"]\n\n\ndef run_read(fn):\n    \"\"\"\n    Mock read function and return the first tier's entry list\n\n    tg.save() mutates the textgrid's data, so the entry", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "                   procs.append(KaldiProcessWorker(function, return_queue, stopped))\n                    procs[-1].start()\n                    pbar.update(1)\n                for proc in procs:\n                    proc.join()\n                    if proc.return_", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "           dataset = UAV123(root_dir, version=version)\n            self._check_dataset(dataset)\n\n    def test_nfs(self):\n        root_dir = os.path.join(self.data_dir, 'NFS')\n        dataset =", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "   void add(FixTag tag);\n    void add(FixTag tag, Supplier<Boolean> validity);\n    void add(FixTag tag, Supplier<Boolean> validity, Supplier<String> validationMessage);\n    void add(FixTag tag, Supp", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "           yield self._iter(group=group, name='spike_samples')\n\n    def _iter(self, group=None, name=None):\n        for chunk_key in self.chunk_keys:\n            yield self.load(group=group, chunk_key=chunk_", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {\n\t\t\treturn getAnyQueryNodeExplanations(anyQueryNode);\n\t\t}\n\n\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRTermList", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\tprivate Validator validator;\n\t\n\tprivate SchemaValidator schemaValidator;\n\t\n\tprivate FolderCleaner folderCleaner;\n\t\n\tprivate File outputFolder;\n\t\n\tprivate File inputFolder;\n\t\n\tprivate File inputFolderTemp;\n\t\n", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "       registry.put((byte) (ADD_NOTIFICATION_LISTENER ^ RESPONSE_MASK), new MarshalledResponseHandler<Void>(VOID));\n        registry.put((byte) (ADD_NOTIFICATION_LISTENER ^ RESPONSE_", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "                       if (content.equals(\"\")) {\n                            continue;\n                        }\n                        if (content.equals(\"RT\")) {\n                            continue;\n                        }\n                        if (content.equals(\"RT @\")) {\n                            continue;\n                        }\n                ", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "\n        elif isinstance(descriptor, OperatorDescriptor):\n            lines.append('{}{}'.format(indent, descriptor))\n            lines.extend(self._render_descriptor_helper(descriptor.factor, indent + '.' * len(INDENT_CHARS)))\n", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "       help=\"network latency time [ms].\n        the minimum latency time is 0 ms.\n        valid units are either: {}.\n        e.g. tcset eth0 --delay 10ms\n        \"\"\".format(\n            \", \".join([\", \".join(", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "       return self.contacts\n\n    def get_contacts_by_phone_number(self):\n        return self.contacts.filter(phone_number=self.phone_number)\n\n    def get_contacts_by_group(self, group_name):\n       ", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "   pipeline.apply(\"Read live projects\",\n        Read.from(new CloudResourceManagerApiSource(org)));\n\n    // Convert live projects to GCPResourceState objects.\n    PCollection<GCPResource> liveResources =\n        liveProjects.apply(ParDo.named(\"Convert live", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "       self.generator = SimilarPathGenerator()\n\n    def test_get_tail_pattern(self):\n        self.assertEqual(self.generator.get_tail_pattern(\"http://example.com/\"), \"/\")\n        self.assertEqual(self.generator.get_tail_", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "       ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "       conditions.append(AndCondition(conditions_for(*operations[1:], column=column)))\n    elif \"or\" in operations:\nNext line of code:\n        conditions.append(OrCondition(conditions_for(*operations[1:], column=column)))\n   ", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "       assert get_square_idx(1, 1) == 1\n\n\nclass TestDutchNationalPartition(object):\n    \"\"\"\n    Question 6.1\n    \"\"\"\n\n    def test_book_example(self):\n        assert dutch_national_partition", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "\tprivate final ICompilationUnit testClass2;\n\n    private final ICompilationUnit testClass3;\n\n    private final ICompilationUnit testClass4;\n\n    private final ICompilationUnit testClass5;\n\n    private final ICompilationUnit testClass6;\n", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "     sink_properties,\n      global_properties)\n\n  def AsyncProcessRequest(self, sink_stack, msg, stream, headers):\n    self._varz.timeouts.Increment()\n    self.next_sink.AsyncProcessRequest(sink_stack, msg,", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "\tprivate boolean debug = false;\n\n\tprivate LapdfDocument document;\n\tprivate AbstractModelFactory modelFactory;\n\tprivate SpatialOrdering spatialOrdering;\n\tprivate PageImageOutlineRenderer pageImageOutlineRenderer;\n\tprivate JPedalExtractor jPedalExt", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "     var files = new ArrayList<Path>();\n      var file = new File(input.toFile().getParentFile(), input.getFileName().toString());\n      files.add(file);\n      return files;\n    );\n    var options = new ArrayList<String>();\n    options.add", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "       return RespostaSAT.analisar(retorno)\n\n    def enviar_dados_venda(self, dados_venda):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.enviar", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "       registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);\n        registerCallAction(new ToggleSpeakerAction(this), ToggleSpeakerAction.TOGGLE_SPEAKER_ACTION_", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "   if gopts.event_log:\n      git_trace2_event_log.Write(gopts.event_log)\n\n    if gopts.git_trace2_event_log:\n      git_trace2_event_log.Write(gopts.git_trace", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "   @Named(\"persistentData\")\n    PersistentData providePersistentData() {\n        return new PersistentData(app);\n    }\n\n    @Provides @Singleton\n    FileCache provideFileCache(App app, Ion ion) {\n        return new FileCache", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "       assertThat(ds, totalQueryCount(2));\n        assertThat(ds, totalQueryCount(2));\n    }\n\n    @Test\n    public void testTotalCountForOutOfIndex() {\n        List<QueryExecution> queryExecutions = new ArrayList<>();\n        queryExec", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "       return new SvnJavaChangeLogCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getCheckInCommand()\n    {\n        return new SvnJavaCheckInCommand();\n    }\n\n    /**\n     * {@", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "       verifiers.put(\"Local Files Exist\", new LocalFilesExistVerifierImpl());\n        verifiers.put(\"Remote Files Exist\", new RemoteFilesExistVerifierImpl());\n        verifiers.put(\"Valid Schema Name\", new ValidSchemaNameVerifierImpl());\n   ", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "           showProgress(false);\n        }\n    }\n\n    public void onPostLoginCancel() {\n        showProgress(false);\n    }\n\n    public void onPostLoginError(String error) {\n        showProgress(false);\n        Log.e(getClass().get", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "    * @throws DrupalFetchException if there's an error during the request.\n     */\n    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;\n\n    /**\n     * Logs out the currently logged in user (via user", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "       self.history.apply(text, first=True, last=True)\n        self.textInput.clear()\n        self.textInput.setFocus()\n        self.textInput.changeTheme(self.parent().theme)\n        self.textInput.changeCheckState()\n", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "           (r'/logout', LogOutHandler),\n            (r'/logout', LogOutHandler),\n            (r'/register', RegisterHandler),\n            (r'/register', RegisterHandler),\n            (r'/problem', ProblemHandler),\n            (r'/", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {\n\t\t\tList<MatchExplanation> explanations = getPrefixQueryNodeExplanations(prefixQueryNode);\n\t\t\treturn expandAtom(explan", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "               throw new ProtTestInternalException(\"Unknown criterion: \" + criterion);\n        }\n\n        return informationCriterion.getSelectionChunk();\n    }\n\n    /* (non-Javadoc)\n     * @see es.uvigo.darwin.pro", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "   return Pair(e1, e2, ty1, ty2)\n\n\n@with_info(st_term)\ndef fst(expr):\n    \"\"\"Turn a simply typed expression into a Fst.\n    \n    Arguments:\n    - `expr`: an expression", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "   void inject(BatteryStatusIndicator batteryStatusIndicator);\n    void inject(KioskModeHandler kioskModeHandler);\n    void inject(KioskSettingsFragment kioskSettingsFragment);\n    void inject(MainSettingsFragment mainSettingsFragment);\n    void inject(Playback", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "   private List<Expense> expenses;\n    private List<CreditPeriod> creditPeriods;\n    private List<CreditCard> creditCards;\n    private List<Payment> payments;\n    private List<ExpenseCategory> expenseCategories;\n    private", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "   response = Response(status_code=500)\n    response.content_type = None\n    with pytest.raises(ResponseValidationError):\n        handle_request(response, None)\n\n\ndef test_response_content_type_missing_raises_4xx", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "\t/**\n\t * \n\t */\n\tpublic void execute(String command) {\n\t\tif (atomicalConsole.isInputValid()) {\n\t\t\ttry {\n\t\t\t\tString[] tokens = command.split(\" \");\n\t\t\t\tif (tokens.length", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "   self.return_dict[\"decode_error_files\"].append(e)\n\n    def finished_processing(self) -> None:\n        \"\"\"\n        Signal that the worker has finished processing\n        \"\"\"\n        self.finished_processing.set()\n\n    def finished_adding", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "       PressureSensorResource,\n        \"/aircraft/sensors/pressure_sensor\",\n        resource_class_args=(sensors.pressure_sensor,)\n    )\n\n    api.add_resource(\n        PitotTubeResource,\n        \"/aircraft", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "       self.assertAlmostEqual(gps.airspeed, fdmexec.GetAuxiliary().GetVtrueKts())\n        self.assertAlmostEqual(gps.ground_speed, fdmexec.GetAuxiliary().GetVground())\n        self.", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "   '--hi, --help-instancename Show help message for specifying INSTANCENAME',\n    '--hi, --help-assoc-class Show help message for specifying ASSOC_CLASSNAME',\n    '--hi, --help-result-class Show help message for", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "\tprivate UserServices userServices;\n\t@Resource\n\tprivate SubmissionServices submissionServices;\n\t@Resource\n\tprivate NewsServices newsServices;\n\t@Resource\n\tprivate IPlogServices ipLogServices;\n\t@Resource\n\tprivate RuleServices ruleServices;\n\t@Resource\n\t", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "                           logError(title, t);\n                        }\n                        else{\n                            logError(title, t);\n                        }\n                    }\n                }\n            });\n        } finally {\n            setControlsEnabled(true);\n            operationInProgress = false;\n", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "                                      join_keyword=u'\\u0915\\u0930\\u0935\\u093e\\u0915\\u0930\\u0923')\n\n    def test_full_e2e_gu", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": " protected LocationUpdateRequester locationUpdateRequester;\n  protected LocationUpdateRequester locationUpdateRequester;\n  protected LocationUpdateRequester locationUpdateRequester;\n  protected LocationUpdateRequester locationUpdateRequester;\n  protected LocationUpdateRequester locationUpdateRequester;\n  protected LocationUpdate", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "   adb = getADB(DYNAMIC_TOOL_DIR)\n    print \"\\n[INFO] Connecting to VM/Device\"\n    try:\n        adb = getADB(DYNAMIC_TOOL_DIR)\n        subprocess.call", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "class RRC_header(Bit):\n    constructorList = [\n        Bit('protocolVersion', Pt=0, BitLen=1, Repr='hum', Dict=ProtocolVersion_dict),\n        Bit('messageType', Pt=0, BitLen=1, Repr='", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "\t\t\tif opts.vertexsrf:\n\t\t\t\tv_lh, faces_lh = nib.freesurfer.read_geometry(opts.vertexsrf[0])\n\t\t\t\tv_rh, faces_rh = nib.fre", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "       result.append(\" = \");\n    } else {\n      result.append(\" \").append(exp.getOperator());\n      acceptOrVisitValue(exp.getRhsValue(), baseVariableName);\n    }\n    result.append(CLOSE_BRACKET);\n", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "       cacheService.createCacheList(listName);\n      }\n    }\n  }\n\n  @FXML\n  public void deleteList(ActionEvent actionEvent) {\n    final Optional<String> listNameOption = Dialogs.\n        create().\n        title(resourceBundle.", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "       'self.Pt = Pt',\r\n        'self.PtFunc = PtFunc',\r\n        'self.Val = Val',\r\n        'self.BitLen = BitLen',\r\n        'self.BitLenFunc = BitLenFunc',\r\n        'self.Dict = D", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "                               TimeEntryOvertimeAggregation.class,\n                        \"overtime\",\n                        \"overtime\",\n                        \"overtime\",\n                        \"overtime\",\n                        \"overtime\",\n                        \"overtime\",\n                        \"overtime\",\n                ", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "           (True, PubKeyAlgorithm.DSA): DSAPub,\n            (True, PubKeyAlgorithm.DSAEncryptOrSign): DSAPub,\n            (True, PubKeyAlgorithm.DSAEncrypt): DSAPub,\n            (True,", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "                                 ExpansionInfo.BOARDTYPE, self._expansion_num)\n\n    @property\n    def expansion_type(self):\n        return ul.get_config(InfoType.EXPANSIONINFO, self._board_num,\n                             ExpansionInfo.", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "       self.key_size = read_u16le(f)\n\n        self.objects = {}\n        for i in range(count):\n            key = read_u16le(f)\n            self.objects[key] = AAFStrongRefSetProperty(self", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "           user = create_inactive_user(full_name, email)\n\n            # Send invitation email\n            subject = _('Invitation to join {0}').format(site.name)\n            html_body = render_to_string('accounts/email/invitation.", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "       draft = await self.fetch_draft_for_channel(ctx.guild.id, ctx.channel.id)\n        if draft:\n            print(draft.draft_content)\n            return await Utilities._send_embed(ctx.channel, \"\", f\"**", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "           ex = Hitbtc('BCC_BTC')\n        elif name == \"%s_BCC_ETH\" % constant.EX_HITBITC:\n            ex = Hitbtc('BCC_ETH')\n        elif name == \"%s_ETH_USD", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "           if item is not None:\n                self.add_xsd_type(item)\n                yield item\n\n    elif self.xsd_types is None:\n        for item in context.iter_self():\n            if item is not None:\n                yield item\n\n    else:\n", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "   DummySherpaServer server = new DummySherpaServer(10);\n    try {\n      Solutions solutions = helpExecuteQuery(server, 10);\n      Iterator<Map<String,RDFNode>> iter = solutions.iterator();\n      Assert.assert", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);\n\t\t}\n\t\tresult.setIndex(index);\n\t\tresult.setTextExpander(textExpander);\n\t\tresult.setDefaultField(getFileAttribute(basedir,", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "                   deviceMiToken = MiPushClient.getInstance().getToken();\n                    //stopGCM();\n                    //Log.e(MYTAG, \"使用MiPush推送\");\n                }\n                break;\n            default:\n                break;\n        }", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "   private final KadConfiguration config;\n    private final KadStatistician statistician;\n\n    private int connectAttempts = 0;\n\n    /**\n     * Constructor\n     *\n     * @param server The KadServer to connect to\n     * @param", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "               tablefmt = 'simple'\n            output.append(tabulate(rows, headers, tablefmt, numalign, stralign))\n        if show_header:\n            output.append(headers)\n    if status:\n        output.append(status)\n    return '\\n'.join", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "       return words_api(wordnik_api, token)\n\n\ndef create_app():\n    app = Flask(__name__)\n    create_routes(app)\n    return app\n\n\nif __name__ == '__main__':\n    app = create_app()", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "\tprivate Connector connector;\n\t@InjectNext line of code:\n\tprivate ConnectorIssues connectorIssues;\n\t@InjectNext line of code:\n\tprivate ConnectorPriority connectorPriority;\n\t@InjectNext line of code:\n", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "       self.assertIsInstance(handle, HANDLE)\n\n    def test_create_event_invalid_handle(self):\n        handle = CreateEvent(bManualReset=False, bInitialState=False)\nNext line of code:\n        self.assertIsInstance(handle", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "       this.deployments = new SpringDeployments(restTemplate, root, tasks);\n        this.vms = new SpringVms(restTemplate, root, tasks);\n        this.jobs = new SpringJobs(restTemplate, root, tasks);\n    }\n\n    @", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "                   return parserHolder.parse(roundEnv, currentAnnotatedElement, originatingElements);\n                })\n                .collect(Collectors.toList());\n        if (parsedPaths.isEmpty()) {\n            LOG.debug(\"No path found\");\n            return;\n        }", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "   protected PageParser pageParser;\n\n    protected BinaryDataHandler binaryDataHandler;\n\n    protected BinaryData binaryData;\n\n    protected ExecutorService executorService;\n\n    protected AtomicInteger pageFetcherThreads = new AtomicInteger(1);\n\n    protected Atomic", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "           actionPopupGroup.add(new AddKeyAction(mongoDocumentOperations));\n            actionPopupGroup.add(new AddValueAction(mongoDocumentOperations));\n            actionPopupGroup.add(new DeleteKeyAction(mongoDocumentOperations));\n        }\n\n", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "   private GuiButton addChannel;\n    private GuiButton removeChannel;\n    private GuiButton save;\n    private GuiButton cancel;\n    private GuiButton reset;\n    private GuiButton enable;\n    private GuiButton disable;\n    private GuiButton enable", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "               return new BtnQuickNotice();\n            case ConstantStr.FUNC_SCREEN_OFF_CODE:\n                return new BtnScreenOff();\n            case ConstantStr.FUNC_CLEAR_NOTIFICATION_CODE:\n                return new BtnClear", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "       Section section = toolkit.createSection(form.getForm(), SWT.NONE);\r\n        section.setText(Messages.ConfigurationWebModuleEditorPart_1);\r\n        Composite composite = toolkit.createComposite(section);\r\n        composite.setLayout(new GridLayout(", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "       type = Type()\n        type.format = TypeFormat()\n        type.format.pretty = \"pretty\"\n        type.format.advanced = \"advanced\"\n        type.format.pretty = \"pretty\"\n        type.format.advanced = \"ad", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "               new EventCommandHandler<>(SetStatusMessageCommand.class, SetStatusMessageEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetStartTimeCommand.class, SetStartTimeEvent::fromCommand, this::queueEvent));\n", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "       self._cluster_type = _cluster_type\n        return self\n\n    def set_cluster_location(self, _cluster_location):\n        self._cluster_location = _cluster_location\n        return self\n\n    def set_datasegment_name(self, _datas", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "   query = {\n        'api_key': settings.FLICKR_KEY[0],\n        'perms': 'write',\n        'frob': frob,\n    }\n    sign_flickr_query(query)\n    url = urlunparse(('", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t\t\t\t\tfcpMessage = new FCPPutFailedException(e);\n\t\t\t\t} catch(FCPProtocolException e) {\n\t\t\t\t\tLogger.error(this, \"Caugth FCPProtocolException while inserting message\", e);\n\t\t\t\t", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "       k -= 1\n      except IndexError:\n        break\n      if bytecode[k][2] in NO_FALL_THROUGH:\n        break\n      cond_stack_size -= 1\n    condition_bytecode.insert(0, bytecode[k])", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "   private static final String CREDIT_CARD_ID = \"credit_card_id\";\n    private static final String CREDIT_CARD_NAME = \"credit_card_name\";\n    private static final String CREDIT_CARD_NUMBER = \"credit_", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "all_platform_slugs.extend(MEMSOURCE_SLUGS)\nall_platform_slugs.extend(WEBLATE_SLUGS)\nall_platform_slugs.extend(RELSTREAM_SLUGS)\nall_platform_slugs.", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "\t\t\t\t\t}, e -> {\n\t\t\t\t\t\tAnimations.fadeFlip(listsPager, loadingProgress);\n\t\t\t\t\t\tSnackbar.show(this, R.string.error_connectionfailure);\n\t\t\t\t\t}, () ->", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "   def parse(self, ping_message: Sequence[str]) -> PingStats:\n        return self.__parser.parse(ping_message)\n\n    def _preprocess_parse_stats(\n        self, lines: Sequence[str]\n    ) -> Tuple[str", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "           //trying to get chat with chatId from server\r\n            try {\r\n                chat = DatabaseManager.INSTANCE.getChatDAO().get(chatId);\r\n                // Assuming that the messages are sorted by id\r\n                latestMessageOnDisplay = new AtomicLong(0);\r", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "\tpublic static void main(String[] args) {\n\t\tCubeshaft.init();\n\t\tCubeshaft.game = new Cubeshaft();\n\t\tCubeshaft.game.start();\n\t}\n\tpublic static void init() {\n\t\tCub", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "   account = account_for_facebook_user(fb_user, person=person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            # AGH\n            random_name = ''.join(choice(string", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "       assertThat(qe, is(statement()));\n        assertThat(qe, is(batchStatement()));\n        assertThat(qe, is(isBatchStatement()));\n        assertThat(qe, is(isStatement()));\n        assertThat(qe, is(isBatchStatement", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "     }\n    }\n  }\n\n  private void parseResponse(String responseTxt) {\n    if (responseTxt == null) {\n      return;\n    }\n\n    String error = null;\n    Document doc = null;\n    try {\n      doc = XML", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "   merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)\n\n    #######################################\n    #       output stage               #\n    #######################################\n    logger.info(\"Writing output\")\n   ", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "       GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n    api.add_resource(\n        PressureSensorResource,\n        \"/aircraft/sensors/", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "           fields={ key.capitalize():value for key, value in config.items()}, msg_color=discord.Color.blue(),\n            inline=True)\n\n        return await ctx.send(embed=embed)\n\n\n    @staticmethod\n    async def send_channel", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "\t\t\t\t\tif (level.getInstalledTs() == 0) {\n\t\t\t\t\t\tshowConfirm(\n\t\t\t\t\t\t\t\tgetString(R.string.install_levels),\n\t\t\t\t\t\t\t\tgetString(R.", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "   private final WeeklyCaptionProvider weeklyCaptionProvider;\n\n    /**\n     * The calendar's current view mode.\n     */\n    private CalendarViewMode currentViewMode;\n\n    /**\n     * The calendar's current view mode.\n     */\n    private Calendar", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "       this.vms = new SpringVms(restTemplate, root, tasks);\n    }\n\n    @Override\n    public Info info() {\n        return info;\n    }\n\n    @Override\n    public Releases releases() {\n        return releases;\n    }\n\n", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "   (signerId, keyId) -> Lists.newArrayList(new RsaSHA256Verifier(keyId));\n\n    locators = new VerifierProviders();\n    locators.setVerifierProvider(SignatureAlgorithm.HMAC_SHA256", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "   protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnViewAttachedToWindowListener easyOnViewAttachedToWindowListener;\n    protected EasyOnViewDetachedFromWindowListener easyOnViewDetachedFromWindowListener;\n    protected EasyOn", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "               } catch (FilesNotFoundException e) {\n                    assertTrue(true);\n                } catch (FilesException e) {\n                    fail(e.getMessage());\n                }\n            }\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "                   trackHistoryRepository.insert(trackHistoryEntry);\n                    dao.update(trackHistoryEntry);\n                }\n            });\n        }\n    }\n\n    @Override\n    public void foundTrackInfo(TrackInfo trackInfo) {\n        if (trackInfo != null)", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "   @NonConfigurationInstance\n    public static MainActivity instance;\n    @Bean\n    public AdHelper adHelper;\n    @ViewById\n    DrawerLayout drawerLayout;\n    @ViewById\n    ActionBar actionBar;\n    @ViewById\n    View contentView;\n    @ViewById\n   ", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "                       ((CandyBarMainActivity) mContext).selectPosition(3);\r\n                        break;\r\n                    case PREVIEW:\r\n                        ((CandyBarMainActivity) mContext).selectPosition(4);\r\n                        break;\r\n                    case SETTINGS:\r", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "       encoding = Default.ENCODING\n\n    if typepy.is_empty_sequence(proxy):\nNext line of code:\n        proxy = None\n\n    convert_configs = load_convert_config(\n        logger, ctx.obj[Context.CONVERT_CONFIG", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "       return None\n\n    def _getPlaylistItem(self, item):\n        \"\"\" Match an item to a playlist item and return the item. \"\"\"\n        for _item in self.items():\n            if _item.ratingKey == item.ratingKey:\n                return _item\n", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "       self.assertRaises(TypeError, _environment_to_string, \"a=b\")\n\n    def test_type_check_for_environment_value(self):\nNext line of code:\n        self.assertRaises(TypeError, _environment_to_", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "   if gopts.interactive:\n      if gopts.pager:\n        pager = RunPager(cmd.client.repoConfig.pager)\n        pager.Start()\n      else:\n        pager = None\n      try:\n        result = cmd.Run(", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "               // 执行成功，则执行任务监听器\n                for (RunnerTaskListener runnerTaskListener : runnerListenerList) {\n                    runnerTaskListener.onSuccess(taskData);\n                }\n            } catch (Exception e)", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "       self.assertTrue(r.reject_set.issubset(set([404])))\n\n    @async_test()\n    async def test_reject_404(self):\n        r = RejectStatusCode()\nNext line of code:\n       ", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "       //用户的性别\n        stuSex = split[2];\n        //用户的手机号\n        stuPhone = split[3];\n        //用户的邮箱\n        stuEmail = split[4];\n        //", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "       self.__device = device\n        self.__ifb_device = None\n        self.__logger = logger\n        self.__tc_command_output = tc_command_output\n        self.__export_path = export_path\n        self.__is_parse_filter_id = is_", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "           state[\"inventory\"] = inv\n        except AttributeError:\n            pass\n\n    def add_location_property(self, state: Dict[str, Any], obj: MudObject) -> None:\n        try:\n            loc = obj.location     # type: ignore\n", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": "  */\r\n  public Query visit(BasicSearch n, Query query) {\r\n    List<Occur> occurs = null;\r\n\r\n    if (n.f0.tokenImage.length() == 2) {\r\n      occurs = rfOpToOccur.get(n.f", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t\tthis.cleaningFolder = false;\n\t\tthis.surveyName = null;\n\t}\n\n\t/**\n\t * @param pipelineGenerator\n\t * @param valorizatorParameters\n\t * @param valid", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "       try {\r\n            decoder = DataDecoder.valueOf(dataDecoder);\r\n        } catch (IllegalArgumentException ex) {\r\n            print.append(\"Invalid data decoder: \").append(dataDecoder).append(\"\\n\");\r\n            print.append(\"Available data decoders", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "       except UncertainTimeError:\n            log.error(\"Sorry, your clock is out by more than 5 secs. Switzerland isn't going to work!\")\n            sys.exit(1)\n\n    def quit(self):\n        \"Shut down the client\"\n       ", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "       cursorById.close();\n\n        // Test the basic content provider query\n        Cursor movieCursor = mContext.getContentResolver().query(\n                MovieColumns.CONTENT_URI,\n                null,\n                null,\n                null,\n                null\n        );\n\n        //", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "       DocumentDialog(self, FraisGardeModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n\n    def EvtGenerationContrat(self, _):\n        DocumentDialog(self, FraisGardeModifications(self.inscrit", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "       self.assertEqual(node_children(document), [])\nNext line of code:\n        self.assertEqual(node_children(document, with_root=True), [])\nNext line of code:\n        self.assertEqual(node_children(document, with_root=", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\t\tsetContentView(R.layout.activity_mapview);\r\n\t\tmapView = (MapView) findViewById(R.id.mapView);\r\n\t\tmapView.setBuiltInZoomControls(true);\r\n\t\tmapView.setSatellite(false);\r\n\t", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "                   mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                   ", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "           self.switch_configuration)\n\n    def get_netconf_protocol(self):\n        return \"netconf\"\n\n    @staticmethod\n    def get_default_ports():\n        return [\n            Port(\"FastEthernet0/1\"),\n            Port(\"F", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": " assert isinstance(config, LowRateConfig)\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('normal_rate')\nNext line of code:\n  assert isinstance(config, NormalRateConfig)", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "       return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)\n\n    def consultar_status_operacional(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "   calculate_dict = get_prop_samples(desired_data, constituents)\n\n    calculate_dict = get_prop_samples(desired_data, constituents)\n    calculate_dict = get_prop_samples(desired_data, constituents)\n    calculate_", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "   api.add_resource(ForcesResource, \"/fdm/forces\",\n                     resource_class_args=(fdm.fdmexec,))\n\nNext line of code:\n    api.add_resource(InitialConditionResource, \"/fdm/initial_condition\",\n                ", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "   def get_word_frequency(self) -> Dict[str, float]:\n        \"\"\"\n        Calculate the relative word frequency across all the texts in the corpus\n\n        Returns\n        -------\n        dict[str, float]\n            Dictionary of words and their relative frequencies\n", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "   public static final String TextBlockObject = \"String\";\n\n    private static final String EXTRA_CAMERA_FACING = \"cameraFacing\";\n    private static final String EXTRA_CAMERA_FACING_BACK = \"cameraFacingBack", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "\tpublic final NetUtil net = new NetUtil();\n\tpublic final TimeUtil time = new TimeUtil();\n\tpublic final StringUtil str = new StringUtil();\n\n\tprivate Util() {\n\t}\n\n\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "       return mongoManager.getServerConfigurations();\n    }\n\n    private MongoTree createTree() {\n        return new MongoTree(mongoManager, notifier);\n    }\n\n    private void installActions() {\n        ActionGroup actionGroup = new DefaultActionGroup();\n       ", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\t\t// H1(state.title, state.title);\n\t\t// Input(state.title, state.title);\n\t\t// Input(state.title, state.title);\n\t\t// Input(state.title, state.title);\n\t\t// Input(state.", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "               if(output != null) {\n                    if(SAVE_FILE_TO_STORAGE) {\n                        saveImage(output);\n                    }\n                    else {\n                        if(RETURN_DATA_AS_BYTE_ARRAY) {\n", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "\n    @Override\n    public void onResume() {\n        super.onResume();\n        if (mFastScroller != null) {\n            mFastScroller.onResume();\n        }\n    }\n\n    @Override\n    public void onPause", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "   query = Search(\n        engine=engine, model=model, index=index, key=key,\n        filter=None, projection=\"all\", consistent=True, forward=False)\n    query.mode = \"query\"\n    query.prepare()\n    query.next()\n   ", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "           GCActivitySet gcActivitySet,GCActivity gcActivity) {\n        dataset.addGCActivity(gcActivity);\n    }\n\n    public void gcActivityNameAdded(\n            GCTrace gcTrace,\n            int id,\n            String gcActivityName)", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "           '/properties':                  RestAppPropertys\n\n        }\n\n        # Setup the API\n        for r in self.resources:\n            self.api.add_resource(self.resources[r], r)\n\n        # Setup the API version\n        self.api", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "       self._df_manager.set_directory(directory)\n\n        self._tree_view = tree_view\n        self._settings_ini = settings_ini\n        self._settings_ini.set_safe('GENERAL', 'ROOT_DIRECTORY', directory)\n        self", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "       MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE\n        )\n    )\n    group.add_argument(\n        \"--reordering\",\n        dest=\"reordering_rate\",\n        default=0,\n", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "   private final static Map<Channel, ChannelStatus> CHANNELS = Maps.newHashMap();\n\n    private final TabbyChat chat;\n    private final GuiNewChatTC newChat;\n    private final ILayout layout;\n    private final ChannelStatus status;\n", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "        * @param event\n         *            The event that triggered the click\n         */\n        void onDateClick(Date date, ContextMenuEvent event);\n    }\n\n    /**\n     * Listener interface for listening to event click items\n     */\n    public interface DateLongClickListener {\n", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "       self._db_type = db_type\n        return self\n\n    def set_db_type(self, db_type):\n        self._db_type = db_type\n        return self\n\n    def set_db_type(self, db_type):\n        self", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "           Namespace namespace = namespacesHub.get(packet.getNsp());\n            namespace.onUpgrade(client);\n            break;\n        }\n\n        case MESSAGE: {\n            Namespace namespace = namespacesHub.get(packet.getNsp());\n", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "   private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\n\n    private ContentItemAdapter contentItemAdapter;\n    private List", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "\t\tPreprocessor[] preprocessors = setPreProcessors(pipeline.getPreProcessing());\n\t\tLOGGER.info(\"PreProcessing : \" + Arrays.toString(preprocessors));\n\t\tPreProcessor[] postProcessors = setPostProcessors(pipeline.get", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "   PCollection<KV<List<String>, String>> liveProjects =\n        pipeline.apply(\"Read live data\", Read.from(new LiveProjectSource(org)));\n    // Convert files to GCPResourceState objects.\n    PCollection<KV<GCPResource, GCPResource", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "       expiry = Column(Timestamp, ttl=True)\n        new = Column(Timestamp, stream=True)\n        old = Column(Timestamp, stream=True)\n\n    return MyModel\n\n\n@pytest.fixture\ndef model_with_stream(model):\n   ", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "               self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,\n                                                           dim, vocab, lookup,\n                                                           cache=self._cache)\n            elif def_reader == 'mean_pool_com", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "   private boolean _isConnected;\n    // Guarded by _lockObject.\n    private boolean _isTyping;\n    // Guarded by _lockObject.\n    private boolean _isMuted;\n    // Guarded by _lockObject.\n    private boolean _isMuting", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "   private int videoQuality;\n    private int videoType;\n    private int videoPosition;\n    private int videoPosition2;\n    private int videoPosition3;\n    private int videoPosition4;\n    private int videoPosition5;\n    private int videoPosition6;\n    private", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "   RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInUpRight(RotateInUpRight.class),\n    RotateOut(RotateOut.class),\n    RotateOut", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "           form.instance.user = self.object\n        return super(UserBase, self).get(request, *args, **kwargs)\n\n    def get_form_class(self):\n        if self.object:\n            return UserFormEdicion\n        else:\n            return User", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "\n    public static FogDescriptor convert(Fog fog) {\n        FogDescriptor descriptor = new FogDescriptor();\n        descriptor.setColor(fog.getColor());\n        descriptor.setDensity(fog.getDensity());\n        descriptor.setStart", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\tpublic void close()\n\t{\n\t\tif(this.handle != null)\n\t\t{\n\t\t\tthis.handle.close();\n\t\t\tthis.handle = null;\n\t\t}\n\t\tif(this.matrixValues != null)\n\t\t{\n", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "   ActorMoviesComponent plus(ActorMoviesModule actorMoviesModule);\n    ActorDetailsComponent plus(ActorInfoModule actorInfoModule);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\t\t\t\tview.initProgressView(vals);\n\t\t} catch (final SocketViewException e) {\n\t\t\tthrow new IllegalStateException(e);\n\t\t}\n\t}\n\n\t/**\n\t * Running the benchmark and collecting the results\n\t", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "   def get_queryset(self):\n        return self.inventory_manager.get_queryset()\n\n\nclass DashboardView(ManagersMixin, TemplateView):\n    \"\"\"\n    Dashboard View\n    \"\"\"\n    template_name = 'dashboard/", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\tlogManager.logInfo(this,\n\t\t\t\t\t\"Building a wrapper from the given city: \" + city);\n\t\t\treturn activateLoginIfRequested(createMostSuitableWrapper(\n\t\t\t\t\tcity.getDiscoveryUrl", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "       if request.method == \"POST\":\n            form = PlanillaDeRelevamientoForm(request.POST, user=user)\n            if form.is_valid():\n                form.save()\n                messages.success(request, 'La planilla de relevamiento fue creada con éx", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "     self._cstr = root\n    else:\n      self._cstr = root.children[0]\n\n  def __repr__(self):\n    return 'Constraint(%s)' % repr(self.tree)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": " private ActionSupportHandler<StartRecordingAction> startRecordingActionSupportHandler = new ActionSupportHandler<StartRecordingAction>(StartRecordingAction.class);\n  private ActionSupportHandler<MessageAction>        messageActionSupportHandler        = new ActionSupportHandler<MessageAction>(MessageAction.class", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "   assert_array_equal(fold([MIN_HASH_VALUE], 1024), [1023])\n    assert_array_equal(fold([MIN_HASH_VALUE], 1234567890), [123456", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "   return result\n\n\n@method(function('format-number', nargs=(2, 3),\n                 sequence_types=('xs:double?', 'xs:string', 'xs:string?', 'xs:string')))\ndef evaluate_format_number_function(self,", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "\t\t\tif model_item is None:\n\t\t\t\treturn default_flags\n\t\t\telse:\n\t\t\t\treturn default_flags\n\t\texcept Exception as e:\n\t\t\tprint(\"DocumentModel::flags\")\n\t\t\tprint(str(e))\n", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "       array.items = [object1, object2, object3]\n\n        response = Hydrator(version1, versions, []).hydrate_object(object_dto, object1)\n        response = Hydrator(version2, versions, []).hyd", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "         PipeBundle pipeBundle = new PipeBundle(catBytes, 0, catBytes.length);\n          PipeReader pipeReader = new PipeReader(pipeBundle, clientConfig);\n          FASTDecoder decoder = new FASTDecoder(pipeReader);\n          FAST", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": " to_map_and_back(AFO, AmplitudePoly(AmplitudeBase.UNITS_AMPLITUDE, (1, )))\n  to_map_and_back(AFO, AmplitudePoly(AmplitudeBase.UNIT", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "               containsString(\"\\\"_source\\\":{\\\"@timestamp\\\":\\\"2019-03-19T11:00:00.000Z\\\"\"));\n    }\n\n    @Test\n    public void storeWithoutId() throws Exception {\n        Collection<", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "           (True, PubKeyAlgorithm.FormerlyElGamalEncrypt): ElGPub,\n            (True, PubKeyAlgorithm.FormerlyElGamalSign): ElGPub,\n            (True, PubKeyAlgorithm.FormerlyElGamalEnc", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\n\t\tJPEParserManager.getInstance().registerJPEParser(new CSVParser());\n\n\t\tJPEParserManager.getInstance().registerJPEParser(new KMLParser());\n\n\t", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "                       res = Schema.search(\n                            new ExtMap().mput(Schema.InvokeKeys.DATA_SOURCE, context.get(Schema.InvokeKeys.DATA_SOURCE))\n                            .mput(Schema.InvokeKeys.ENTITY, context.get(Schema.", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "   url(r'^users/list/$', users_list, name='users-list'),\n    url(r'^users/new/$', new_user, name='new-user'),\n    url(r'^users/edit/(?P<pk>[-\\w]+)/$", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "                           }\n                        }\n                    }\n                });\n                dialogFragment.show(getFragmentManager(), \"play_session_settings\");\n            }\n        }\n    }\n\n    private void startLearnActivity() {\n        if (stack != null) {\n           ", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "   private DropDownMenu dropDownMenu;\n    private CookBookAdapter cookBookAdapter;\n    private DropMenuAdapter dropMenuAdapter;\n    private Handler handler;\n    private int page = 1;\n    private int pageSize = 10;\n    private int totalPage = ", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "       obj.updateBuffImg()\n        obj.updateBlockLabel()\n        obj.updateBlockWidget()\n        obj.updateComment()\n        obj.updateSocketTags()\n        obj.updateSocketLabels()\n        obj.updateSocketConnections()\n        obj.updateSocketConne", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "       f = XDA(XorDiff(d1), XorDiff(d2))\n        beta = XorDiff(d3)\n        i, j = self._find_preimage(f, beta)\n        assert i == d1\n        assert j == d3\n\n", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, Node newFirst, Node newSecond);\n\t}\n\t\n\tprivate static class FlattenTransformer implements NodeTransformer {\n\t\tpublic Node transformConstant(ConstantNode node) {\n\t\t\t", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\tcommands.add(new CommandList());\n\t\t\n\t\t// Register the commands\n\t\tfor (BaseCommand command : commands) {\n\t\t\tgetCommand(\"ancientgates\").setExecutor(command);\n\t\t}\n\t\t\n\t\t// Register the listeners", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "       String challenge = PacketParserUtils.parseContentDepth(doc, 1);\n        String challengeType = doc.elementText(\"type\");\n        String challengeMethod = doc.elementText(\"method\");\n        String challengeResponse = doc.elementText(\"response\");\n        if (challenge", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "\n\nclass TestCipher(unittest.TestCase):\n    def setUp(self):\n        self.cipher = HightCipher(16)\n        self.cipher.set_rounds(16)\n        self.cipher.set_key_", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "   private SongListAdapter mAdapter;\n\n    private Toolbar mToolbar;\n    private FastScroller mFastScroller;\n\n    private boolean mShowToolbar;\n    private boolean mShowFastScroller;\n\n    private boolean mIsPlaying;\n\n   ", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "           mSelectedEffect = effect;\n            mSelectedEffect.addListener(this);\n            if (mSelectedEffect instanceof ImmersiveEffect) {\n                if (mImmersiveSensorNavigation == null) {\n                    mImmersiveSensorNavigation = new ImmersiveSensor", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "       Bit('ESM_Cause', ReprName='ESM Cause', Pt=4, BitLen=4,\n            Dict=ESMCause_dict, Repr='hum'),\n        Bit('ESM_Info_Request', ReprName='ESM Information Request',", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "           mAlbumListAdapter.notifyDataSetChanged();\n        }\n    };\n\n    private PlaylistPicker.OnPlaylistSelectedListener mOnPlaylistSelectedListener = new PlaylistPicker.OnPlaylistSelectedListener() {\n        @Override\n        public void onPlaylistSelected(Playlist", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "   self.log_debug(f\"    Found {len(exts.lab_files)} .lab files\")\n    self.log_debug(f\"    Found {len(exts.textgrid_files)} .TextGrid files\")\n    if not use_audio_directory:\n", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\t\t@Override\n\t\tpublic boolean addUser(String user) {\n\t\t\treturn UserManagement.addUser(user);\n\t\t}\n\n\t@POST\n\t@Path(\"adduser/{user}/{password}\")\n\t@Produces(\"application/json\")\n\t@", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "   Observable<ApiInfo> apiInfo(@Query(Constants.KEY) String apiKey);\n\n    /**\n     * Returns information about the API plan belonging to the given API key.\n     *\n     * @param apiKey account api key\n     */\n    @GET(\"api-info\")", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "   @Override\n    public void visit(LogMessage message) {\n      if (message instanceof FailureLogMessage) {\n        FailureLogMessage failureLogMessage = (FailureLogMessage) message;\n        vmOptionsBuilder.put(failureLogMessage.stackTrace());\n      } else {", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "   \"\"\"\n    \"\"\"\n    assert erb(freq, Hz=bandwidth) == bandwidth\n\n\nclass TestGammatone(object):\n\n  @p((\"freq\", \"bandwidth\"),\n     [(1000, 132.63", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "           offset += len(dataset)\n\n    if is_undefined_length:\n        # Read the next dataset, which will be the last one in the sequence\n        dataset = read_sequence_item(fp, is_implicit_VR, is_little_endian,\n                ", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "   for (ICommentProcessor commentProcessor : this.commentProcessors) {\n      try {\n        if (commentProcessor.getClass().equals(proxyBuilder.getClass())) {\n          continue;\n        }\n        if (commentProcessor.getClass().isAssignableFrom(proxyBuilder", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "   protected void loadData(final int page) {\n        if (getActivity() == null) {\n            return;\n        }\n        loadingStarted();\n        final AbstractRavelryGetRequest<PatternsResult> request = getRequest(page);\n        spiceManager.execute(", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "   def flags_int(self, val):\n        self._flags = val\n\n    @flags.register(bytearray)\n    def flags_bytearray(self, val):\n        self._flags = self.int_to_bytes(val)\n\n    @flags.register(", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "       self.textInput.setText(serverMsg)\n        self.textInput.setFocus()\n        self.textInput.returnPressed.connect(self.sentMessage)\n        self.textInput.clear()\n        self.textInput.setFocus()\n        self.textInput.", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "\ndef check_string(arg, type_, env):\n    arg = check(arg, env)\n    with env.errors.location(arg.location):\n        unify(arg.__type__, type_)\n    return arg\n\n\ndef check_int(arg, type_, env", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "   if isinstance(value, GregorianMonthDay):\n        return value\n\n    try:\n        if isinstance(value, UntypedAtomic):\n            return GregorianMonthDay.fromstring(value.value)\n        elif isinstance(value, (Date1", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "   if features is None:\n        features = {}\n\nNext line of code:\n    if not isinstance(features, dict):\n        raise TypeError(\"features must be a dict\")\n\nNext line of code:\n    if not isinstance(aicc_feature_factors, dict", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "\n    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,\n            FsmPlayer fsmPlayer, AdMediaModel adMedia) {\n\n        if (isNull(fsmPlayer)) {\n            return;\n        }\n\n", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "           PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type == 0) {\r\n            TemperatureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 8 || type ==", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "   Call<SuggestResponse> getSuggest(@QueryMap Map<String, String> serviceIds,\n                                     @Query(\"q\") @NonNull String query,\n                                     @Query(\"limit\") @IntRange(from = 1, to = 50) Integer", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "       return Stream(self, model, position)\n\n    def delete(self, *objs, condition=None):\n        \"\"\"Delete one or more objects.\n\n        :param objs: objects to delete.\n        :param condition: only perform each delete if this condition holds.\n       ", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "       self.log.info(\"confusion matrix:\")\n        self.log.info(confusion_matrix)\n        self.log.info(\"confusion matrix:\")\n        self.log.info(confusion_matrix)\n        self.log.info(\"confusion matrix:\")", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "\tprivate SubmissionServices submissionServices;\n\t@Resource\n\tprivate ChallengeServices challengeServices;\n\t@Resource\n\tprivate CategoryServices categoryServices;\n\t@Resource\n\tprivate CountryServices countryServices;\n\t@Resource\n\tprivate BannedIpServices bannedIpServices;\n\t", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "   def __init__(self, command_text):\n        self.command_text = command_text\n        self.retries = None\n\n    def __str__(self):\n        return to_str(self.__unicode__())\n\n    def __unicode__(self):\n       ", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "   def decoder(self) -> FeedPreviousRNN:\n        \"\"\"\n        Creates the decoder RNN.\n\n        The decoder RNN receives the windowed frequency vectors as input, and is initialized with zero initial states.\n\n        Returns\n        -------\n        Fe", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "for engine in TRANSPLATFORM_ENGINES:\n    for relstream in RELSTREAM_SLUGS:\n        all_platform_slugs.append(engine + relstream)\n\nall_platform_slugs = tuple(all_platform_slugs", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "   @Override\n    public boolean add(SelectorGroupNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SelectorNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SelectorSegmentNode", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "\tpublic static H1 h1(Attribute... attributes) {\n\t\treturn new H1(attributes);\n\t}\nNext line of code:\n\tpublic static H2 h2(Attribute... attributes) {\n\t\treturn new H2(attributes);\n\t}\nNext line of code", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "       final int numberOfRows = benchRes.getNumberOfResults();\n        final int numberOfMeters = benchRes.getNumberOfMeters();\n        final int numberOfMethods = benchRes.getNumberOfMethods();\n        final int numberOfClasses = benchRes.", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "     for edge in self._graph.edges(node):\n        visitor.visit(edge)\n      return visitor.edges\n\n    def get_parent_loop_edges(node):\n      class BwdEdges(EdgeVisitor):\n        def __init__(self):", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.treeFile);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tSystem.err.println(\"Unknown tree type\");\n\t\t\t\t", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "\ndef parse_datetime_picture(picture: str) -> datetime.datetime:\n    \"\"\"\n    Parses a datetime picture.\n\n    :param picture: the datetime picture to parse.\n    :return: the parsed datetime.\n    \"\"\"\n    if not picture:\n        return None", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "                   else if (Event.EVENT_TYPE_STATE_ROOM_MEMBER.equals(event.type)) {\n                        Log.e(LOG_TAG, \"Updating room member.\");\n                        RoomState roomState = JsonUtils.toRoomState(event.content", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlInsertFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();\n\t\n\tprivate DDI2FOGenerator ddi2foGenerator = new DDI2FOGenerator();\n\t\n\t", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "       DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()\n\n    def OnGenerationReleveSIEJ(self, _):\n        site = self.GetSelectedSite()\n        annee = self.releves_", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "           H += dot(crossmat(c - p), m * H_trans) + dot(I, H_rot)\n        return H\n\n    def compute_angular_momentum_jacobian_hessian(self, p):\n        \"\"\"\n        Returns the Jacob", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "       if (queuedProjectResult == null) {\n            return;\n        }\n        if (queuedProjectResult.queuedProject == null) {\n            return;\n        }\n        if (queuedProjectResult.queuedProject.pattern == null) {\n            return;\n", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "               new VirtualSetCommand(),\n                new VirtualRemoveCommand(),\n                new VirtualPayCommand(),\n                new PayVirtualCommand(),\n                new VirtualAddCommand(),\n                new VirtualBalanceCommand(),\n                new VirtualEconCommand(),\n                new VirtualSetCommand(),\n                new VirtualRemoveCommand(),", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "       _log.info('Initializing a %s prior for the parameters.', prior['name'])\n        _log.info('Initializing a %s prior for the parameters.', prior.name)\n        _log.info('Initializing a %s prior for the parameters.', prior['name", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "     return Const.fromValue(arg)\n    elif op == LOAD_ATTR:\n      return Ref.fromValue(arg)\n    elif op == LOAD_NAME:\n      return Ref.fromValue(arg)\n    elif op == LOAD_FAST:\n      return", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "\tprivate final Physics physics;\n\tprivate final ControllerPlayer player;\n\tprivate final Controller controller;\n\tprivate final ControllerListener controllerListener;\n\tprivate final ControllerListener controllerListener2;\n\tprivate final ControllerListener controllerListener3;\n\tprivate final ControllerListener controllerListener4;\n\tprivate final", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "                   ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMP:\n                    TempSensorView tview", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "\tpublic SQLBatch(Class<T> rootClass, ISchema schema) {\n\t\tsuper();\n\t\tthis.schema = schema;\n\t}\nNext line of code:\n\tpublic SQLBatch(Class<T> rootClass, ISchema schema, boolean isValue) {\n\t", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "       if app_info['packagename'] == 'com.android.settings':\n            # 如果是 Settings 应用，则不进行动态分析\n            return\n        \n        # 如果是未签名的错误，则", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "    */\n    Genotype parseGenotypes(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return genotypes.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into genot", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "               Symbol.typed(bar_type, 'bar'),\n            ]),\n            Symbol.typed(bar_type, 'bar'),\n            Symbol.typed(bar_type, 'baz'),\n        ]),\n        {'inc': inc_type},\n    )\n\n\n", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "       PreparedExecution pe = ds.getFirstPrepared();\n\n        assertThat(pe, success());\n        assertThat(pe, failure());\n\n        assertThat(pe, prepared());\n        assertThat(pe, batchPrepared());\n        assertThat(pe, prepared", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "\t\t\t\tself._properties_dock.set_item(selection[0])\n\t\t\t\tself._properties_dock.set_item(selection[0])\n\t\t\t\tself._properties_dock.set_item(selection[0])\n\t\t\t\t", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "                           return new NotFoundException(cause);\n                        default:\n                            return new ApiException(cause);\n                    }\n                }\n                return new ApiException(cause);\n            }\n        };\n        _config = config;\n    }\n\n    /**", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r\n\t\tregisterRenderer(String.class, new DefaultStringRenderer());\r\n\t\tregisterRenderer(Locale.class, new DefaultLocaleRenderer());\r\n\t\tregisterRenderer(Token.class, new DefaultToken", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t\tlabelFactory = new CapitalizeFacetLabelFactory(labelFactory);\n\t\t}\n\t\treturn labelFactory;\n\t}\n\t\n\tprivate static final FacetSubQueryType getFacetSubQueryType(SearchConfig search, Element elt) {\n\t\t", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "   url(r'^(?P<pipeline_id>[\\w\\-\\+]+)/(?P<release_slug>[\\w\\-\\+]+)$', PipelineDetailView.as_view(),\n        name=\"pipeline-detail\"),\n    url(r'^(?P<", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "                       if (bitmap != null) {\r\n                            intent.putExtra(Extras.EXTRA_IMAGE, bitmap);\r\n                        }\r\n                        mContext.startActivity(intent);\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "   access_token = oauth.Token(access_token_data['oauth_token'], access_token_data['oauth_token_secret'])\n\n    account = account_for_vimeo_id(access_token_data['oauth_token'])\n    if request.user.", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "               pointing_dir = np.arctan2(y_mean - ul_lat, x_mean - ul_lon)\n                pointing_dir_magnitude = np.sqrt(np.power(y_mean - ul_lat, 2) + np.power(x_mean", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "   grid = _gen_grid(options['param_free'], options['density'])\n\n    # Generate list of free parameters to integrate\n    list_free = []\n    for i in range(0,4):\n        if options['param_free'][i] is True:", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "           Board.this.rollDices();\n          }\n      }\n    });\n    rollBtn.setX(getX() + (boardbg.getWidth() - rollBtn.getWidth()) / 2);\n    rollBtn.setY(getY() + (boardbg.", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "\n        self.assertEqual(etree_iter_paths(root), [\n            ('a', 'b1', 'c1'),\n            ('a', 'b1', 'c2'),\n            ('a', 'b2'),\n            ('a', 'b3', 'c3", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "       self.runner.add(ContentSimhashSampling(), with_child=True)\nNext line of code:\n        self.runner.add(ContentSampling(), with_child=True)\nNext line of code:\n        self.runner.add(SimilarPathGenerator(), with_", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "   cfecancelamento = CFeCancelamento(\n            destinatario=Destinatario(\n                    CPF='11122233396',\n                    xNome=u'João de Teste'),\n            chCanc='C", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "    *\n     * @return the specified input stream parsed into user names\n     */\n    List<UserName> parseUserNames(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return ancestries.\n     *\n     * @param inputStream input stream, must not", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "           EtsiResponse resp = this.client.sendRequest(req);\n            if (resp.getStatus() != 200) {\n                System.out.println(\"Failed to send signature request. Status: \" + resp.getStatus());\n                this.client.shutdown();", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "\t\telif type(obj) is CalcSheetAnalysis:\n\t\t\treturn get_icon(\"calcsheet\")\n\t\telif type(obj) is Feature:\n\t\t\treturn get_icon(\"feature\")\n\t\telif type(obj) is FeatureType:\n", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "           RotationVectorSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 12 || type == 0) {\r\n            RelativeHumiditySensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type ==", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "\tprivate List<PlayerOverview> playerOverview;\n\tprivate List<TeamLeaders> teamLeaders;\n\tprivate List<TeamLeadersResponse> teamLeadersResponse;\n\tprivate List<TeamScheduleResponse> teamScheduleResponse;\n\tprivate List<", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "       String packageName = packageInfo.packageName;\n        String versionName = packageInfo.versionName;\n        String versionCode = packageInfo.versionCode.toString();\n        String version = packageInfo.versionName + \" \" + packageInfo.versionCode;\n        String appName = package", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "           if key not in self.session.scan_index(table_name, index_for(obj)):\n                raise MissingKey(f\"{key!r} is not in {table_name!r}\")\n            table_index[key] = table_name\n            object_index", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "               art = draw_art(key['size'], key['key_algo'], fingerprint, color=True, longid=True)\n                print('{0} {1} {2}'.format(fingerprint, description, art))\n            else:\n                print('{0", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "admin.site.register(SectorType, SectorTypeAdmin)\nadmin.site.register(Sector, SectorAdmin)\nadmin.site.register(Target, TargetAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Component, Component", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "       return RespostaExtrairLogs.analisar(retorno)\n\n    def consultar_sat_local(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.consultar_sat_local", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "       self.assertEqual(node_document_uri(ElementTree.XML(xml_test)), 'http://www.w3.org/XML/1998/namespace')\n        document = ElementTree.parse(io.StringIO(xml_test))\n        self.assertEqual", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "                   Arrays.sort(sorted, new StartDateComparator());\n                    break;\n                case START_DATE_DESC:Next line of code:\n                    Arrays.sort(sorted, new StartDateComparator(true));\n                    break;\n                case DUR", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "   def _trainer_initialization(self) -> None:\n        \"\"\"\n        Initialize the trainer\n\n        Parameters\n        ----------\n        None\n        \"\"\"\n        self.logger.info(f\"Initializing training for {self.identifier}...\")\n        self.", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "   private final OAuth2URL oauth2URL;\n    \n    private final List<OAuth2Guild> guilds = new LinkedList<>();\n    private final List<OAuth2User> users = new LinkedList<>();\n    \n    private SessionData sessionData;\n    \n", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "   private final Vms vms;\n    private final Tasks tasks;\n    private final Errands errands;\n    private final SpringInfo springInfo;\n    private final SpringReleases springReleases;\n    private final SpringStemcells springStemcells;\n    private final", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "\n    public void setAudiologistInfo(AudiologistInfo audiologistInfo)\n    {\n        synchronized (_lockObject)\n        {\n            if (_state.getConnectionState() != FittingConnectionState.NOT_CONNECTED)\n            {\n                throw new Illegal", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "       return new SvnJavaAddCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBranchCommand()\n    {Next line of code:\n        return new SvnJavaBranchCommand();\n    }\n\n    /**", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "   @Override\n    public void onMouseClick(GuiMouseEvent event) {\n        if (event.getEvent() == GuiMouseEvent.MOUSE_CLICK) {\n            if (event.getButton() == GuiMouseEvent.MOUSE_LEFT_CLICK)", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "       DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);\n        double[] d3Put = FiniteDifferenceFirstOrder.differentiate(callPut[looppc] ? new blackPut() : new blackCall(), Next", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "           VotingModule.class,\n            PlayerMatchModule.class,\n            AthenaMatchModule.class,\n            AthenaDeathEventModule.class,\n            AthenaKillEventModule.class,\n            AthenaPlayerJoinEventModule.class,\n            AthenaPlayerQuit", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "    */\n    public DownloadQueue newDownloadQueue() {\n        return new DownloadQueue(this);\n    }\n\n    /**\n     * Create a new download queue, the default thread pool size is 3.\n     *\n     * @param threadPoolSize thread pool size.\n     *", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": " public void run(Config config, MutableConfig mutableConfig, WatcherRegistry watcherRegistry) {\n    var log = new Log(\"packager\", config.get(\"loglevel\", \"INFO\"));\n    var conf = config.get(\"plugin\", ProConf.class);\n    var pluginDir", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "    */\n    private QuerySetConfig parseQuerySetConfigTag(Element element) {\n        Validate.notNull(element, \"element cannot be null\");\n        Validate.notNull(element.getAttribute(QUERY_SET_CONFIG_TAG), \"querySetConfig tag attribute cannot be", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "           left_foot_task = SwingFootTask(\n                self.robot, self.robot.left_foot, swing_weight)\n        if self.cur_stance.right_foot is not None:\n            right_foot_task = ContactTask(\n                self.", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "   BvNeg, BvNot, Extract, ZeroExtend, Repeat, Ite\n\n\nclass TestOperation(unittest.TestCase):\n    def test_operation_arity(self):\n        for op in simple_op:\n            self.assertEqual(op", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\t\taOutput.writeInt16(SegmentMarker.APP14.CODE);\n\t\t\taOutput.writeString(\"ICC_PROFILE\");\n\t\t\taOutput.writeInt16(aJPEG.mICCProfile.getProfileID());\n", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "           if (type == HibiscusExportType.SAMMEL) {\n                mapper.exportSammelLastschrift(sl);\n            } else if (type == HibiscusExportType.ALLE_EINZEL) {\n                mapper.exportAllE", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "   from montreal_forced_aligner.alignment.pretrained import generate_pronunciations_arguments\n\n\ndef generate_pronunciations_arguments(\n    log_path: str,\n    dictionaries: List[str],\n    text_int_paths:", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "       LoreProperties properties = PlayerHandler.getCollectedLore(entityPlayer);\n        if (!properties.hasLore(key))\n            properties.addLore(key);\n\n        PacketSyncLore.updateLore(entityPlayer);\n\n        entityPlayer.addCh", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "   private static final DateTimeFormatter USER_DATE_FORMATTER = DateTimeFormatter.ofPattern(\"dd MMM yyyy\");\nNext line of code:\n    private static final DateTimeFormatter TRANSACTION_DATE_FORMATTER = DateTimeFormatter.ofPattern(\"dd MMM yyyy", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\n\tprivate Util() {\n\t\t// empty\n\t}\n\n\t/**\n\t * Returns the current time in milliseconds\n\t * @return the current time in milliseconds\n\t */\n\tpublic static", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "   FadeOutUp(FadingOutUp.class),\n    FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadingOutRight.class),\n\n    FlipInXaxis(FlipInXaxis.class),\n    FlipInY", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "       problem = SearchSkCh(ch, der_mode=der_mode)\n\n    if verbose_level >= 1:\n        smart_print(\"Problem:\")\n        smart_print(problem)\n\n    if verbose_level >= 2:\n        smart_print(\"Search mode", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "       return H()\n\n    def test_get_hosts(self):\n        \"\"\"\n        Test that the get_hosts() method returns a set of :class:`deployer.host.Host`\n        instances.\n        \"\"\"\n        hc = HostsContainer()\n        hc.", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "           return command.startswith(\"tc qdisc\")\n\n        return [\n            command\n            for command in self.__tc_command_output.command_history\n            if tc_command_filter(command)\n        ]\n\n    def __get_device_qdisc_", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": " assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n\n\ndef test_selectEncoder_2GLONASSL2():\n  '''\n  Encoder selection test\n  '''\n  enabledBands = {NormalRateConfig.GPS.L1", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "    * @return a List of Expenses\n     */\n    public List<Expense> getExpensesFromCreditPeriod(int periodId) throws CreditPeriodNotFoundException {\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n        List<Expense> expenses =", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "   private CalendarController<MonthCalendarConfiguration, Calendar> calendarController;\n\n    private CalendarController<MonthCalendarConfiguration, Calendar> calendarController;\n    private OnDayChangeListener onDayChangeListener;\n    private OnMonthChangeListener onMonthChangeListener;\n    private DisplayEventCallback<MonthCalendarConfiguration", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "   my_stream = WhiteNoise()\n    assert isinstance(my_stream, Stream)\n    assert my_stream.take(25) == [0] * 25\n\n  def test_inf_input(self):\nNext line of code:\n    my_stream", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "               isinstance(t2, RecordMeta)\n            ):\n                t1.__instance__ = Record[field_refs(backref, t2.__items__)]\n                unify(t1, t2, backref)\n            else:\n                raise\n\n    elif isinstance(", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "       blink_url,\n        account_id,\n        client_id,\n        client_secret,\n        refresh_token,\n        token,\n        region_id,\n        host,\n        token_refresh_timeout=DEFAULT_REFRESH,\n        motion_interval=", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "\t\t\tif isinstance(model_item.data, Sketch):\n\t\t\t\tdefault_flags = default_flags | Qt.ItemIsEditable\n\t\t\tif isinstance(model_item.data, Proformer):\n\t\t\t\tdefault_flags = default_flags", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "     self._log.error('Serialization error: %s' % ex)\n      self.AsyncProcessResponse(sink_stack, None, stream, msg)\n    else:\n      self._varz.message_bytes_sent()\n      self._log.debug('Serialized message", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "       assertThat(out.toString(), equalTo(\"\"));\n        assertThat(exitValue, equalTo(0));\n    }\n\n    @Test\n    public void jmxRemoteConnectViaCliWithoutJmx() throws Exception {\n        TestThread.JMXProcess process =", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "       return new DrumStoreEntry<>(data, DrumOperation.APPEND_UPDATE);\n    }\n\n    @Test\n    void testAppend() throws Exception {\n        try (SimpleDataStore<PLDTestData> dataStore = new SimpleDataStoreImpl<>(this.testDir", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "       MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视频: \" + result.getItems().size() + \" ", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "       return this.getBusiness().getRoxanaProperties();\n    }\n\n    private ResponseProcessorManager getResponseProcessorManagerForTest() {\n        return new ResponseProcessorManager(this.getRoxanaProperties(), this.getBusinessExceptionHandler());\n    }\n\n    private Business", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "   self._SendMessage(self._ping_msg)\n\n  def _SendMessage(self, msg):\n    \"\"\"Constructs and sends a message.\"\"\"\n    self._log.debug('Sending message.')\n    self._Send(msg)\n\n  def _Send(", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "     assert freq2lag(v) == lag2freq(v)\n\n\nclass TestAlmostEqual(object):\n  def test_almost_equal_with_float_numbers(self):\n    for v in [1.0, 1.00000", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "           Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy2", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "       self.config_cache = GlobalConfigCache(self.dbi, self.bot)\n        self.config_cache.load_config()\n        self.config_cache.load_config()\n        self.config_cache.load_config()\n        self.config_cache.", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "   if operands[0] == operands[1]:\n        return True\n    elif operands[0] < operands[1]:\n        return True\n    elif operands[0] > operands[1]:\n        return False\n    elif operands[0] <= operands", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "       welcomeString.setText(getResources().getString(R.string.personalize_welcome));\n\n        return header;\n    }\n\n    private void initializeEvents() {\n        mEvents = new ArrayList<>();\n        mEventParents = new ArrayList<>();\n\n        mEvents.", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "           // Create a new chat activity\n            InviteToChatFragment fragment = new InviteToChatFragment();\n            fragment.setChatId(newChatId);\n            fragment.setClassToNotify(classToNotify);\n            fragment.show(getActivity().get", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "       UnifiedOrderResponse response = wxPayClient.unifiedOrder(request);\n        Assert.assertNotNull(response);\n        Assert.assertTrue(response.getReturn_code().equals(\"SUCCESS\"));\n        Assert.assertTrue(response.getReturn_msg().equals(\"OK\"));", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "       assertNotNull(creator.create(KEY, STRING_PARAMETER_NAME_01, RANDOM_STRING_PARAMETER_VALUE_01));\n        assertNotNull(creator.create(KEY, STRING_PARAMETER_NAME_02,", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "   public int readSmallIntValue(int d1) throws IOException {\n\t\tint d2 = in.read1();\n\t\tint d3 = in.read1();\n\t\tint d4 = in.read1();\n\t\tint d5 = in.read1();", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "\n        self.quota = quota.Quotas(self)\n        self.quota_limits = quota.QuotaLimits(self)\n        self.quota_usages = quota.QuotaUsages(self)\n        self.quotas = qu", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "           MacOsPingParser,\n            AlpineLinuxPingParser,\n            NullPingParser,\n        )\n\n        for parser_class in parser_class_list:\n            try:\n                parser = parser_class(self.__timezone)\n                break\n            except Exception", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "       Main.videoFrameRate = Integer.parseInt(m.videoSetFrameRate.getText());\r\n        }\r\n\r\n        // set video width\r\n        if (Integer.parseInt(m.videoSetWidth.getText()) > 0)// set minimum\r\n        // to 1\r", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "           self._probe = probe\n        else:\n            self._probe = _probe_adjacency_list(probe)\n        # Load the parameters.\n        self._params = kwargs\n        # Load the spike detection parameters.\n        self._params['th", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "   @Override\n    public final Promise<PingResponse> ping(final TransportContext context) {\n        if (context == null) {\n            throw new IllegalArgumentException(\"Context must not be null\");\n        }\n\n        // Setup request.\n        final URI uri = Transports", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "     self._cdg = ControlDependence(self)\n    return self._cdg\n\n  def analyze(self):\n    \"\"\"\n      Analyzes the bytecode and creates the CFG.\n    \"\"\"\n    self._decl = None\n    self._entry = None\n   ", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "       IntentIntegrator integrator = new IntentIntegrator(getActivity());\n        integrator.initiateScan();\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        View view = inflater.inflate", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": "\n  public void visit(final SetClause setClause) throws QueryException {\n    final Column column = setClause.getColumn();\n    if (setClause.getValue() == null)\n      throw new QueryGrammarException(\"Cannot apply SET with NULL value\");\n\n   ", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\t\t\tString baseFile = basePath + \"/\" + \"DDI2XFORMS_DDI2XFORMS_XSL.xml\";\n\t\t\tString targetFile = basePath + \"/\" + \"DDI2XFORMS_DDI2XFORMS_XSL", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "           np.all(\n                np.array(\n                    [\n                        DiscreteDistribution(\n                            np.array([0.1, 0.9]), np.array([0, 1])\n                        ).draw(10)\n                        for _ in range", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "\n        state = stateFactory.createState(VastAdInteractionSandBoxState.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vpaid state\n\n        state = stateFactory.createState(Vpaid", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "\tpublic void acceptBoolean(final BooleanTag tag, final boolean value) {\n\t\tif (isValid(tag)) {\n\t\t\tisValid(tag).acceptBoolean(value);\n\t\t}\n\t}\n\t@OverrideNext line of code:\n\tpublic void acceptChar(", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "   self.assertEqual(\"Harvey\", replace_blank_name(name=\"Harvey\", language=\"Hindi\"))\nNext line of code:\n    self.assertEqual(u\"\\u0906\\u092a\\u0915\\u093e\",", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "                       expectLastCall().andReturn(GIVEN_STRING);\n                        mocksControl.replay();\n\n                        // WHEN\n                        Throwable thrown = catchThrowable(() -> givenSut(systemUnderTestMock)\n                                .givenArgument(() -> {\n", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "       if rem > 0:\n            self.append(_Paf_)\n        else:\n            self.append(None)\n        return self\n\n    def show(self, with_trans=False):\n        # show according to the CSN1 struct\n        CSN1.show", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "       # Make sure we're looking at models\n        validate_not_abstract(model)\n\n        # Make sure we're looking at models\n        validate_not_abstract(model)\n\n        # Make sure we're looking at models\n        validate_not_abstract(model)", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "       return RespostaExtrairLogs.analisar(conteudo.get('retorno'))\n\n    def ativar_sat(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.ativar_", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "   engine.bind(User)\n\n\ndef test_bind_model_with_no_index(engine):\n    \"\"\"Can't bind models that don't have an index\"\"\"\nNext line of code:\n    engine.bind(User, index=User.Meta.hash_", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "   assert u6.dimensions == mass\n    assert u6.base_value == 1.0\n\n    # nonzero MKS conversion factor\n    u7 = Unit(\"Msun/pc**3\")\nNext line of code:\n    assert u7.dimensions == mass\n", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "                ',\"member=\\\\\"TST_Person.name=\\\\\"Mike\\\\\"\"'],\n      'rc': 0,\n      'test': 'linesnows'},\n     ASSOC_MOCK_FILE, OK],\n\n    ['Verify instance command references, returns paths", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "       // Load modules\n        loadModules();\n        // Load commands\n        loadCommands();\n        // Load services\n        loadServices();\n        // Load plugins\n        loadPlugins();\n        // Load config\n        loadConfig();\n        // Load economy\n        loadEconomy();", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "       if name is None:\n            name = \"\"\n        if index == -1:\n            index = 0\n        if index < 0:\n            index = len(self._tags) + index\n        if index >= len(self._tags):\n            raise FmodError(RES", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "                   @Override\n                    public void startNewOrderActivity(Account account) {\n                        startActivity(NewOrderActivity.newIntent(MainActivity.this, account.getId()));\n                    }\n\n                    @Override\n                    public void startSettingsActivity() {\n                        start", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Path(\"page\") int page );\n\n\t@GET(\"/3/account/{username}/images/ids/{page}\")\n\tCall<", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "       resource = ThermometerResource(aircraft.instruments.thermometer)\n\n        thermometer_data = resource.get()\n\n        self.assertAlmostEqual(aircraft.instruments.thermometer.temperature, thermometer_data[\"temperature\"], ", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "   column = User.age[\"foo\"]\n    value = 3\n    expected_ref = \":v0.#n1\"\n    expected_action = actions.set({\"N\": \"3\"})\n    expected_values = {\":v0.#n1\": expected_action", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "           Alert alert = new Alert(AlertType.ERROR, \"Error requesting queue:\\n\" + e.getDump().getStacktrace(), ButtonType.OK);\r\n            alert.showAndWait();\r\n            return false;\r\n        }\r\n        \r\n        if (result.getStatus()", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "       if request.user == post.user:\n            nodes = nodes.filter(deleted=False)\n        else:\n            nodes = nodes.filter(deleted=False, user__username__in=request.user.userprofile.following)\n        comments = nodes.order_", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "   Call<EmojiResponse> getEmoji(@QueryMap Map<String, String> serviceIds);\n\n    /**\n     * Retrieves a set of gifs to use in gif searching.\n     * Clicking on these gifs can perform searches with the gif itself as the", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "           of(mConnectionSuccessListener).ifPresent(ConnectionSuccessListener::failed);\n            of(mConnectionWpsListener).ifPresent(ConnectionWpsListener::isSuccessful);\n        }\n    };\n\n    @NonNull\n    private final WifiStateReceiver mWifi", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "           LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == 0) {\r\n            PressureSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type == 0", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "       for (PlaySession playSession : stack.getPlaySessionList()) {\n            playSession.addListener(this);\n        }\n    }\n\n    private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n        for (Card card :", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "   for recording, utterance in tqdm.tqdm(\n        SegmentVadFunction(args).run(),\n        total=len(vad),\n        desc=\"Segmenting VAD\",\n        unit=\"utterance\",\n    ):\n        if utterance.text ==", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "   private final Deployments deployments;\n    private final Vms vms;\n    private final Tasks tasks;\n    private final Errands errands;\n    private final SpringInfo springInfo;\n    private final SpringReleases springReleases;\n    private final SpringDeployments spring", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "       self._call_fmod(\"FMOD_Sound_GetTag\", index, name, byref(tag))\n        return tag\n\n    def get_tag_info(self, index, name):\n        \"\"\"Retrieve information on a metadata tag.\n\n        'Tags'", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "               section.end_of_message)\n        else:\n            bufr_message.length.value = nbytes_write\n\n        return bit_writer.get_bitstring()\n\n    def process_section(self, bufr_message, bit_writer, section):\n       ", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "       form = ReportAbuseForm(request.POST)\n        if form.is_valid():\n            abuse_report = AbuseReport.objects.create(\n                logged_by=logged_by,\n                logged_against=logged_against,\n               ", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "   @Override\n    public void printHeader() {\n        out.printlnanswers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "       // Checking PhyML binary\n        if (!PhyMLv3AminoAcidRunEstimator.checkBinary())\n        {\n        \tfinalize(1);\n        }\n\n        // Checking PhyML binary\n        if (!PhyMLv3A", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\t\ttropo.record(new RecordAction(new File(\"record.wav\")));\n\t\tNext line of code:\n\t\ttropo.say(\"Thank you for calling. This call will be recorded.\");\n\t\tNext line of code:\n\t\ttropo.", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "               listaDeRespostas.getPropriedades().getEstado() == \n                EstadoDaListaDeRespostas.SALVA &&\n                listaDeRespostas.getPropriedades().getEstado() == \n                EstadoDaListaDeRespostas.S", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\t\tpublic void onResult(int code,DefaultDataConnector connector) {\n\t\t\t\tif (code == 0) {\n\t\t\t\t\tProgramManager.getInstance().mProgramMap = connector.getData();\n\t\t\t\t\tadapter = new PageView", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "   @Mock\n    AdRetriever adRetriever;\n\n    @Mock\n    CuePointsRetriever cuePointsRetriever;\n\n    @Mock\n    PlayerUIController playerUIController;\n\n    @Mock\n    PlayerAdLogicController playerAdLogic", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t\t\t\tstop() ;\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// initialize the UI\n\t\t\tUIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n\t\t\t\n\t\t\t//", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "   String name = adapterName(type.getSimpleName().toString());\n    String superclass = getApplicationSupertype(type);\n    String companionClassName = packageName + \".\" + name + INJECT_ADAPTER_SUFFIX;\n    String companionClass = companionClassName + \".\"", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "           new PushNotifyMsgApi().enableReceiveNotifyMsg(enable);\r\n        }\r\n\r\n        /**\r\n         * 获取push消息\r\n         * @param handler 获取push消息接口调用回调\r\n         */\r\n        public static void get", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": " assert isinstance(args.gps_sv[0].getL1CAMessage(), CNavMessage)\n\n\ndef test_parameters_msgtype3():\n  '''\n  Zero+One message test\n  '''\n  parser = prepareArgsParser()\n  params = [\n     ", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "   return f'{path}{suffix}'\n\n\n###\n# Functions and operators on nodes\n@method(function('position', nargs=(0, 1), sequence_types=('node()?', 'xs:string?')))\ndef evaluate_position_function(self", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "   def last_record(self, fill=False):\n        \"\"\"Returns the last record of the table\"\"\"\n        return last_record(self, fill)\n\n    def dropnan(self):\n        \"\"\"\n        Drop NaN values from the table\n        \"\"\"\n        dropnan_", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "               TypingMessage m = (TypingMessage)message;\n\n                addMessage(new ChatMessage(ChatMessageSource.AUDIOLOGIST, m));\n\n                _isTyping = false;\n            }\n            else if (message.getType() == MessageType.", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "\t\tif opts.surfaceinputfolder:\n\t\t\tsave_temporary_files('mediation', modality_type = surface,\n\t\t\t\tall_vertex = all_vertex,\n\t\t\t\tnum_vertex_lh = num_vertex", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "       assertThat(main.getStatus(), equalTo(ThreadStatus.RUNNABLE));\n    }\n\n    @Test\n    public void busyWaiting2() {\n        ThreadDumpThread main = sut.thread(\"main\");\n        assertThat(main.getStatus(), equal", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "               DatePicker datePicker = new DatePicker(this);\n                datePicker.setOnDatePickListener(new DatePicker.OnDatePickListener() {\n                    @Override\n                    public void onDatePick(int year, int month, int day) {\n                        m", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "           GyroscopeSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 5 || type == 0) {\r\n            LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == ", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "   private SetOtherFragment setOtherFragment;\n    private MomoFragment momoFragment;\n    private Toolbar toolbar;\n    private ViewPager viewPager;\n    private TabLayout tabLayout;\n    private int mCurrentTab = 0;\n    private boolean isFirstTime = true;\n", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "       self.link.send_message(\"ready\", [self.params])\n\n        self.tracerouter = Tracerouter.Tracerouter(self)\n        self.pcaplogger = PcapLogger.PcapLogger(self)\n        self.time_manager =", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "   assert isinstance(deltas.deltas[4].attributes, Thread)\n    assert deltas.deltas[4].cursor == \"thread_cursor\"\n    assert deltas.deltas[4].event == \"create\"\n    assert deltas.", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "       return RestfulModelCollection(Webhook, self)\n\n    @property\n    def neural(self):\n        return Neural(self)\n\n    @property\n    def api_server(self):\n        return self.api.api_server\n\n    @property\n    def", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "       activityLightLevelManager);\n    activityLightLevelChanger.setOnLightLevelChangedListener(new ActivityLightLevelChanger.OnLightLevelChangedListener() {\n      public void onLightLevelChanged(int lightLevel) {\n        activityLightLevelManager.setLightLevel(lightLevel);\n", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "           non_equilibrium_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)\n        else:\n            non_equilibrium_ther", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "           Str('Identity', Pt=Identity(), Len=8),\r\n            ] if with_options else [])\r\n\r\n###################\r\n# TS 24.008, section 9.2.13 #\r\n# Mobility Management    #\r", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "       self.__class_parser.parse(\n            device, run_tc_show(TcSubCommand.CLASS, device, self.__tc_command_output)\n        )\n\n    def __parse_device(self, device):\n        self.__device_parser.parse(device", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "       result, index = apply_fast_eq(left.values, right.values,\n                                      left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.eq(left.values, right), left.index)", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "   with pytest.raises(ValidationError) as excinfo:\n        validate_response(response, validator_map)\n\n    assert 'Could not find a matching Swagger operation' in str(excinfo.value)\n\n\ndef test_validaton_error_decorator", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
