{"pred": "   private final JKademliaRoutingTable routingTable;\n    private final JKademliaStorageEntry storageEntry;\n    private final KademliaRoutingTable routingTable;\n    private final KademliaDHT dht;\n    private final KadSerializer<J", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "       // StackEffect.StackEffectEffect()\n        // InterlaceEffect.InterlaceEffectEffect()\n        // ContrastBrightnessAdjustmentEffect.ContrastBrightnessAdjustmentEffectEffect()\n        // KernelBlurEffect.KernelBlurEffectEffect()\n", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "\nclass Encryption1(Encryption):  # noqa: D101\n    input_widths = [8, 8]\n    rounds = 1\n\n    @classmethod\n    def eval(cls, p, rk):\n        p = RotateRight(", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "   private ImmersiveTouchNavigation mImmersiveTouchNavigation;\n    private ImmersiveEffect mImmersiveEffect;\n    private StackEffect mStackEffect;\n    private ContrastBrightnessAdjustmentEffect mContrastBrightnessAdjustmentEffect;\n    private", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "       commandProcessor.addHandler(\n                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand,\n                        this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetStatusMessageCommand.class, Message", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "    */\n    private LocalRateLimiter localRateLimiter;\n\n    /**\n     * 任务运行器\n     */\n    private TaskRunnerConfig taskRunnerConfig;\n\n    /**\n     * 任务运行器配置\n     */\n    private TaskRunnerLog", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\tif (args.checkDirectoryIntegrity()) {\n\t\t\t\tintegrityCheck.check(args.path(), passphrase, args.checkDirectoryIntegrity());\n\t\t\t} else {\n\t\t\t\tintegrityCheck.check(args.path(), passphrase", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "           //save private and public Key to storage\n            rsa.saveRSAKeys(deviceId);\n            Log.d(this.getClass().getSimpleName(), \"Registered device with deviceId: \" + deviceId);\n            return true;\n        } catch (Exception e) {", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "   SignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_ENROLL, SERVER_CHALLENGE_ENROLL);\n\n    verify(mockChallengeGenerator).generateChallenge(eq(ACCOUNT_NAME));\n", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "       self.uaA.recvEvent(CCEventFail((400, 'Accounting is not supported'), rtime = eTry.rtime))\n        self.state = CCStateDead\n        return\n        self.uaA.recvEvent(eTry.eTry)", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "   def parse(self, packet):\n        self.tag = 1\n        super(URI, self).parse(packet)\n\n\nclass FlagList(Signature):\nNext line of code:\n    def parse(self, packet):\n        self.tag = 2\n       ", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": " if cstr_node.binary:\n    lhs_child = ast_node.first_child\n    cstr_node.lhs = convert_ast_constraint(lhs_child)\n    process_children(cstr_node.lhs, lhs_child)\n", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "               if (url.startsWith(\"http\")) {\n                    intent.setURL(url);\n                } else {\n                    intent.setData(Uri.parse(url));\n                }\n                activity.showExternal(intent);\n            }\n        }\n    }\n\n   ", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "       Log.d(\"SettingActivity: \", \"postLocationInformation(): \" +\n                String.format(\"Latitude: %s, Longitude: %s\",\n                    latitude, longitude));\n        PostLocationDataBody body = new PostLocationDataBody(\n                new LocationData(\n                       ", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "       self.net = Network('net1')\n        self.net.set_input_layer(InputLayer(1, 1))\n        self.net.add('0', FCLayer(1, 20))\n        self.net.add('1', FCLayer(", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "   def __new__(cls, **kwargs):\n        init_called = True\n        return super().__new__(cls, **kwargs)\n\n    user = User(**kwargs)\n    assert init_called\n    assert user.id == \"user_id\"\n    assert user.email", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "   for context.item in context.inner_focus_select(self[0]):\n        for result in self[1].select(copy(context)):\n            if not isinstance(result, (tuple, XPathNode)) and not hasattr(result, 'tag'):\n                yield result", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "                   new HSBAdjustTransformation(),\n                    new InvertTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MaskTransformation(),\n                    new MaskTransformation(),\n                    new MaskTransformation(),", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "   private static final ButterKnife.Action<View> HIDE_ALL = (view, index) -> view.setVisibility(View.GONE);\n    private static final ButterKnife.Action<View> SHOW_ALL = (view, index) -> view.", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "               writeResponse(UNREGISTER_MBEAN, correlationId);\n                log.tracef(\"[%d] UnregisterMBean - Success Response Sent\", correlationId);\n            } catch (MBeanException mbe) {\n                writeResponse(mbe, UNREGISTRATION", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "       wild.create_task_tuple(wild.monitor_status())\n        wild.monitor_task = wild.create_task_tuple(wild.monitor_status())\n        wild.monitor_task = wild.create_task_tuple(wild.monitor", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "   if c['vocab_text']:\n        vocab_text = Vocabulary(c['vocab_text')\n    else:\n        vocab_text = None\n    # Load dictionary\n    if c['dictionary']:\n        dictionary = Dictionary(c", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": " assert isinstance(doppler, TCXOSine)\n  assert doppler.amplitude_sine.amplitude_sine_s_s_s_s_s_s_s_s_s_s_s_s_s_s_", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "               hideActionMode();\n                getParticipantAdapter().setOnClickListener(onOnClickListener);\n                getParticipantAdapter().setOnItemClickListener(onItemClickListener);\n                getParticipantAdapter().setOnItemLongClickListener(onItemLongClickListener);\n                mRecyclerView.setAdapter(", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "   assert self.redlock.acquire()\n\n    def test_release(self):\n        assert not self.redis.exists(self.redlock.key)\n        self.redlock.acquire()\n        assert self.redis.exists(self.redlock.key", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "   return ConeSettings(self._dll.FMO_Get3DProjectionConeSettings(self.handle))\n\n    def get_channel_count(self):\n        \"\"\"Get the number of channels in the sound.\n\n        :returns: Number of channels.\n        \"\"\"\n", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "   def __init__(self, compression_alg):\n        super(CompressedData, self).__init__(self.header.tag)\n        self.header.compress_algs = [compression_alg]\n        self.compress_algs = [compression_alg]", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "       if not cellShapeThreshold is None:\n            #cellSize = findCellSize(imgshape, cellShapeThreshold, verbose = verbose, out = out, **parameter);\n            #cellIntensity = findCellIntensity(imgshape, cellShapeThreshold, verbose = verbose", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "           if (perfectSound != null) {\n                perfectSound.play();\n            }\n        }\n        else if (accuracy == Accuracy.GREAT) {\n            if (greatSound != null) {\n                greatSound.play();\n            }\n       ", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "\n            while (transactionIterator.hasNext()) {\n\n                transactionIterator.next();\n                printer.print(transactionIterator.getTransaction());\n                System.out.println(print);\n                print.setLength(0);\n\n            }\n\n            //not really needed\n            exit", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "               else if (query.queryType == RequestType.INSERT) {\n                    // TODO: Insert\n                    // TODO: Insert\n                    // TODO: Insert\n                    // TODO: Insert\n                    // TODO: Insert\n                    // TODO: Insert\n                    // TODO: Insert", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "   return SegmentSequence(plain_segments)\n\n\nclass PinTanDummyAuthenticationMechanism(AuthenticationMechanism):\n    def __init__(self, security_method_version=1):\n        super().__init__()\n        self.security_method_version =", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                       env.combExpRegNum[i] = env.combExpRegNum[0];\n                        }\n                    }\n                }\n            }\n        } // USE_CEC\n\n        if (Config.DEBUG_PARSE_TREE) Config.log.println", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "   url(r'^toggle-pipeline$', ajax_toggle_pipeline_config,\n        name=\"ajax-toggle-pipeline-config\"),\n    url(r'^toggle-pipeline-config$', ajax_toggle_pipeline_config,\n        name=\"ajax-", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\t\n\t\tpublic ResourceData (Meter meter, EnumMap<SRSLevel, String> tags, EnumMap<SRSLevel, Integer> colors, String notEnoughData)\n\t\t{\n\t\t\tthis.meter = meter;\n\t\t\tthis.tags", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "       self._storage_type = storage_type\n        return self\n\n\n#\n# DB RELOAD\n#\n# Asks the OrientDB Server instance to reload the database.\n#\n# Request: empty\n# Response: no response, the socket is just closed at server side\n#\n", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "   public ThenWithoutResult<$SystemUnderTest> then() {\n        return then(functions.toCheckedRunnable(functions.toCheckedConsumer(functions.toCheckedBiConsumer(\n                functions.toCheckedBiFunction(functions.toCheckedConsumer(functions.toCheckedSupplier", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "     try {\n        return await(process, expectedExitCodes, null);\n      } catch (IosDeviceException e) {\n        throw e;\n      } catch (Throwable e) {\n        throw new IiosDeviceException(this, e);\n      }\n  }\n", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\tif (textColor != null) {\n\t\t\tif (textColor.equals(Color.BLACK)) {\n\t\t\t\ttextColor = Color.WHITE;\n\t\t\t} else {\n\t\t\t\ttextColor = Color.BLACK;\n\t\t\t", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t\tMessage message = XmlUtil.fromXml(xml, Message.class);\n\t\tswitch (message.MsgType) {\n\t\t\t// 收到消息\n\t\t\tcase Message.TYPE_RECEIVE_IMMEDIAL_MESSAGE:\n\t\t\t", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "   # 获取运行时特征\n    # 获取包名\n    packagename = None\n    mainactivity = None\n    try:\n        apk_info = apk_info_from_apk(file_path)\n        packagename = ap", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "       @channel_checks.raid_report_enabled()\n        async def cmd_raidcity(self, ctx, *city_name):\n        \"\"\"\n        **!rp-city city-name** - creates a raid party channel.\n\n        **Organizer commands:**\n       ", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "       self.assertTrue(datetime_string_ymd_to_datetime(\"25/11/2015\"))\n        self.assertTrue(datetime_string_ymd_to_datetime(\"11/12/2012\"))\n        self.assertTrue(", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "       self.assertEqual(len(sessions), 1)\n\n        # startup server\n        server_actor = ConfigActor(config_file)\n        server_actor.start()\n        gevent.sleep(1)\n\n        # bait\n        bait_ip =", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                           ShareUtil.sharePic(mActivity, picUrl, \"分享自煎蛋\");\n                            dialog.dismiss();\n                            break;\n                        case 1:Next line of code:\n                            ToastHelper.Short(ConstantString", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\t\t\t\t\twrite_mgh_filetype(opts.outout[i],\n\t\t\t\t\t\t\timage_array = outdata,\n\t\t\t\t\t\t\tmasking_array = masking_array,\n\t\t\t\t\t\t\tmaskname", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "               ResponsePromptLoader.class,\n                PromptFragment.class,\n                SurveysFragment.class,\n                SurveysGridFragment.OhmletAdapter.class,\n                SurveysFragment.class,\n                SurveysPromptLoader.class,\n                SurveyProm", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "               PubKeyAlgorithm.ECDH: ECDHPriv,\n                PubKeyAlgorithm.ECDH_SIGN: ECDHPriv,\n                PubKeyAlgorithm.ECC: ECCPriv,\n                PubKeyAlgorithm.ECC_SIGN: ECC", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "   if self.value == '1':\n    yield self\n\n    elif self.value == '0':\n    yield self\n\n    elif self.value == 'false':\n    yield self\n\n    elif self.value == 'true':\n    yield self\n\n    elif self.", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "     'no_members': Counter\n      }\n\n  _heap_lock = RLock()\n  _heap = []\n  _heap_varz = HeapVarz()\n  _servers = None\n  _properties = SinkProperties(\n    Sink", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "       nc.send_message_with_protocol(OK, protocol)\n        protocol.send_string.assert_called_once_with('11:ok,')\n\n    def test_receive_message(self):\n        \"\"\"\n        Ensures that the message is translated into", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "       assertEquals(\"query\", \"select * from t1\", qe.getQuery());\n        assertEquals(\"out\", \"outParam\", qe.getOutParams().get(\"outParam\"));\n        assertEquals(\"out\", \"outParam\", qe.getOutParams().get(\"outParam", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "       Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n    }\n\n    @Test\n    public void testBatchPreparedSuccess() {\n        PreparedBatchExecution pe =", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "               yield task.sleep(adrmessagetime)\n            else:\n                yield device.update(adr_datr=target)\n                yield task.sleep(adrmessagetime)\n                yield device.update(adr_datr=target)\n                yield task.sleep(", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "                   function = FmllrRescoreFunction(args)\n                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                   ", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "#\n# 0x0000000000000000000000000000000000000000000000000000000000", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "       if (chat == null) {\n            getChat();\n        }\n        if (users == null) {\n            getUsers();\n        }\n        if (mAdapter == null) {\n            mAdapter = new UserAdapter(users);\n        }\n        mAdapter.notify", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "   parameter = DataElementGroupField(type=ParameterTwostepTAN6)\n\n\nclass HITANS7(HITANSBase):\nNext line of code:\n    parameter = DataElementGroupField(type=ParameterTwostestTAN7)\n\n\nclass H", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "       jd2Date(self.img_handle.current_frame, self.config.time_units, self.config.time_units_units, \\\n            self.config.time_units_units_units, jd2Date(self.img_", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "       if (mPublicRoomsListList == null) {\n            mPublicRoomsListList = new ArrayList<List<PublicRooms>>();\n        }\n        mPublicRoomsListList.clear();\n        mPublicRoomsListList.add(new ArrayList<PublicRooms>", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "       self.bingo_card_manager = BingoCardManager()\n        self.bingo_card_writer = BingoCardWriter()\n        self.bingo_data_generator = BingoDataGenerator()\n        self.global_config_cache = GlobalConfigCache()\n        self", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "       if args.chim_detect:\n        chim_detect = ChimeraDetector(target_sequences, phylogeny,\n                                      args.chim_detect_threshold)\n\n    #infering breakpoint graph\n    logger.info(\"", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "       plugins.registerEvents(new BlockLockerCommand(this), this);\n        plugins.registerEvents(new InteractListener(this), this);\n        plugins.registerEvents(new SignChangeListener(this), this);\n        plugins.registerEvents(new InteractListener(this), this);", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "               MiPushClient.getInstance().init(new MiPushClient.MiPushClientListener() {\n                    @Override\n                    public void onInitSuccess() {\n                        Log.e(MYTAG, \"使用MiPush推送\");\n                        stopHwPush", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "       registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<String>>(STRING_ARRAY));\n        registry.put((byte) (QUERY_EXP ^ RESPONSE_MASK), new", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "   public static final String PERSONAL_VULN_FILE_PROPERTY_PROPERTY_NAME = \"PersonalVulnFile\";\n    private static final String PERSONAL_VULN_FILE_PROPERTY_PROPERTY_PROPERTY_PRO", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "   public Panel(GCTraceSet gcTraceSet) {\n    }\n\n    /**\n     * It sets the GC trace set that will provide the data for this panel.\n     *\n     * @param gcTraceSet The GC trace set that will provide the data for this\n", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "       if (packet.isAckRequested()) {\n            AckRequest ackRequest = ackManager.getAckRequest(packet);\n            if (ackRequest != null) {\n                ackRequest.sendAckData(packet.getData());\n            }", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "       lMS.getVideoTracks().get(0).setConstraints(appRtcClient.videoConstraints());\n      }\n      VideoSource localVideoSource = new VideoSource(lMS);\n      videoSource = localVideoSource;\n      videoSourceStopped = false;\n      toggleH", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "           contentValues.put(JobStorage.COLUMN_EXACT, -1L);\n            contentValues.put(JobStorage.COLUMN_FLEX_MS, -1L);\n            contentValues.put(JobStorage.COLUMN_FLEX_SUPPORT, ", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "   private CheckBoxPreferenceHideScore preferenceHideScore;\n    private CheckBoxPreferenceHideTime preferenceHideTime;\n\n    private ArrayList<Preference> preferences;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(saved", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "   return obj\n\n\ndef init_snapshot(obj, basedir=None):\n    # a system object is needed in order to coopy work\n    if not obj:\n        raise Exception(CORE_LOG_PREFIX +\n                \"Must input a valid object if there'", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "\n    def find_desktop_file(self):\n        desktop_file = self.config.project_files.find_desktop_file()\n        if not desktop_file:\n            logger.warning('No desktop file found, desktop mode may fail')\n        return desktop_file\n\n   ", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "   for (int i = 0; i < 10; i++) {\n      String folder = String.format(\"ROOT-%s\", String.valueOf(i));\n      String folderPath = folder.substring(0, folder.length() - 1);\n      String folderURL = folder", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "       //bgTasksRunning.get() == 0;\n        if (bgTasksRunning.get() == 0) {\n            bgTasksRunning.get() = 1;\n        }\n        super.onStart();\n    }\n\n    @Override\n    public void onStop()", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "\t\tif (writeTML) {\n\t\t\tannoGenerated = JDTUtils.createAnno(model.getTML(), model.getSettings());\n\t\t}\n\t\telse {\n\t\t\tannoGenerated = null;\n\t\t}\n\t\tif (annoGenerated", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "       \"\"\"Test the SimulatorDataClient protocol\"\"\"\n\n        fdmexec = FGFDMExec()\n        fdmexec.SetRootDir(self.data_path)\n        fdmexec.SetAircraftPath(\"\")\n        fdmexec.Set.p_dot,", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "       if (httpMessage.getRes().hasRequest()) {\n        }\n        }\n        if (httpMessage.getRes().hasResponse()) {\n        }\n        if (httpMessage.getRes().hasRequest()) {\n        }\n        if (httpMessage.getRes().has", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "   assert simple_table_status(\n        \"Model\",\n        \"CustomTableName\",\n        \"CustomTableName\",\n        \"CustomTableName\",\n        \"CustomTableName\",\n        \"CustomTableName\",\n        \"CustomTableName\",\n        \"CustomTableName\",\n       ", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "   def load(self, filename, filename_format=None,\n                filename_extension=None,\n                filename_suffix=None,\n                filename_suffix_extension=None,\n                filename_suffix_format=None,\n                filename_suffix_", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "     visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\n\n      return null;\n    }\n\n    visitProxOp(new VisitOrd3(n), query);\n\n    return null;\n  }\n\n  /**\n  ", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "                   new EmbossTransformation(),\n                    new InvertAlphaTransformation(),\n                    new InvertColor(0x00000000),\n                    new InvertColor(0x0000000000000000),", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "\n        if self._header[1] == 1:\n\n            # Parse the error\n            exception_class = b''\n            exception_message = b''\n\nNext line of code:\n\n        if self._header[2] == 1:\n\n            # Parse the error", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "   api = DERBMDATA(args.apikey)\n\n    if args.settlement_period is not None:\n        api.get_data(**{'SettlementDate': args.date or date.today().strftime(\"%Y-%m-%d\"),\n                       ", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "\t\t\t\titem = new GalleryAlbum( proxy );\n\t\t\t} else {\n\t\t\t\titem = new GalleryImage( proxy );\n\t\t\t}\n\t\t\titems.add( item );\n\t\t}\n\t\treturn items;\n\t}\n\n\t", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "   assert extract_key(user, engine) == user_key\n\n\ndef test_get_table_name(engine):\n\n    class Foo:\n\n    Next line of code:\n    get_table_name(Foo, engine) == \"Foo\"\n\n\ndef test_", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "       new Status(Next line of code:\n        new Spinner(BAR_EQUALS),\n        new ProgressBar(BAR_EQUATES),\n        new StaticString(WHITESPACE),\n        new Fraction(0.5),\n        new Per", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "\tpublic static FormFor formFor(Object resource, Object... fields) {\n\t\treturn new FormFor(resource);\n\t}\n\tpublic static Html html(Object resource) {\n\t\treturn new Html(resource);\n\t}\nNext line of code:\n\tpublic static Html html", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "       events.append(Event(e, self))\n\n        return events\n\n    def get_event(self, event_id):\n        data = self.call_api(\"events/%s\" % event_id)\n        return Event(data, self)\n\n    # Provider", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "   Matcher<? super ParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    /**\n     * Matcher to check the given index in batch matches with given parameter matcher.\n     *\n    ", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "           WallpaperPropertiesLoaderTask loaderTask = new WallpaperPropertiesLoaderTask(this);\n            loaderTask.execute(mWallpaper);\n        } else if (id == R.id.menu_preview) {\n            if (mWallpaper != null) {\n                Toast.makeText", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": " private static final Logger logger = Logger.getLogger(QsolToQueryVisitor.class.getPackage().getName());\n\n  private final static Logger logger = Logger.getLogger(QsolToQueryVisitor.class.getPackage().getName());\n\n  private final static Logger logger = Logger", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "\t\tif args.genotype is not None:\n\t\t\tif not os.path.isdir(args.genotype):\n\t\t\t\traise ValueError('Genotype folder {} is not a folder'.format(args.genotype))\n\t\t\tif not", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "       self.beginning_datetime = filenameToDatetime(self.dir_path)\n\n        # If the beginning time is None, then the beginning time is set to the first frame\n        if self.beginning_datetime is None:\n            self.beginning_datetime = self.vid", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "   p.set_tile_full()\n\n    # 3. bkg\n    bg = np.random.random(BKGVALS)\n    b = objs.Bkg(BKGVALS, zpos=0.0, angles=(-0.0", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\t\tif (FOOD_MODIFIER_ENABLED)\n\t\t{\n\t\t\tFoodModifier.onGlobalFormulaChanged();\n\t\t\tFoodGroupRegistry.clear();\n\t\t}\n\t\tFoodHelper.onGlobalFormulaChanged();\n", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "       if request.user.userprofile.submission_karma >= 100:\n            if request.user.userprofile.submission_karma >= 200:\n                if request.user.userprofile.submission_karma >= 300:\n                ", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\t\t\t\t\tif (selectionListeners != null) {\n\t\t\t\t\t\t\tfor (ISelectionChangedListener selectionChangedListener : selectionListeners) {\n\t\t\t\t\t\t\t\tselectionChangedListener.onSelectionChanged(new ISelectionChangedEvent(this", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "       self._keyclass = int(val)\n\n    def parse(self, packet):\n        super(RevocationKey, self).parse(packet)\n        self.keyclass = packet[:(self.header.length - 1)]\n        del packet[:(self.header", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "       if is_processing_instruction_node(item):\n            yield item\n\n\n@method(function('text', nargs=0, label='kind test'))\ndef select_text_kind_test(self, context=None):\n    if context is None:\n        raise self", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "\nfor i in range(1000000000000000000000000000000000000000000000000000000000", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "   I.set_tile(tile)\n\n\ndef make_image_1():\n    P = objs.PlatonicSpheresCollection(pos, rad)\n    H = psfs.AnisotropicGaussian()\n    I = ilms.Barn", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "       manager = mp.Manager()\n        error_dict = manager.dict()\n        return_queue = manager.Queue()\n        stopped = Stopped()\n        procs = []\n        for i, args in enumerate(jobs):\n        for j, args in enumerate(jobs):", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "   return platepar, True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "       contentValues.put(JobStorage.COLUMN_EXACT, 1);\n        contentValues.put(JobStorage.COLUMN_REQUIRES_BATTERY_NOT_LOW, 1);\n        contentValues.put(JobStorage.COLUMN_REQUI", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "       FragmentObservable.getInstance().register(this);\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n        FragmentObservable.getInstance().remove(this);\n    }\n\n    @Override\n    public void onNotify(Chat value)", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "       model = Progress\n        fields = ['indicators', 'target', 'area', 'area_type', 'area_type_code', 'area_type_name', 'stats_available']\n\n\nclass AreaFilter(django_filters.FilterSet):\n    indicator = django_filters", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "           if (produces.size() == 0) {\n                uiHandler.post(showButton);\n            }\n        }\n    }\n\n    @UiThread\n    protected void setBottomInfo() {\n        if (produces.size() == 0) {\n           ", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "\n                return transport.connect(context, manager, true);\n            }\n        }).then(new OnComplete<Channel>() {\n            @Override\n            protected void onComplete(final Channel value, final Throwable cause) throws Exception {\n                if (cause == null) {\n                ", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "       new RegeneratePasswordTask(this.getClass().getSimpleName(), email, password).execute());\n        Log.d(this.getClass().getSimpleName(), \"I have been notified. Yeeha!\");\n        onPostRegisterExecute(success, email, password, message);", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "   private final Router router;\n\n    private final AtomicInteger k = new AtomicInteger(0);\n    private final AtomicInteger t = new AtomicInteger(0);\n\n    private final HashMap<KState, Set<C>> counters = new ConcurrentHashMap<>();\n\n", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "   private List<String> list;\n    private HashMap<String, String> map;\n    private SimpleTextAdapter<String> simpleTextAdapter;\n    private ArrayList<String> listUrl;\n    private ArrayList<String> listPosition;\n    private ArrayList<String> listPositionTitle;\n", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": " assert args.gps_sv[0].getMessage() is ConstMessage(0)\n\n\ndef test_parameters_msgtype1():\n  '''\n  All One message test\n  '''\n  parser = prepareArgsParser()\n  params = [\n      '--gps-", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "\n    def _render_fill(self):\n        if self.style.fill_opacity == 0:\n            return\n\n        if self.style.fill_gradient:\n        #if self.style.fill_gradient:\n        #if self.style.fill_gradient:\n", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "\t\t\t\tif (null == a) {\n\t\t\t\t\ta = new ShortcutData(data);\n\t\t\t\t\tapps.add(a);\n\t\t\t\t\tneedSave = true;\n\t\t\t\t} else {\n\t\t\t\t\ta", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "               if (AppSetAction.isShow && AppSetAction.isShowInStatusBar) {\n                    isAppSetNeed2Add = Action.isNeed2Add(layoutGuts, AppSetAction.class);\n                }\n                if (ClipBoardAction.isShow", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "       self.beg_alt = angularSeparation(self.beg_vect, self.end_vect)\n        self.end_alt = angularSeparation(self.end_vect, self.beg_vect)\n\n        # Compute the vector of the end", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\t\tFunctionFunctionContext ffunc = (FunctionFunctionContext)fheads.iterator().next();\n\t\tFunctionFunctionContext ffunc = (FunctionFunctionContext)fheads.iterator().next();\n\t\tFunctionFunctionContext ffunc = (FunctionFunctionContext)fheads.iterator().next", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "   public abstract boolean add(SelectorNode selector);\n\n    public abstract boolean add(ArgumentsNode arguments);\n\n    public abstract boolean add(MediaQueryNode mediaQuery);\n\n    public abstract boolean add(MediaTypeNode mediaType);\n\n    public abstract boolean add(MediaTypeRestriction mediaType", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "   private SpecificationGenerator specGenerator;\n    private ICodeGeneratorFactory codeGeneratorFactory;\n    private ICodeGenerator codeGenerator;\n    private FileManager fileManager;\n\n    public OpenAPIProcessor(ProcessingEnvironment processingEnvironment) {\n        super(processingEnvironment);\n    }\n\n   ", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "       bind(GerritCheckoutProvider.class).to(GerritCheckoutProvider.class);\n        bind(GerritHttpAuthDataProvider.class).to(GerritHttpAuthDataProvider.class);\n        bind(GerritPushExtension.class).to(G", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "                   if (zxidLong >= zxidLongOf(snapshots.get(i))) {\n                        snapFile = snapshots.get(i);\n                        break;\n                    }\n                    i--;\n                }\n\n                if (snap", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "   if not query:\n        return entries\n        # If the user has no search criteria, we show all the entries.\n        # This is a bit of a hack, but it's a lot more preferable than\n        # showing an empty list.\n        # We also do not filter the", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "   ]\n    #\n    # shar manipulation interface\n    def to_shar(self):\n        ret = shar()\n        ret.set_buf(self())\n        return ret\n    \n    def map_shar(self, sh):\n        if not self.", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\t\t\t\t\t\tsearchSuggestionsAdaper.clear();\n\t\t\t\t\t\tsearchList.setVisibility(View.GONE);\n\t\t\t\t\t\ttabLayout.setVisibility(View.GONE);\n\t\t\t\t\t\tscanButton.setVisibility(", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "   p = np.array(POS, dtype='float')\n    p[:,0] = np.random.random(p.shape[0)\n    p[:,1] = np.random.random(p.shape[0)\n    p[:,2] = np.random", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "       result, index = apply_fast_and(left.values, right.values,\n                                        left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.and_(left.values, right), left.index)", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "                   Request request = RequestFragment.sSelectedRequests.get(i);\n                    if (request == null) {\n                        mError = Extras.Error.ICON_REQUEST_NULL;\n                        return false;\n                    }\n\n                }\n\n                if (", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "       instance,\n        (int, float, Decimal, Duration, DateTime, DateTimeProxy, DateTimeDate, DateTimeTime, DateTimeDateTime, DateTimeDateTime, DateTimeDateTimeTime, DateTimeDateTimeDateTime, DateTimeDateTimeDateTimeDateTime, DateTimeDateTimeDateTimeDateTimeDateTimeDateTimeDateTimeDateTimeDateTimeDateTimeDateTimeDateTimeDateTimeDateTimeDateTimeDateTimeDateTime", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "       return SearchMenuPage(self.log)\n        if pageletId == 'LiveTvPage':\n        return LiveTvPage(self.log)\n        if pageletId == 'RubricPage':\n        return RubricPage(self.log)\n        if pagelet", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "\n                if not checkFileExistence(pattern.getDataFilePath()):\n                errmsg = \"Fit.validate:  %-20s:  %-30s  %-30s  %-30s  %-30s  %-30", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "   serializer_class = PlanSerializer\n    filter_class = PlanFilter\n    ordering_fields = ('id', 'plan_code', 'name', 'theme')\n\n\nclass ThemeViewSet(ModelViewSet):\n    queryset = Theme.objects.all()\n    serial", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "   private StarItemAdapter starItemAdapter;\n    private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private BookmarkItemAdapter bookmarkItemAdapter;\n    private List<BookmarkItem> bookmarkItemList = new ArrayList<BookmarkItem>();\n\n   ", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "                       ServerInfo serverInfo = ServerInfo.INSTANCE;\n                        serverInfo.setEmail(emailTmp);\n                        ServerInfo.INSTANCE = serverInfo;\n                        if (yasmeDeviceCheck()) {\n                            // TODO check if the user is already registered\n                ", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "\n    url(r'^$', PkgsSettingsView.as_view(), name=\"settings-packages\"),\n    url(r'^new$', staff_member_required(NewPackageView.as_view()),\n        name=\"packages-new\"),\n    url(r'^", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": " encoder = GPSL1L2BitEncoder(NormalRateConfig)\n  assert isinstance(encoder, EncoderBase)\n  assert isinstance(encoder, TwoBandsBitEncoder)\n  assert encoder.bandIndexs == (0, 1)\n", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "   return tg_helper._tgToDictionary(tgAsDict)\n\n\ndef run_read(fn, reportingMode=None):\n    \"\"\"\n    Mock read function and return the first tier's entry list\n\n    tg.read() mutates the textgrid's", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "   procs.append(KaldiProcessWorker(function, return_queue, error_dict, Stopped(stopped), self.split_directory, self.vad_directory, self.vad_output_directory, self.vad_output_feature_directory, self.v", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "       dataset = UAV123(root_dir, version=version)\n        self._check_dataset(dataset)\n\n    def test_nfs(self):\n        root_dir = os.path.join(self.data_dir, 'NfS')\n        dataset", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "\tboolean isSet(FixTag tag, Validity validity);\n\tValidity isValid(FixTag tag, Validity validity);\n\tboolean isSet(FixTag tag, Validity validity, boolean invalidOnMissing);\n\tValidity isValid(FixTag", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "       yield self.load(bounds[0, :, 0], bounds[1, :, 0), 'spike_samples')\n\n        # Yield the spike samples.\n        yield self.load(bounds[0, :, 0], bounds[1, :, ", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {\n\t\t\treturn getAnyQueryNodeExplanations(anyQueryNode);\n\t\t}\n\n\t\t@Override\n\t\tpublic ExpansionResult visit(AlvisIRPrefixQuery", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\tprivate ENOParameters enoParameters;\n\t\n\tprivate SchaValidatorValidator schemaValidator;\n\t\n\tprivate Validator validator;\n\t\n\tprivate FolderCleaner folderCleaner;\n\t\n\tprivate PipeLineGenerator pipeLineGenerator;\n\t\n\t", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "       registry.put((byte) (RECEIVE_NOTIFICATION_LISTENER ^ RESPONSE_MASK), new MarshalledResponseHandler<Void>(VOID));Next line of code:\n        registry.put((byte) (RECEIVE_NOTIFICATION_LIST", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "\n    def _render_descriptor_helper(self, descriptor, indent):\n        lines = []\n\n        if isinstance(descriptor, SequenceDescriptor):\n            lines.append('{}{} {}'.format(indent, descriptor, descriptor.name))\n            for member", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "       help=\"network latency time [ms].\n        the minimum latency time is 0 ms.\n        valid units are either: {}.\n        e.g. tcset eth0 --delay 10ms\n        \"\"\".format(\n            \", \".join([\", \".join(", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "       return self.contacts\n\n    def get_message(self, message_type):\n        if message_type == \"text\":\n        # 1. Get the message from the database\n        # 2. Get the message from the cache\n        # 3. Get the message from", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "   PCollection<GCPProject> liveProjects =\n        pipeline.apply(\n            \"Read live projects\",\n            Read.from(\n                new CloudResourceManagerApi(\n                    org,\n                    new CloudResourceManagerApi.Credentials(\n                        org,\n                        new Google", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "       self.generator = SimilarPathGenerator()\n\n        self.generator.get_tail_pattern = lambda url, tail: tail\n\n        self.generator.get_tail_pattern(\"http://example.com/\", \"tail\")\n\n        self.generator.get_tail_pattern(\"", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "       ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "   for condition in iter_conditions(operations, column):\n        conditions.append(condition)\n    return conditions\n\n\ndef test_conditions_for_and():\n\n\ndef test_conditions_for_or():\n\n\ndef test_conditions_for_not", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "       idx = get_square_idx(row, col)\n        assert idx == get_square_idx(row, col)\n\n    def test_get_square_with_invalid_index(self):\n        idx = get_square_idx(1, 1)\n        assert", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "\tprivate final IJavaProject javaProject;\n\n    private final ILocalVariable[] localVariables;\n\n    private final IMethod[] methods;\n\n    private final ILocalVariable[] localVars;\n\n    private final ILocalVariable[] localVars2;\n\n    private final", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "     self.next_sink.Open(sink_properties)\n\n  def AsyncProcessRequest(self, sink_stack, msg, stream, headers):\n    \"\"\"Process a request message, stream, and headers.\n\n    Args:\n      sink_stack - The SinkStack", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "\tprivate static final String META_TYPE_HEADING=\".heading\";\n\tprivate static final String META_TYPE_SUBTITLE=\".subtitle\";\n\tprivate static final String META_TYPE_SUPPORTING_INFORMATION=\".supportingInformation\";\n\t", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "   var files = new StableList<>(0, new Object[0));\n    var files = files.appendAll(line);\n    return cmdLine.apply(files, javadocTool.getDefaultExecutableLocation());\n  }\n  \n  private static boolean isLinkHostOn", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "       return RespostaSAT.analisar(retorno)\n\n    def enviar_dados_venda(self, venda):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.enviar_d", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "       registerCallAction(new ToggleMicrophoneAction(this), ToggleMicrophoneAction.TOGGLE_MICROPHONE_ACTION_ID);\n        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "   if gopts.git_trace2_event_log:\n      git_trace2_event_log.Init(gopts.git_trace2_event_log)\n\n    if gopts.event_log:\n      git_trace2_event_log.Init(go", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "   @Singleton\n    Prefs providePrefs(Prefs prefs, SharedPreferences prefsPrefs) {\n        return new Prefs(prefsPrefs, prefs);\n    }\n\n    @Provides @Singleton\n    Prefs providePrefs() { return P", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "       Assert.assertThat(ds, totalQueryCount(0, 0, 0, 0, 0));\n\n        Assert.assertThat(ds, totalQueryCount(0, 0, 0, 0, 0));\n        Assert.assertThat(ds, total", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "       return new SvnJavaChangeLogCommand();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBranchCommand()\n    {\n        return new SvnJavaBranchCommand();\n    }\n\n    /**\n     * {@", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "       VerifierProperty verifier;\n        VerifierBackground verifierBackground;\n\n        verifier = new ValidSchemaNameVerifierImpl();\n        verifierBackground = new VerifierBackground(verifier);\n        verifiers.put(verifier.getClass().getName(), verifierBackground);\n", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "           showProgress(false);\n        }\n    }\n\n    public void onPostRegisterExecute(Boolean success, ServerInfo serverInfo) {\n        if (success) {\n            Log.d(getClass().getSimpleName(), \"Registered successfully\");\n            Log.d(getClass", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "    * @throws IOException if there's an error during the request.\n     */\n    DrupalUser login(String username, String password) throws DrupalLoginException, IOException, DrupalFetchException;\n\n    /**\n     * Logs in a user by username and password (invokes", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "       for q in quirks:\n            q.apply(text)\n        self.textInput.text()\n        self.textInput.clear()\n        self.textInput.focusInEvent(self.focusInEvent())\n        self.textInput.setFocus()\n        self.", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "           (r'/logout', LogOutHandler),\n            (r'/login', LogInHandler),\n            (r'/register', RegisterHandler),\n            (r'/problem', ProblemHandler),\n            (r'/status', StatusHandler),\n            (r'/", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {\n\t\t\tList<MatchExplanation> explanations = getPrefixQueryNodeExplanations(prefixQueryNode);\n\t\t\treturn expandAtom(explanations);\n\t\t", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "               throw new ProtTestInternalException(\"No information criterion for this selection criterion\");\n        }\n\n        return informationCriterion;\n    }\n\n    /* (non-Javadoc)\n     * @see es.uvigo.darwin.prottest.fac", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "   return Pair(e1, e2, ty1)\n\n\n@with_info(st_typ)\ndef type_ty(expr):\n    \"\"\"Turn a simply typed expression into a type.\n    \n    Arguments:\n    - `expr`: an expression\n    \"\"\"", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "   void inject(KioskSettingsFragment kioskSettingsFragment);\n    void inject(KioskModeHandler kioskModeHandler);\n    void inject(MainSettingsFragment mainSettingsFragment);\n    void inject(PlaybackSettingsFragment playbackSettingsFragment);\n    void inject(Classic", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "   private ArrayList<SliceValue> sliceValues;\n    private ArrayList<Expense> expenses;\n    private ArrayList<CreditCard> creditCards;\n    private CreditCard creditCard;\n    private CreditPeriod creditPeriod;\n    private int expenseType;\n    private", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "   with pytest.raises(ResponseValidationError(500)):\n    handle_request(PyramidSwaggerRequest(Request(\n        url='/foo/bar',\n        headers={'content_type': 'text/plain'})),\n        Response(status=50", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "\tpublic void onCommand(ConsoleCommandParser.AddOrDeleteEdgeCommandContext ctx) {\n\t\tif (atomicalConsole.isInputValid()) {\n\t\t\tSDocumentGraph graph = atomicalConsole.getGraph();\n\t\t\tSRelation rel = null;\n\t\t\t", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "   if self.stopped.stop_check():\n        break\n    try:\n    \"\"\"\n    Corpus loading worker\n    ---------------------\n    \"\"\"\n    from montreal_forced_aligner.corpus.helper import SoundFileInfoDict\n    from montreal_forcer", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "   FlightControlsResource,\n    \"/aircraft/sensor/flight_controls\",\n    resource_class_args=(sensor.flight_controls,)\n)\n\n    api.add_resource(\n    OrientationResource,\n    \"/aircraft/sensor/orientation", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "\n        self.assertAlmostEqual(gps.airspeed, fdmexec.GetAuxiliary().GetVequivalentFPS())\n        self.assertAlmostEqual(gps.heading, fdmexec.GetPropagate().GetPsiDeg())\n        self", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "   CMD_OPTION_HELP_HELP_LINE,\n    '--iq, --include-qualifiers Include qualifiers in the returned result',\n    '--s, --summary Show only a summary (count) of the objects.'\n    '--n, --", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "\tpublic static final String CTF_CTF_CTF_CTF_CTF_CTF_CTF_CTF_CTF_CTF_CTF_CTF_CTF_CTF_CTF_CTF_CTF_CTF_CTF_CTF", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "                       logError(exceptionClass.getSimpleName(), t);\n                        }\n                        else{\n                        logError(exceptionClass.getSimpleName(), t);\n                        }\n                        throw t;\n                    }\n                }\n            });\n        } finally {\n", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "                                      join_keyword=u'JAAN')\n\n    def test_full_e2e_gujarati_signup_and_cancel_flow(self):\n        logging.info(\"running e2e full flow for sign up + cancel in Gujarati...\")\n", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": " protected LocationUpdateRequester locationUpdateRequester;\n  protected ILock lock;\n  protected FragmentManager fragmentManager;\n  protected FragmentTransaction fragmentTransaction;\n  protected PlaceListFragment placeListFragment;\n  protected PlaceDetailFragment placeDetailFragment;\n  protected CheckinFragment checkinFragment;", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "   if adb == None:\n        print \"adb is not available\"\n        return\n    if adb.get_device_ip_address() == None:\n        print \"adb is not connected to any device\"\n        return\n    if adb.get_device_ip", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "# 44018, section 10.1\n# RRC procedures dictionnary\nGSM_RR_dict = {\n    0:'SYSTEM INFORMATION TYPE 13',\n    1:'SYSTEM INFORMATION TYPE 14',", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "\t\t\tif opts.vertexsrf:\n\t\t\t\tv_lh, faces_lh = nib.freesurfer.read_geometry(opts.vertexsrf[0])\n\t\t\t\tv_rh, faces_rh = nib.fre", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "       throw new QueryException(\"Operator '\" + exp.getOperator() + \"' is not allowed in a BETWEEN expression.\");\n    }\n\n    acceptOrVisitValue(exp.getRhsValue(), baseVariableName);\n    if (exp.getOperator().equals(Operator.B", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "       cacheService.createCacheList(listName);\n        loadListsFromDBService.start();\n      }\n    }\n  }\n\n  @FXML\n  public void deleteList(ActionEvent actionEvent) {\n    final String listName = cacheService.getSelectedCacheList", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "   ]\n    # 24007, section 11.2.3.1.2\n    # 24011, section 8.1.4.2\n    # 24011, section 8.1.4.3\n   ", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "                       TimeEntryOvertimeAggregation.OVERTIME_AGGREGATION_TYPE,\n                        new ArrayListMultimap<>(new ArrayList[1], new ArrayList[1])\n                        {\n                            @Override\n                            public boolean offer(Object key, Object object)", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "       }\n        if self._pkalg in _c:\n            self.signature = RSASignature()\n\n        elif self._pkalg == PubKeyAlgorithm.DSA:\n            self.signature = DSASignature()\n\n        elif self._pkalg", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "       self._exp_info = ul.get_exp_info(self._board_num, self._expansion_num)\n        return self._exp_info\n\n    @property\n    def supports_analog_input(self):\n        return self._exp_info.supports", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "\n        self.key_size = read_u16le(f)\n        self.index_ref_name = read_u16le(f)\n\n        self.references = {}\n        for i in range(count):\n\n        # read the whole of the index", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "       create_inactive_user(full_name, email, site)\n\n        # Send invitation email\n        send_connect_email(\n            email,\n            'request_invitation',\n            'request_invitation_email',\n            {'full_name': full_name", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "       if not self.draft_content:\n            return await Utilities.error(ctx.channel, f\"Draft content is empty. No form to be displayed.\")\n\n        print(self.draft_content)\n        return await Utilities.message(ctx.channel, f\"", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "       ex = Hitbtc('bcc_btc')\n        elif name == \"%s_BCC_ETH\" % constant.EX_HITBITC:\n        ex = Hitbtc('bcc_eth')\n        elif name == \"%s_EOS_BTC\"", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "       if item is not None:\n            yield item\n    elif self.xsd_types is None:\n        for item in context.iter_children_or_self():\n            if item is None:\n                pass  # '*' wildcard doesn't match document nodes\n            elif context", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": " public void helpTestData() {\n    DummySherpaServer server = new DummySherpaServer(10);\n    try {\n      // Read the data.\n      ServerResponder responder = server.getResponder();\n      InetSocketAddress serverAddress = server", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);\n\t\t}\n\t\tif (elt.hasAttribute(AlvisIRConstants.XML_SEARCH_EXPANDER_EXPANDER_TYPE)) {\n\t\t\tString exp", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "               MiPushClient.getInstance().init(this, \"1111111111111111111111111111111111111111111111111111", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "   private final KadConfiguration config;\n    private final KadStatistician statistician;\n\n    /**\n     * Connect to a Kademlia network using a bootstrap node\n     *\n     * @param server  The KadServer to connect to\n     * @param localNode", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "           tablefmt = table_format\n            tablefmt = table_format\n            tablefmt = table_format\n            tablefmt = table_format\n            tablefmt = table_format\n            tablefmt = table_format\n            tablefmt = table_format\n            tablefmt = table_format\n", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "   return words_api(wordnik_api, token)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "\tprivate ConnectorIssues connectorIssues;\n\t@InjectNext line of code:\n\tprivate Connector connector;\n\t@InjectNext line of code:\n\tprivate ErrorReporter errorReporter;\n\t@InjectNext line of code:\n\tprivate D", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "       self.assertIsNotNone(handle)\n\n    def test_create_event_invalid_handle(input_check=\"bManualReset\",\n                                         bManualReset=False,\n                                         bInitialState=False):\n        \"\"\"\n        Tests that invalid handle", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "       this.deployments = new SpringDeployments(restTemplate, root, tasks);\n        this.vms = new SpringVms(restTemplate, root, tasks);\n        this.jobs = new SpringJobs(restTemplate, root, tasks);\n    }\n\n    @", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "                   return parserHolder.process(roundEnv, currentAnnotatedElement, roundDescriptor, originatingElements);\n                })\n                .collect(Collectors.toList());\n        if (parsedPaths.isEmpty()) {\n        }\n        else {\n        }\n        if (", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "   protected final ReentrantLock lock = new ReentrantLock();\n\n    protected final CountDownLatch latch = new CountDownLatch(1);\n\n    protected final AtomicReference<ExecutorService> executorService = new AtomicReference<ExecutorService>(null);\n\n   ", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "           ActionManager actionManager = new ActionManager();\n            actionPopupGroup.getContextMenuContext()\n                    .getContextMenuPopupMenu()\n                    .getContextMenuPopupMenu()\n                    .getContextMenuPopupMenu()\n                    .getContextMenuPopup", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "   private GuiPanel contentPanel;\n\n    public GuiSettingsChannel(ServerSettings settings) {\n        super(settings);\n        this.channel = null;\n    }\n\n    public GuiSettingsChannel(ServerSettings settings, Channel channel) {\n        super(settings);\n       ", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "               return new BtnsQuickNotice();\n            case ConstantStr.FUNC_SCREEN_OFF_CODE:\n                return new BtnsScreenOff();\n            case ConstantStr.FUNC_CLEAR_NOTIFICATION_CODE:\n                return new B", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "       ExpandableComposite expandComposite = toolkit.createExpandableComposite(form.getForm(), SWT.NIMBUS);\n        toolkit.decorateExpandingExposing(expandComposite, false);\n        Composite composite = toolkit.", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "       type = Type.Types.string\n        self.assertEqual(\"string\", type.get_sample())\n\n    def test_type_get_sample__return_default_sample(self):\nNext line of code:\n        type = Type.Types.string\n        self.assertEqual", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "       new EventCommandHandler<>(StartCommand.class, StartEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetStartTimeCommand.class, StartEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "       self._cluster_type = _cluster_type\n        return self\n\n    def set_new_cluster_id(self, _new_cluster_id):\n        self._new_cluster_id = _new_cluster_id\n        return self\n\n    def set_cluster_", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "\n    query = {\n        'api_key': settings.FLICKR_KEY[0],\n        'frob': frob,\n        'oauth_token': request.GET['oauth_token'],\n        'oauth_token_secret': request.GET['oauth_token_", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t\t\t\t\tfcpMessage = new FCPFetchException(e);\n\t\t\t\t}\n\t\t\t\tTimer messageFetch = Timer.start();\n\t\t\t\tif(fcpMessage.getType().equalsIgnoreCase(\"FetchFailed\")) {\n\t\t\t\t\t", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "       if bytecode[k][2] in OP_OPC:\n          cond_stack_size += 1\n          k += 1\n          continue\n        elif bytecode[k][2] in OP_ARG:\n          cond_stack_size -= 1\n          k +=", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "   ArrayList<DailyExpense> dailyExpenses = null;\n    ArrayList<CreditCard> creditCards = null;\n    ArrayList<Expense> expenses = null;\n    ArrayList<Payment> payments = null;\n    ArrayList<String> expenseCategories = null", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "   all_platform_slugs.extend(MEMSOURCE_SLUGS)\n\n# admin\n\nadmin.register(Release)\nadmin.register(Package)\nadmin.register(Visitor)\nadmin.register(CIPipeline)\nadmin.register(Platform)\nadmin", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "\t\t\t\t\t}, e -> {\n\t\t\t\t\t\tAnimations.fadeFlip(listsPager, loadingProgress);\n\t\t\t\t\t\tSnackbar.show(this, R.string.error_connectionfailure);\n\t\t\t\t\t}, () ->", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "   def parse(self, ping_message: Sequence[str) -> PingStats:\n    \"\"\"\n    Parse ping command output.\n\n    Args:\n        ping_message (Sequence[str]):\n            Ping command output.\n\n    Returns:\n        PingStats", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "           // Assuming that the messages are sorted by id\n            latestMessageOnDisplay = new AtomicLong(0);\n        }\n\n        // If the chat is null, then the user is in a new chat\n        if (chat == null) {\n            // If the user is in a new", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "\tpublic static final int MAX_INVENTORY_ITEM_COUNT = 100;\n\tpublic static final int MAX_INVENTION_ITEM_COUNT_IN_INVENTION_INVENTORY = 100;\n\tpublic static final int MAX", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "   account = account_for_facebook_user(fb_user, person=person)\n    if request.user.is_anonymous():\n        # Create a new django User for the facebook user\n        user = User.objects.create_user(fb_user['user']['username'], fb", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "       assertThat(qe, is(isBatchStatement()));\n        assertThat(qe, isPrepared());\n        assertThat(qe, isBatchPrepared());\n        assertThat(qe, isPreparedOrBatchPrepared());\n        assertThat(q", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "     }\n    }\n\n    if (fileQueue.size() == 0) {\n      // No files in the queue, so we are the first in the queue\n      if (isTheFirstInQueue()) {\n        // We are the first in the queue, so we are the only", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "   if args.merge_strategy == MergingStrategies.greedy:\n        logger.info(\"Greedy merging\")\n        logger.info(\"Merging assembly points\")\n        merged_assembly_points = merge_assembly_points(assembly_points_by_sources)\n", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "       ThermometerResource,\n        \"/aircraft/sensors/thermometer\",\n        resource_class_args=(sensors.thermometer,)\n    )\n\n    api.add_resource(\n        PitotTubeResource,\n        \"/aircraft/sensors/", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "       msg_color=discord.Color.blue(),\n        footer=\"Global Config from GlobalConfigCache.GLOBAL_CONFIG_CACHE\")\n\n        return await ctx.send(embed=embed)\n\n\n    @staticmethod\n    def get_global_config_cache(", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "\t\t\t\t\tif (level.isInstalled())\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tshowConfirm(\n\t\t\t\t\t\t\tgetString(R.string.install_levels),\n\t\t\t\t\t\t\tgetString(R.", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "   private final WeeklyCaptionProvider<ITEM> weeklyCaptionProvider;\n\n    /**\n     * The default value for the {@link #currentTimeFormat} enum.\n     */\n    public static final TimeFormat DEFAULT_TIME_FORMAT = Format24H();\n\n   ", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "       this.vms = new SpringVms(restTemplate, root, tasks);\n    }\n\n    public Info info() {\n        return info;\n    }\n\n    public Releases releases() {\n        return releases;\n    }\n\n    public Stemcells stemcell", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "   (signerId, keyId) -> Lists.newArrayList(rsaVerifier);\n\n    locators = new VerifierProviders(rsaLocator, hmacLocator);\n    locatorsFromRuby = new VerifierProviders(rsaLocator, hmac", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "   protected EasyOnItemTouchListener easyOnItemTouchListener;\n    protected EasyOnViewAttachedToWindowListener easyOnViewAttachedToWindowListener;\n    protected EasyOnViewDetachedFromWindowListener easyOnViewDetachedFromWindowListener;\n    protected EasyOnItemCheck", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "               } catch (FilesException e) {\n                    assertTrue(e.getCode() == FilesConstants.HTTP_404_NOT_FOUND);\n                }\n            }\n\t\t\t\n\t\t\t// Clean up \n\t\t\tclient.deleteContainer(container", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "               }\n\n                if (trackHistoryEntry != null) {\n                    trackHistoryEntry.endTime = currentTime;\n                }\n\n                dao.update(trackHistoryEntry);\n            });\n        }\n\n        if (oldLiveInfo == null || !oldLiveInfo.", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "                       switch (home.getType()) {\n                            case APPLY:\n                                ((CandyBarMainActivity) mContext).selectPosition(1);\n                                break;\n                            case DONATE:\n                                if (mContext instanceof CandyBarMainActivity) {\n                ", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "       encoding = Default.ENCODING\n\n    convert_configs = load_convert_config(\n        logger,\n        ctx.obj[Context.CONVERT_CONFIG],\n        subcommand=\"url\",\n        app_configs=app_configs,\n        app_", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "   return None\n\n    def items(self, *args, **kwargs):\n        \"\"\" Returns a list of playlist items.\n\n        Example:\n        (playlist, items) = plex.Playlist('playlist')\n        items = playlist.items(filter=['on", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "       self.assertRaises(TypeError, _environment_to_string, {'a': 1})\n\n    def test_type_check_for_environment_value(self):\nNext line of code:\n        self.assertRaises(TypeError, _environment_to", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": " if gopts.pager:\n  if gopts.pager:\n  if gopts.pager:\n  if gopts.pager:\n  if gopts.pager:\n  if gopts.pager:\n  if gopts.pager:\n ", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "               if (taskConfig.getTaskQueueDelay() > 0) {\n                    // 设置任务重试延时\n                    taskData.setTaskQueueRetryDelay(taskConfig.getTaskQueueDelay() * 1000);\n                }\n               ", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "       self.assertRaises(RejectRequest, r.reject_status_code, 0)\n\n    @async_test()\n    async def test_reject_status_code(self):\n        r = RejectStatusCode()\nNext line of code:\n       ", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "       //用户的邮箱\n        stuEmail = split[2];\n        //用户的邮箱\n        stuEmail = split[2];\n        //用户的邮箱\n        stuEmail = split[2", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "   self.__device = device\n    self.__ifb_device = None\n    self.__con = None\n    self.__filter_id = None\n    self.__filter_id_list = []\n    self.__filter_id_map = {}\n    self.__filter_id_map_", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "       }\n        state[\"inventory\"] = inv\n\n    def serialize_player(self, state: Dict[str, Any], player: Player) -> None:\n        self.add_basic_properties(state, player)\n        self.add_inventory_property(state,", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": "  */\n  public Query visit(BasicSearch n, Query query) {\n    return visitBasicSearch(new VisitBasicSearch(n), query);\n  }\n\n  /**\n   * f0 -> (BasicSearchType())+ f1 -> ( Ord4Search() )?\n  ", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t\tthis.cleaningFolder = false;\n\t\tthis.surveyName = null;\n\t}\n\n\tpublic void setPipelineGenerator(PipelineGenerator pipelineGenerator) {\n\t\tthis.pipelineGenerator =", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "       UnicodeDecoder unicodeDecoder = new UnicodeDecoder();\n        if (dataDecoder.equals(UnicodeDecoder.class.getName())) {\n        }\n        else {\n        }\n        if (dataDecoder.equals(UnicodeDecoder.class.getName())) {\n", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "\n        except UncertainTimeError:\n            log.error(\"Sorry, your clock is out by more than 5 secs. Switzerland isn't going to work!\")\n            sys.exit(1)\n\n        # XXX this is a bit of a hack, but it's necessary", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "       cursorById.close();\n\n        // Test the basic content provider query\n        Cursor movieCursor = mContext.getContentResolver().query(\n                MovieColumns.CONTENT_URI,\n                null,\n                null,\n                null,\n                null\n        );\n\n        //", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "       DevisDialog(self, self.inscrit, self.current_cotisation[0).ShowModal()\n\n    def EvtGenerationContrat(self, _):\nNext line of code:\n        ContratDialog(self, self.inscrit, self.current_cotisation", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "       self.assertEqual(node_children(elem, 'element'), elem.iter())\n\n        elem = ElementTree.Element('element')\n        self.assertEqual(node_children(elem, 'element'), elem.iter())\n        self.assertEqual(node_children(elem,", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\t\tmapView = (MapView) getView().findViewById(\n\t\t\t\tConstants.MV_ID_MAPVIEW);\n\t\tmapView.setMap(map);\n\t\toverlays = new ArrayList<Overlay>();\n\t\toverlays.add(", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "                   mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                   ", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "       switch_core.SwitchCore.new_command_processor(self)\n        switch_core.SwitchCore.new_command_processor(self)\n        switch_core.SwitchCore.new_command_processor(self)\n        switch_core.SwitchCore.new_command_processor", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": " assert isinstance(config, LowRateConfig)\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('custom')\nNext line of code:\n  assert isinstance(config, CustomRateConfig)\n\n", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "       return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)\n\n    def consultar_status_operacional(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "   # TODO: model exclusions handling\n    # TODO: better reference state handling\n    mod_srf = Model(dbf, comps, phase_name, parameters={'GHSER'+c.upper(): 0 for c in comps})\n    mod_srf.models =", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "\n    api.add_resource(ForcesResource, \"/fdm/forces\",\n                     resource_class_args=(fdm.fdmexec,))\n\n    api.add_resource(EngineResource, \"/fdm/engine\",\n                     resource_class_args=(fd", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "   if self.corpus_word_set:\n        self.corpus_word_set = self.corpus_word_set.split(\" \")\n        self.corpus_word_set = [str(x) for x in self.corpus_word_set]\n       ", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "   public static final String TextBlockObject = \"String\";\n\n    private static final String EXTRA_EXPENSE_AMOUNT = \"expenseAmount\";\n    private static final String EXTRA_EXPENESE_CURRENCY = \"expenseCurrency", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "\tpublic final NetUtil net = new NetUtil();\n\tpublic final TimeUtil time = new TimeUtil();\n\tpublic final StringUtil str = new StringUtil();\n\n\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\n\tpublic static void main(String[]", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "       return mongoManager.getServerConfigurations();\n    }\n\n    private JPanel rootPanel = new JPanel(new BorderLayout());\n\n    private JPanel toolBarPanel = new JPanel(new BorderLayout());\n\n    private JPanel statsPanel = new JPanel(new Border", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\t\tFluent header = H1(Css.H1, \"TodoApp\");\n\t\theader.classs(Css.H1, Css.H1_BOLD);\n\t\theader.txt(\"TodoApp\");\n\t\tcontainer.header(header", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "               if(output == null) return;\n                if(SAVE_FILE_TO_STORAGE) {\n                    if(RETURN_DATA_AS_BYTE_ARRAY) {\n                        return;\n                    }\n                    if(SAVE_", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "\n    public void setShowFastScroller(boolean showFastScroller) {\n        mShowFastScroller = showFastScroller;\n        if (mFastScroller != null) {\n            mFastScroller.setShowBubble(mShowScroller", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "   with pytest.raises(ConstraintViolation):\n    with pytest.raises(ConstraintViolation):\n    with pytest.raises(ConstraintViolation):\n    with pytest.raises(ConstraintViolation):\n    with pytest.raises(", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "           GCActivitySet gcActivitySet,GCActivity gcActivity) {\n        if (dataset == null) {\n            dataset = new Dataset(gcTrace);\n        }\n        gcActivitySet.addGCActivity(gcTrace.get(gcTrace.getAllGCActivities().", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "   self.api.init_app(self.server.app)\n\n    @property\n    def api_version(self):\n        \"\"\"Returns the API version\"\"\n        return self.version\n\n    @property\n    def api_prefix(self):\n        \"\"\"Returns the", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "   self.settings_ini = settings_ini\n    self.tree_view = tree_view\n    self.settings_ini.save()\nzeex/core/core.py\nclass Controller(QtCore.QObject):\n    \"\"\"\n    Controller class for the Zeex project.\n", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "       MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE\n        )\n    )\n    group.add_argument(\n        \"--reordering\",\n        dest=\"reordering_rate\",\n        default=0,\n", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "   private final static Value<Boolean> CHAT_BOX_SHOW = Value(Boolean(false));\n\n    private final static Value<Boolean> CHAT_BOX_SHOW_PINGED = Value(Boolean(false));\n\n    private final static Value<Boolean> CH", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "        * @param event\n         *            The event that was triggered\n         */\n        void onDateClick(Date date, ContextMenuEvent event);\n\n        /**\n         * Triggered when a date was clicked\n         *\n         * @param date\n         *            The date and time", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "       self._db_type = db_type\n        return self\n\n    def set_user(self, user):\n        self._user = user\n        return self\n\n    def set_pass(self, pass):\n        self._pass = pass\n        return self\n\n    def", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "           Namespace namespace = namespacesHub.get(packet.getNsp());\n            namespace.onUpgrade(client);\n            break;\n        }\n\n        case MESSAGE: {\n            if (ackRequest.isAckRequested()) {\n                ackManager.", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "   private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\n\n    private ContentItemAdapter contentItemAdapter;\n    private List", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "\t\tPreprocessor[] preprocessors = setPreProcessors(pipeline.getPreProcessing());\n\t\tLOGGER.info(\"PreProcessing : \" + Arrays.asList(preprocessors).toString());\n\t\t\n\t\tPostProcessor[] postProcessors = setPostProcess", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "   PCollection<GCPProject> liveProjects =\n        pipeline.apply(\"Read live projects\", LiveProjectSource(org));\n    // Convert the live projects to GCPResourceState objects.\n    PCollection<KV<GCPResource, GCPResourceState>> liveStates =\n       ", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "       expiry = Timestamp(Timestamp.timestamp(datetime.now(timezone.ut\n\n        expiry = Timestamp(Timestamp.timestamp(datetime.now(timezone.ut\n        expiry = Timestamp(Timestamp.timestamp(datetime.now(timezone.ut\n        expiry", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "   self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,\n                                               dim, vocab, lookup,\n                                               fork_and_rnn, cache=self._cache)\n\n        if def_reader ==", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "   private final ChatManagerCallback _callback = new ChatManagerCallback();\n    private final ChatManagerCallback _txCallback = new ChatManagerCallback();\n    private final ChatManagerCallback _pendingCallback = new ChatManagerCallback();\n    private final ChatManagerCallback _pending", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "   private ProgressDialog progressDialog;\n    private static final String VIDEO_QUALITY = \"VIDEO_QUALITY\";\n    private static final String VIDEO_SIZE = \"VIDEO_SIZE\";\n    private static final String VIDEO_DURATION = \"", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "   RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInUpRight(RotateInUpRight.class),\n    RotateOut(RotateOut.class),\n    RotateOut", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "       self.request.user = self.object\n        self.request.user.perfil = self.request.user.perfil.perfil\n        self.request.user.perfil.zonas_permitidas = self.request.user.perfil.zonas_permit", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "       return null;\n}\n\n    public static FogDescriptor convert(Fog f) {\n        FogDescriptor descriptor = new FogDescriptor();\n        descriptor.setFog(f);\n        return descriptor;\n    }\n\n    public static Fog convert(F", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\tpublic void close()\n\t{\n\t\tif(this.handle != null) this.handle.close();\n\t\tall_open_handles.remove(this);\n\t\treadOnly = false;\n\t\tloomPath = null;\n\t\tloomVersion = null", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "   ActorMoviesComponent plus(ActorMoviesModule actorMoviesModule);\n    ActorInfoComponent plus(ActorInfoModule actorInfoModule);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tview.initProgressView(vals);\n\t\t\tview.initProgressView(vals);\n\t\t\tview.initProgressView(vals);\n\t\t\tview.initProgressView(vals);\n\t\t\tview.initProgressView(vals);", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "   def get_inventory(self, slug=None):\n        \"\"\"\n        Get Inventory\n        :param slug: slug\n        :return: dict\n        \"\"\"\n        if not slug:\n        # 1. Get Inventory\n        # 2. Get Package", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\tlogManager.logInfo(this, \"Getting the endpoint url.\");\n\t\t\tString endpointUrl = serviceDiscoveryInfo.getEndpointUrl(endpointType);\n\t\t\tif (endpointUrl == null) {\n\t\t\t\tthrow new APIWrapperException(Error.", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "       if request.method == \"POST\":\n            form = PlanillaDeRelevamientoForm(request.POST, user=user)\n            if form.is_valid():\n                form.save()\n                messages.success(request, 'La planilla de relevación fue seleccion", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "     self._cstr = Comparator(cmp_kind=root.data[0], cmp_value=root.data[1])\n    else:\n      self._cstr = Undef()\n    self._root = root\n\n  def __repr__(self):\n    return", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": " private ActionSupportHandler<MessageAction>         messageActionSupportHandler         = new ActionSupportHandler<MessageAction>(MessageAction.class);\n  private ActionSupportHandler<StartRecordingAction> startRecordingActionSupportHandler = new ActionSupportHandler<StartRecordingAction>(StartRecordingAction.class", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {\n\t\tif (getRound() != null) {\n\t\t\tthrow new PlayerPresentException(ChatColor.RED + Main.locale.getMessage(\"error.player.alreadyInRound\"));", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "   assert_array_equal(fold([MIN_HASH_VALUE], 1024), [1023])\n    assert_array_equal(fold([MIN_HASH_VALUE], 1234567890), [123456", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "   return result\n\n\n@method(function('format-dec', nargs=(2, 3),\n                 sequence_types=('xs:integer?', 'xs:string', 'xs:string?', 'xs:string')))\ndef evaluate_format_dec_function(self,", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "\t\t\tif model_item.parent() is not None:\n\t\t\t\tdefault_flags = default_flags | Qt.ItemIsUserRole\n\t\t\tif model_item.parent() is not None:\n\t\t\t\tdefault_flags = default_flags | Qt.Item", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "       object1.array = array\n        object2.array = array\n        object3.array = array\n\n        object1.object = object2\n        object2.object = object3\n\n        object1.object.object = object2\n        object2.object.object = object", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "         TemplateCatalogConfig templateCatalogConfig = new TemplateCatalogConfig(catBytes);\n          TemplateLoader templateLoader = new TemplateLoader(templateCatalogConfig);\n          //TODO: C,  for multi test we really need to have it writing to multiple ring buffers.\n          ByteArray", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": " to_map_and_back(AFO, AmplitudePoly(AmplitudeBase.UNITS_AMPLITUDE, (1, 2)))\n\n  to_map_and_back(TFO, TCXOPoly(1))\nNext line", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "               hasJsonPath(\"total\",\n                        allOf(\n                                containsString(\"100\"),\n                                containsString(\"100\"))));\n\n        query = \"http://localhost:9200/\" + mapping.getIndex() + \"/\" + mapping.getType()", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "       }\n        if not _c[self._pkalg, self.pk_type]:\n            raise PGPDecryptionError(\"Unknown pk_type\")\n\n        self.pk_type = _c[self._pkalg, self.pk_type]\n\n        if self.", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\n\t\tGeoJSONWriter.getInstance().registerGeoJSONWriter(new GeoJSONWriter());\n\n\t\t// Cachamos el contenido de la cache\n\t\tif (CAC", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "                       res =\n                        Schema.search(\n                            new ExtMutables().mput(Schema.InvokeKeys.ENTITY, context.get(Schema.InvokeKeys.ENTITY))\n                            .mput(Schema.InvokeKeys.ENTITY_KEYS, context.", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "   url(r'^users/list/$', users_list, name='users-list'),\n    url(r'^users/new/$', new_user, name='new-user'),\n    url(r'^users/edit/(?P<uuid_token>[-\\w]+", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "                               updateAdapter();\n                            }\n                        }\n                });\n                dialogFragment.show(getFragmentManager(), \"play_settings_dialog\");\n            }\n        }\n\n    }\n\n    private void startLearnActivity() {\n        if (stack != null)", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "   private DropMenuAdapter dropMenuAdapter;\n    private DropDownMenu dropDownMenu;\n    private ArrayList<String> listUrl;\n    private HashMap<String,String> mapUrl;\n    private ArrayList<String> listUrlUrl;\n    private HashMap<String,String> mapUrlUrl", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "       obj.socketTags = []\n        obj.blockLabel = None\n        obj.blockWidget = None\n        obj.comment = None\n        obj.buffImg = None\n        obj.collapseLabel = None\n        obj.last_link = None\n        obj.blockShape = None\n", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "\n        f = XDA(XorDiff(d1), XorDiff(d2))\n        beta = RXDiff(d3)\n\n        i, j = self.find_preimage(f, beta)\n\n        assert i == d1.val\n        assert j", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "\t\tpublic static Node getTransform(Node node, NodeTransformer transformer) {\n\t\t\tif(node == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tswitch(node.getType()) {\n\t\t\t\tcase ConstantNode: {", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\tcommands.add(new CommandList());\n\t\tcommands.add(new CommandSetTo());\n\t\tcommands.add(new CommandSetFrom());\n\t\tcommands.add(new CommandOpen());\n\t\tcommands.add(new CommandClose());\n\t\tcommands.add(new", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "       SASLMechanism.Challenge challenge = new SASLMechanism.Challenge(\n            challengeData);\n        connection.config.setSASLChallenge(challenge);\n        connection.config.setSASLStatus(SASLMeaning.CH", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "Hight32 = HightCipher.get_Hight_instance(HightCipher.HightInstance.hight_32_64)\nShacal132 = Shacal1Cipher.get_Shacal1_instance(Shac", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "   private RecyclerView.LayoutManager mLayoutManager;\n\n    private SongListAdapter mSongListAdapter;\n\n    private Playlists mPlaylists;\n\n    private SortOrder mSortOrder;\n\n    private int mSortColumn;\n\n    private int mSortDirection;\n\n", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "       mSpectaculumView.setEffect(effect);\n        mSelectedEffect = effect;\n        if (effect instanceof ImmersiveEffect) {\n        mImmersiveSensorNavigation = new ImmersiveSensorNavigation(mSpectaculumView);\n        mIm", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "       #\n        # ESM_dict\n        #\n        ESM_dict[ESM_dict[ESM_dict[ESM_dict[ESM_dict[ESM_dict[ESM_dict[ESM_dict[ESM_dict[ESM_dict[", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "\n        }\n\n    };\n\n    private PlaylistPicker mPlaylistPicker;\n\n    private CollapsingToolbarLayout mCollapsingToolbarLayout;\n\n    private GradientDrawable mGradientDrawable;\n\n    private View mView;\n\n    private View mView", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "   if self.stopped.stop_check():\n        return\n    self.log_debug(f\"Parsing {self.corpus_directory}\")\n    self.log_debug(f\"    {self.corpus_directory}\")\n    self.log_debug(f\"", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\t@Override\n\tpublic void addUserToUserManagement(String user) {\n\t\tUserManagement.addUser(getCurrentUserName(), user);\n\t}\n\n\t@POST\n\t@Path(\"getuser/{user}\")\n\t@Produces(\"application/json\")\n\t@Override", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "   Observable<ApiInfo> apiInfo(@Query(Constants.KEY) String apiKey);\n\n    /**\n     * Returns the total number of API credits available for the given API key.\n     *\n     * @param apiKey account api key\n     */\n    @GET(\"api-", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "   public void visit(MeasurementCollectingVisitor visitor) {\n    }\n\n    @OverrideNext line of code:\n    public void visit(MeasurementCollectingVisitor visitor, ImmutableSet<Measurement> measurements) {\n    }\n\n    @OverrideNext line", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "   \"\"\"\n    Testing the Slaner example\n    \"\"\"\n    # Slaner's example\n    # 1000 Hz\n    # 1200 Hz\n    # 1400 Hz\n    # 1600 Hz\n", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "   if is_undefined_length:\n    yield is_undefined_length\n\n    if is_undefined_length:\n    yield is_undefined_length\n\n    if is_undefined_length:\n    yield is_undefined_length\n\n    if is_undefined_length:\n   ", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "   for (ICommentProcessor commentProcessor : commentProcessors) {\n        if (commentProcessor == null) {\n            continue;\n        }\n        if (commentProcessor.getClass() != null) {\n            commentProcessor.getClass().getClassLoader();\n        }\n        if (comment", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "   public void onStart() {\n        super.onStart();\n        inputManager.showSoftInput(query, InputManager.HIDE_ON_DESK_ONLY);\n    }\n\n    @Override\n    protected void onResume() {\n        super.onResume", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "       self.flags = NotationDataFlags(val)\n\n    @flags.register(bytearray)\n    def flags_bytearray(self, val):\n        self.flags = NotationDataFlags.int_to_flags(val)\n\n    @sdproperty\n    def key", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "       for lm in lexmsgs:\n        self.addMessage(lm, True)\n        if len(self.messages) == 0:\n        return\n        self.textInput.clear()\n        self.textInput.textChanged.connect(self.clearNewMessage)\n", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "\n    if not is_from_arg(arg):\n        raise TypeError('Unexpected type: {!r}, instead of: {!r}'\n                        .format(arg.__type__, type_))\n\n\ndef check_args(args, fn_type, env):\n", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "   if isinstance(value, GregorianMonthDay):\n        return value\n\n    try:\n        if isinstance(value, UntypedAtomic):\n            return GregorianMonthDay.fromstring(value.value)\n        elif isinstance(value, (Date1", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "   if not features:\n        features = {}\n        for dataset in datasets:\n            for prop in get_data_quantities(dataset):\n                features[prop] = get_feature_transforms(prop, datasets)\n            for prop in get_prop_quantities(dataset):\n", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "\n    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerComponentController componentController,\n            FsmPlayer fsmPlayer, AdMediaModel adMedia) {\n\n        if (isNull(fsmPlayer)) {\n            return;\n        }\n\n        if", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "           ProximitySensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 7 || type == 0) {\n            TemperatureSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 8 || type", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "   Call<SuggestResponse> getSuggest(@QueryMap Map<String, String> serviceIds,\n                                     @Query(\"q\") String q,\n                                     @Query(\"limit\") Integer limit,\n                                     @Query(\"pos\") String pos,\n                                    ", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "   return self.stream(model, position)\n\n    def prepare(self, model_or_index, key, filter=None, projection=\"all\",\n        forward=True, parallel=None, consistent=False):\n        \"\"\"Create a reusable :class:`~bloop.search.", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "   self.log.info(\"confusion matrix: {0:s}\".format(format(confusion_matrix, ConfusionMatrixFormatter(self.keep_prob))))\n\n        self.log.info(\"confusion matrix: {0:s}\".format(format(confusion_matrix", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "\tprivate BannedIpServices bannedIpServices;\n\t@Resource\n\tprivate ChallengeServices challengeServices;\n\t@Resource\n\tprivate SubmissionServices submissionServices;\n\t@Resource\n\tprivate Categories cateServices;\n\t@Resource\n\tprivate CountryServices countryServices;\n", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "   def get_query(self, query_id):\n        record = self.client.command('SELECT FROM {}'.format(query_id))\n        return self.query_from_record(record[0) if record else None)\n\n    def get_subquery(self, sub", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "   def decoder(self) -> FeedPreviousRNN:\n        \"\"\"\n        Creates the decoder RNN.\n\n        The decoder RNN receives the decoder input sequences as input, and is initialized with the hidden representation\n        of the encoder.\n\n        Returns\n", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "   for platform in Platform.objects.all():\n        if not platform.platform_slug:\n            continue\n        all_platform_slugs.append(platform.platform_slug)\n\nfor platform in Platform.objects.all():\n    if not platform.platform_slug:\n        continue", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "   @Override\n    public boolean add(SelectorGroupNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SelectorNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(SelectorSegmentNode", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "\tpublic static H1 h1(Attribute... attributes) {\n\t\treturn new H1(attributes);\n\t}\n\n\tpublic static H2 h2(Attribute... attributes) {\n\t\treturn new H2(attributes);\n\t}\n\n\tpublic static H3 h3(", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "       if (benchRes.getMeth() == null) {\n        }\n        else {\n        }\n        if (benchRes.getMeth().getExec() == null) {\n        }\n        else {\n        }\n        if (benchRes.getM", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": " for node in self.graph.nodes:\n    if node.kind == ControlFlow.N_ENTRY:\n      continue\n    if not has_true_false_branchs(node.edges):\n      continue\n    parent_loop = get_parent_loop(node)\n", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\t\tbreak;\n\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.treeFile);\n\t\t\t\tbreak;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "\n    # XPath 3.0 implementation - part 3 (functions)\n    #\n    # Copyright (c), 2018-2020, SISSA (International School for Advanced Studies).\n    # All rights reserved.\n    # This file is distributed", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "               }\n            };\n\n            // The various events that could possibly change the room topic\n            if (Event.EVENT_TYPE_STATE_ROOM_TOPIC.equals(event.type)) {\n                RoomState roomState = JsonUtils.toRoomState(event.content", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\t\n\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlInsertFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();\n\n\t// PostProcessing\n\t\n\tprivate NoopPostprocessor noopPostprocessor = new NoopPost", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "       DocumentDialog(self, ReleveSIEJModifications(annee, site)).ShowModal()\n\n    def OnGenerationReleveSAL(self, _):\n        annee = self.releves_choice.GetClientData(self.releves_", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "       H += crosstens(m * J_rot)\n        H += crosstens(I)\n        H += crosstens(m * H_rot)\n        H += crosstins(I)\n        H += crosstins(m * H_", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "       if (queuedProjectResult == null) {\n            return;\n        }\n        if (queuedProjectResult.queuedProject == null) {\n        }\n        if (queuedProjectResult.queuedProject.pattern == null) {\n        }\n        if (queued", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "       });\n        // Register the virtual economy service\n        game.getServiceManager().setProvider(this, VirtualEconomyService.class, virtualEconService);\n        // Register the player economy service\n        game.getServiceManager().setProvider(this, PlayerEconomyService.class", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "   if prior.name == 'zero':\n        prior = PriorSpec(prior.name, np.zeros(len(params)) * np.std(params))\n        _log.info('Zero prior for the parameters.')\n        prior.name = 'zero'\n        prior.", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "     return Const(arg)\n    else:\n      return Undef(arg)\n  elif op == OP_LOAD_TUPLE:\n    return Undef(arg)\n  elif op == OP_LOAD_STRING:\n    return Undef(arg)\n  elif op == OP", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "\tprivate final Config config;\n\tprivate final PingPongEq pingPongEq;\n\tprivate final Physics physics;\n\tprivate final SpriteBatch batch;\n\tprivate final ClientEntityController playerController;\n\tprivate final ClientEntityController[] controllers;\n\tprivate final ClientEntityController[]", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "                   ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor)sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMP:\n                    TempSensorView t", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\tpublic List<AuthorWithBooks> getAuthorsWithBooks() {\n\t\treturn authorRepository.findAll();\n\t}\n\n\t@Transactional(readOnly = true)\n\tpublic List<Book> getBooks() {\n\t\treturn bookRepository.findAll();", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "\tpublic SQLBatch(Class<T> rootClass, ISchema schema) {\n\t\tsuper();\n\t\tthis.schema = schema;\n\t\tthis.rootQuery = new SQLQuery(rootClass, null, null, null);\n\t}\n\t\n\tpublic SQLBatch(Class", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "       if is_app_main_activity(app_info):\n            # 进入主应用程序\n            # 进入主应用程序\n            # 进入主应用程序\n            # 进入主应用程序\n            # 进入", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "    */\n    Genotype parseGenotypes(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return genome.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into genome\n", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "               Placeholder.typed(bar_type, 'bar'),\n            ]),\n        ]),\n        {'bar': bar_type},\n    )\n\n\ndef test_args_infer():\n    def foo(arg):\n        inc_type = Func[[IntType],", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "       PreparedExecution pe = ds.getFirstPrepared();\n\n        assertThat(pe, success());\n        assertThat(pe, failure());\n\n        assertThat(pe, isPrepared());\n        assertThat(pe, isBatchPrepared());\n        assertThat", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "\t\t\t\t\tself._properties_dock.set_item(selection[0)\n\t\t\t\t\tself._properties_dock.set_item(selection[0)\n\t\t\t\t\tself._properties_dock.set_item(selection[0)\n\t", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "                           return new NotFoundException(cause);\n                        default:\n                            throw new ApiException(cause);\n                    }\n                }\n            }\n        };\n        _config = config;\n        mAdapter = new RestAdapter(BASE_URL, gsonset", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\n\t\tregisterRenderer(String.class, new DefaultStringRenderer());\n\t\tregisterRenderer(StringTemplate.class, new StringTemplateRenderer());\n\t\tregisterRenderer(StringTemplate.class, new StringTemplateRenderer());\n", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t\tlabelFactory = new CapitalizeFacetLabelFactory(labelFactory);\n\t\t}\n\t\treturn labelFactory;\n\t}\n\t\n\tprivate static final ExpandingFacetSubQuery getFacetSubQueryType(SearchConfig search, Element elt) {", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "   url(r'^toggle-pipeline-config$', ajax_toggle_pipeline_config.as_view(), name=\"toggle-pipeline-config\"),\n    url(r'^toggle-pipeline-config-toggle-pipeline-config$', ajax_toggle_pipeline", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "                       if (bitmap != null) {\n                            intent.putExtra(Extras.EXTRA_IMAGE, bitmap);\n                        }\n                        if (Preferences.get(mContext).isCropWallpaper()) {\n                            intent.setRequestingPermission(Manifest", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "   url = urlunparse(('http', 'vimeo.com', 'videos', 'user', 'videos.php?q=', urlencode({'q': 'videos.php?q=', 'user': nsid, 'page': 1, 'sort_by", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "   # Get the pointing direction and magnitude\n    px_mgmt, px_dir, px_magn = fovArea(platepar, x_mean, y_mean, test_px_sum,\n        # Get the pointing direction and magnitude\n        px_m", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "   grid_size = int(np.sqrt(np.sum(np.log(np.log(np.log(np.log(np.log(np.log(np.log(np.log(np.log(np.log(np.log(np.log(np", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "           Board.this.rollDices();\n            Board.this.doubleDices();\n            Board.this.rollDices();\n            Board.this.doubleDices();\n            Board.this.rollDices();\n            Board.this.doubleDices();\n            Board.this", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "   self.assertEqual(etree_iter_paths(root), [['a', 'b1', 'c1'], ['a', 'b1', 'c2'], ['a', 'b2'],\n                                                 ['a', 'b3', 'c3'], ['a', '", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "       self.runner.add(ContentSimhashSampling(), with_child=True)\n\n    def test_get_soft_404_sample(self):\n        self.runner.add(RejectStatusCode(), with_child=True)\n        self.runner.add(", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "   cfecancelamento = CFeCancelamento(\n            destinatario=Destinatario(\n                    CPF='11122233396',\n                    xNome=u'João de Teste'),\n            chCanc='C", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "\n    List<UserName> parseUserName(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return a carrier.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into a carrier\n    ", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "           EtsiResponse resp = this.client.sendRequest(req);\n            System.out.println(\"Request ID: \" + req.getRequestId());\n            System.out.println(\"Response ID: \" + resp.getResponseId());\n            System.out.println(\"Response status:", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "\t\telif type(obj) is CalcSheetAnalysis:\n\t\t\treturn get_icon(\"calvcsheet\")\n\t\telif type(obj) is Proformer:\n\t\t\treturn get_icon(\"proformer\")\n\t\telif type(obj) is Transformer:", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "           RotationVectorSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 12 || type == 0) {\n            RelativeHumiditySensorCollector.flushDBCache(deviceID);\n        }\n        if(type ==", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "\tprivate List<PlayerOverview> playerOverview;\n\tprivate List<TeamLeaders> teamLeaders;\n\tprivate List<TeamLeadersResponse> teamLeadersResponse;\n\tprivate List<TeamScheduleResponse> teamScheduleResponse;\n\tprivate List<", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "\n        if (userFeedback.getBatteryPercentage() == 0) {\n            onError(new ErrorObject(UNAUTHORIZED_ERROR));\n            return;\n        }\n\n        if (userFeedback.getDeviceInfo().getBatteryPercent", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "       request[object_index] = key\n        if not (table_name in table_index):\n            table_index[table_name] = set()\n        table_index[table_name].append(key)\n\n        for obj in objs:\n            if not (table", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "               draw_art(key_size, key_algo, key_fpr, color=True, longid=True)\n                print(f'{fingerprint} ({description})',\n                      f'{created_at}',\n                      f'{size_with_", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "admin.site.register(Sector, SectorAdmin)\nadmin.site.register(Target, TargetAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Component, ComponentAdmin)\nadmin.site.register(Progress, ProgressAdmin)\n\n", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "   return RespostaExtrairLogs.analisar(retorno)\n\n    def consultar_sat_local(self, *args, **kwargs):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.consult", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "       self.assertEqual(node_document_uri(ElementTree.XML(xml_test)), 'http://www.w3.org/XML/1998/namespace')\n        document = ElementTree.parse(io.StringIO(xml_test))\n        self.assertEqual", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "                   Arrays.sort(sorted, new StartDateComparator(sortDirection));\n                break;\n                case TIME_ASC:Next line of code:\n                    Arrays.sort(sorted, new ItemDurationComparator(sortDirection));\n                break;\n                default:\n               ", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "   if self.subset:\n        self.worker.current_subset = self.subset\n        self.logger.info(f\"Current subset: {self.subset}\")\n        self.subset_training_complete = True\n        self.training_complete = True\n        return\n\n    self", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "   private final OkHttpClient httpClient;\n\n    /**\n     * Constructs a new {@link com.jagrosh.jdautilities.oauth2.OAuth2Client OAuth2Client}\n     * instance using the given {@code builder}.\n     *\n     * @", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "   private final Vms vms;\n    private final Info info;\n    private final Releases releases;\n    private final Stemcells stemcells;\n    private final Deployments deployments;\n    private final Vms vms;\n    private final Info info;\n    private", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "\n    public void setAudiologistInfo(AudiologistInfo audiologistInfo)\n    {\n        _chat.setAudiologistInfo(audiologistInfo);\n    }\n\n    public void setAudiologistInfo(String audiologistName, String audiologistPhone, String audiologistEmail", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "       return new SvnJavaAddCommand( this );\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected SvnCommand getBranchCommand()\n    {\n        return new SvnJavaBranchCommand( this );\n    }\n\n    /**\n", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "   public void onMouseEvent(GuiMouseEvent event) {\n        switch (event.getMouseEvent()) {\n            case RELEASE:\n                if (ACTIVE.isImmutable()) {\n                    if (this.channel.getStatus() == ChannelStatus.ACTIVE) {\n                ", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "       DATA[looptest][0], EPSILON, FiniteDifferenceSchemes.FORWARD);\n        DoubleSad[] d2Sad = new DoubleSad[2];\n        d2Sad[0] = new DoubleSad(D3(0,", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "           VotingModule.class,\n            PermissionsModule.class,\n            SpectatorModule.class,\n            KitsModule.class,\n            ScoreboardModule.class,\n            FriendlyFireModule.class,\n            BroadcastsModule.class,\n            PlayerFreezeModule.", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "    */\n    public static DownloadQueue newDownloadQueue() {\n        return new DownloadQueue(3);\n    }\n\n    /**\n     * Create a new download queue, the specified thread pool size.\n     *\n     * @param threadPoolSize thread pool size.\n     * @return", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": " public void onInit(Config config, WatcherRegistry watcherRegistry) {\n  }\n\n  @OverrideNext line of code:\n  public void onExit(Config config, WatcherRegistry watcherRegistry) {\n  }\n\n  @OverrideNext line of code:\n  public", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "    * @throws JMingoParserException {@link JMingoParserException}\n     */\n    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {\n        Validate.notNull(element, \"parseQuerySetConfigTag::element cannot be null", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "       left_foot_task = SwingFootTask(\n            self.robot, swing_weight, swing_height=self.swing_height)\n        self.robot.ik.add(left_foot_task)\n        if self.cur_stance.right_foot is", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "   BvNeg, BvNot, Extract, ZeroExtend, Repeat, Ite\n\n\n@given(\n    (BvAnd, BvOr, BvXor, BvComp, BvUlt, BvUle, BvUgt,", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\t\taOutput.writeInt16(SegmentMarker.APP14.CODE);\n\t\t\taAPP14Segment.encode(aOutput);\n\t\t\taJPEG.mICCProfile.encode(aOutput);\n\t\t\taOutput.write", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "\n        }\n\n        public HibiscusExportType getType() {\n            return type;\n        }\n\n        public void setType(HibiscusExportType type) {\n            this.type = type;\n        }\n    }\n\n    /**\n     * Er", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "   from montreal_forced_aligner.utils import run_mp, run_non_mp\n    from montreal_forced_aligner.helper import parse_old_features\n    from montreal_forced_aligner.models import AcousticModel\n    from montreal", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "       LoreProperties properties = PlayerHandler.getCollectedLore(entityPlayer);\n        if (!properties.hasLore(key))\n        {\n        // Add\n        if (entityPlayer.getInventoryStackable() != null) {\n            ItemStack stack = entityPlayer.get", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "   private static final DateTimeFormatter TRANSACTION_DATE_FORMATTER = DateTimeFormatter.ofPattern(\"dd MMM YYYY\");\nNext line of code:\n    private static final DateTimeFormatter RECURRING_DATE_FORMATTER = DateTimeFormatter.ofPattern(\"dd MMM Y", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "\tpublic static final Util instance = new Util();\n\n\tpublic static final Logger logger = LogUtil.getLogger(Util.class);\n\n\tpublic static final String DEFAULT_TIME_UNIT = \"seconds\";\n\tpublic static final String DEFAULT_TIME_UNIT_SECONDS = \"", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "   FadeOutUp(FadingOutUp.class),\n    FadeOutLeft(FadingOutLeft.class),\n    FadeOutRight(FadingOutRight.class),\n\n    RotateIn(RotateIn.class),\n    RotateInUp(RotateIn", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "       problem = SearchSkCh(ch, der_mode=der_mode)\n\n    if check:\n        problem.check()\n\n    if search_mode == ChSearchMode.Optimal:\n        problem.solve(solver_name, verbose_level, verbose_level +", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "       return H()\n\n\n\n\nclass HostContainerTest(unittest.TestCase):\n    def get_hosts(self):\n        \"\"\" Use local hosts. \"\"\"\n        class H:\n            h1 =  LocalSSHHost1\n            h2 =  LocalSSHHost2", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "       if command in self.__tc_command_output.command_history:\n            yield self.__tc_command_output.command_history[command]\n        else:\n            yield command\n\n        yield \"{:s} {:s} {:s} {:s} {:s} {:s}", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": " assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n\n\ndef test_selectEncoder_2GLONASSL2():\n  '''\n  Encoder selection test\n  '''\n  enabledBands = {\n    # GPS\n    # GL", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "    * @return A List of Expenses\n     */\n    public List<Expense> getExpensesFromCreditPeriod(int creditPeriodId) throws CreditPeriodNotFoundException {\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n        List<Expense> expenses", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "   private SimpleDateFormat monthDayFormatter;\n\n    private OnDayChangeListener onDayChangeListener;\n    private OnMonthChangeListener onMonthChangeListener;\n    private DisplayEventCallback<Calendar> displayEventsCallback;\n\n    private Handler requestHandler;\n    private Handler responseHandler;\n", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "   my_stream = white_noise()\n    assert isinstance(my_stream, Stream)\n    assert my_stream.take(25) == [0] * 25\n\n  def test_inf_input(self):\nNext line of code:\n    my_", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "               returns_markup(t1.__instance__)\n                )\n                raise TypeError('Cannot unify placeholder {} to {}'.format(\n                    repr(t1.__instance__),\n                    repr(t2)))\n        else:\n            t1.__instance__ = t2\n", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "       blink_url,\n        auth_token,\n        account_id,\n        client_id,\n        client_verification_required,\n        region_id,\n        refresh_time,\n        motion_interval,\n        blink_url,\n        auth_token,", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "\t\t\tif isinstance(model_item.data, Sketch):\n\t\t\t\tdefault_flags = default_flags | Qt.ItemIsEditable\n\t\t\tif isinstance(model_item.data, Proformer):\n\t\t\t\tdefault_flags = default_flags", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "   self.next_sink.AsyncProcessRequest(sink_stack, msg, buf, headers)\n\n    if self._varz.deserialization_failures():\n      self._varz.serialization_failures()\n\n    return self.next_sink.", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "       assertThat(out.toString(), equalTo(\"[runtime.threads.where(nameIs(\\\"remotely-observed-thread\\\"))]\"));\n    }\n\n    @Test\n    public void jmxRemoteConnectViaCliWithJmxConnectTimeout() throws Exception {", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "       return new DrumStoreEntry<>(data, DrumOperation.APPEND_UPDATE, null);\n    }\n\n    @Test\n    public void testAppend() throws Exception {\n        try (SimpleDataStore<PLDTestData> dataStore = new SimpleDataStoreImpl<>(this", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "       MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视频: \" + result.getItems().size() + \" ", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "       return new RoxanaProperties(new MockedMultiBusinessException(new MockedBusinessException(\"test01\"),\n                new MockedBusinessException(\"test02\")));\n    }\n\n    private ResponseProcessorManager getResponseProcessorManagerForTest() {\n        return new Response", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "   self._ping_ar.set_exception(Exception('Ping exception'))\n    self._Shutdown('Ping exception')\n    raise\n\n  def _SendQueue(self):\n    \"\"\"Constructs and sends a message to the remote server.\"\n    \"\"\"\n    self._", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "   assert freq2lag(lag2freq(v)) == v\n\n  def test_almost_eq_is_almost_equal(self):\n    for a, b in [\n        (1, 1),\n        (1, 1.0000", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "           Proxy14Service.class,\n            Proxy15Service.class,\n            ProjectService.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "       self.bot.group.add_group(group.GuildGroup(self.bot.group.group, GUILOD_METADATA_KEY, GUILOD_CONFIG_KEY, GUILOD_GLOBAL_CONFIG_KEY))\n\n        self.bot.group", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "   if not numeric_equal(operands[0], operands[1]):\n        raise self.error('XPTY0004', \"Comparison {!r} with {!r}\".format(\n            operands[0], operands[1]))\n    return True", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "       welcomeString.setText(Utils.getWelcomeString(getActivity()));\n\n        return header;\n    }\n\n    private void initializeEvents() {\n        mEvents = new ArrayList<>();\n        mEvents.add(new Event(Utils.getWelcomeString(getActivity()), MEN", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "       InviteToChatFragment inviteToChatFragment = new InviteToChatFragment(newChatId,\n                                                                                  selectedUsers,\n                                                                                  classToNotify);\n        InviteToChatFragment inviteToChatFragment =", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "       MchPayResponse response = wxPayClient.unifiedOrder(request);\n\n        Assert.assertTrue(response.resultCode.equals(WXPayConstants.SUNDER_SUNDER_SUNDER_SUNDER_SUNDER_SUNDER_SUNDER", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "       MessageTranslated messageTranslated = creator.create(KEY, STRING_PARAMETER_NAME_01, RANDOM_STRING_PARAMETER_VALUE_01);\n        assertEquals(KEY, messageTranslated.getKey());\n        assertEquals(", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "\t\tif (tag == CODEINT12_TAG)\n\t\t\treturn readBigIntValue(d1);\n\t\telse\n\t\t\tthrow new IOException(\"Not a code-int: \"+readOperand(d1).toSymbolic());\n    }\n\n    public", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "\n    def __repr__(self):\n    \"\"\"Represent the client as a string.\"\"\"\n    return \"Client(USERNAME, PASSWORD, PROJECT_ID, AUTH_URL, INSECURE, \"\n        \"TIMEOUT, TENANT_ID, PROXY", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "       AlpineLinuxPingParser,\n        MacOsPingParser,\n        NullPingParser,\n        )\n\n        for parser_class in parser_class_list:\n\n        logger.debug(\"ping_message is not empty\")\n\n        ping_stats = self.__parser", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "       videoFrameRate = Integer.parseInt(m.videoSetFrameRate.getText());\n        }\n        else {\n        videoFrameRate = DEFAULT_VIDEO_FRAME_RATE;\n        }\n\n        // set video width\n        if (m.videoSetWidth.", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "       self._probe = probe\n        self._probe_adj = _probe_adjacency_list(probe)\n        self._channels_per_group = _channels_per_group(probe)\n        self._p = PCA(**kwargs)", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "   @Override\n    public final Promise<PingResponse> ping(final TransportContext context) {\n        if (context == null) {\n            throw new IllegalArgumentException(\"Context must not be null\");\n        }\n\n        // Setup request.\n        final URI uri = Transports", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "   self._cdg = ControlDependence(self)\n\n  def analyze(self):\n    \"\"\"\n      Returns the basic blocks created during the control flow analysis.\n    \"\"\"\n    self.blocks = []\n    self.block_nodes = {}\n    self.block_idx", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "       super.onStart();\n        scanButton.setOnClickListener(new View.OnClickListener() {\n\n            @Override\n            public void onClick(View v) {\n                scanButton.setButtonStyle(ButtonStyle.BUTTON_STYLE_PLATFORM_DEFAULT);\n               ", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": " public void visit(final JavaSQLFunc func) throws QueryException {\n    if (func.isValid()) {\n      final String variableName = getVariableName(func.getLhsValue(),\n      DEFAULT_BASE_VARIABLE_NAME);\n      if (variableName == null)", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\t\t\tFile inputFile = new File(basePath + \"/input.xml\");\n\t\t\tFile outputBasicForm = new File(basePath + \"/outputBasicForm.xml\");\n\t\t\tFile metadata = new File(basePath + \"/metadata.xml\");\n\t\t\tFile specific", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "       np.random.seed(0)\n\n        # Test the DiscreteDistribution\n        d = DiscreteDistribution(\n            pmf=[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "\n        state = stateFactory.createState(VastAdInteractionSandBoxState.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vpai state\n\n        state = stateFactory.createState(Vpaid", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "\tpublic void invalidValue(FixTag tag, InvalidValueException exception) throws InvalidValueException {\n\t\tif (isValid(tag)) {\n\t\t\tthrow exception;\n\t\t}\n\t\telse {\n\t\t\tvalidities.put(tag, new Validity(exception", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "   self.assertEqual(\"Harvey\", replace_blank_name(name=\"Harvey\", language=\"Hindi\"))\n\n    self.assertEqual(\"Harvey\", replace_blank_name(name=\"Harvey\", language=\"Gujarati\"))\n    self.assertEqual(\"Harvey\", replace", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "                       expect(systemUnderTestMock.nonVoidFailWithTwoParameters(GIVEN_STRING,\n                                GIVEN_STRING)).andThrow(new UnexpectedException());\n                        mocksControl.replay();\n\n                        // WHEN\n                        Throwable thrown", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "       if rem == 0:\n            # check if the rest octets is empty\n            if self.is_empty():\n                # check if the rest octets is empty\n                if self.is_empty():\n                    # check if the rest octets is empty\n                    if self", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "   if not self.skip_table_setup:\n        self.create_table(model)\n        self.validate_table(model)\n        self.model_bound(model)\n        self.model_validated(model)\n        self.model_created(model)\n       ", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "       return RespostaExtrairLogs.analisar(conteudo.get('retento'))\n\n    def ativar_sat(self, chave_cfe, dados_ativacao):\n        \"\"\"Sobrepõe :meth:`~sat", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "   with pytest.raises(ValueError):\n        engine.bind(ComplexModel)\n\n\ndef test_bind_model_with_no_index(engine):\n    \"\"\"Can't bind a model with no index\"\"\nNext line of code:\n    with pytest.", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "   assert u6.dimensions == mass\n    assert u6.base_value == 1.0\n\n    # nonzero MKS conversion factor\n    u7 = Unit(\"Msol/m**2**10)\n    assert u7.dimensions == mass\n    assert u", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "\n    'root/cimv2:TST_Person.name=\\\\\"Mike\\\\\"',\n                 'root/cimv2:TST_Person.name=\\\\\"Mike\\\\\"',\n                 'root/cimv2:TST_Person.name", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "       // Load modules\n        loadModules();\n        // Load Currency\n        loadCurrency();\n        // Load Economy\n        loadEconomy();\n        // Load Virtual\n        loadVirtual();\n        // Load Player\n        loadPlayer();\n        // Load Loan\n        load", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "       if index == -1:\n        \"\"\"Retrieve all tags.\n\n        :param str name: Name of a type of tag to retrieve. Specify None to\n            retrieve all types of tags.\n        \"\"\"\n        index = 0\n        if name is not None:\n       ", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "                   public void startEditAccountActivity(Account account) {\n                        startEditAccountActivity(account, null);\n                }\n\n                public void startEditAccountActivity(Account account, String accountName) {\n                }\n\n                @Override\n                public void startEditController(Account account", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "\t\t\t// TODO: Implement getAccountImages()\n\t\t\t// Get the list of images that the user has uploaded\n\t\t\t// to Imgur.\n\t\t\t//\n\t\t\t// @GET(\"/3/account/{username}/images/{page}\")\n\t\t\t", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "\n        resource = ThermometerResource(aircraft.instruments.thermometer)\n\n        thermometer_data = resource.get()\n\n        self.assertAlmostEqual(aircraft.instruments.thermometer.temperature, thermometer_data[\"temperature\"],", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "   column = User.age[\"foo\"]\n    value = 3\n    expected_ref = \":v0.#n1\"\n    expected_action = actions.set({\"N\": \"3\"})\n    expected_values = {\":v0.#n1\": expected_action", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "\t\t\tif (url.equals(url_url)) {\n\t\t\t\tprogressDialog.show();\n\t\t\t\tprogressController.getStatusText().setText(\"Status: Requesting daemon...\");\n\t\t\t\tnew Thread() {\n\t\t\t\t\t\n\t\t", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "       if not is_comment_allowed(request.user, nodes):\n            return redirect(reverse('ploghubapp:home_page'))\n        else:\n            return render(request, self.template_name, {'post' : post, 'nodes' : nodes})\n\n   ", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "   Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);\n\n    /**\n     * Retrieves a set of trending gifs.\n     *\n     * @param serviceIds a {@link Map} of a collection of ids for better", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "           of(mConnectionSuccessListener).ifPresent(ConnectionSuccessListener::fail);\n        }\n    };\n    wifiutils/src/main/java/com/thanosfisherman/wifiutils/wifiRemove/RemoveSuccessListener.java\npublic interface RemoveSuccessListener {\n", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "           LightSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 6 || type == 0) {\n            ProximitySensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 7 || type == ", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "       for (PlaySession playsession : stack.getPlaySessions()) {\n            playsession.addListener(this);\n        }\n    }\n\n    private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n        for (Card card :", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "\n    yield recording, Utterance(speaker, file, begin=seg[\"begin\"], end=seg[\"end\"], text=\"speech\")\n\n    # ...\n\n    yield recording, Utterance(speaker, file, begin=seg[\"begin\"], end=seg[\"end\"], text", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "   private final Deployments deployments;\n    private final Vms vms;\n    private final Tasks tasks;\n    private final Info info;\n    private final Releases releases;\n    private final Stemcells stemcells;\n    private final Deployments deployments;\n", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "       ckresult(self._call_fmod(\"FMOD_Sound_GetTag\", index, byref(tag), name))\n        return tag\n\n    def get_sub_sound(index):\n        \"\"\"Retrieve a subsound.\n\n        :param int index:", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "               nbits_encoded + nbytes_write)\n        else:\n            # The length is already known, the nbytes_write is not needed\n            nbytes_write = 0\n        bit_writer.set_uint(\n            bufr_message.length.value,\n           ", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "       abuse_report = AbuseReport.objects.create(\n            moderator=logged_by,\n            applicant=logged_against,\n            comments=request.POST['comments'])\n\n        log_moderator_event(msg_type=Moderation", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "   public void output(final BenchmarkResult result) {\n        if (null == out) {\n            throw new NullPointerException(\"No output to pipe to!\");\n        }\n        if (null == result) {\n            throw new NullPointerException(\"No result to show!\");\n        }\n", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "       if (MPJ_RUN)\n        {\n        \tMPJ_ME = 0;\n        \tMPJ_SIZE = 1;\n        \tMPJ_RUN = false;\n        }\n        \n        // Checking the application options\n        ApplicationOptions appOptions", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\t\ttropo.on(EVENT(\"on_event\"), NEXT(\"on_next\"));\n\t\tNext line of code:\n\t\ttropo.redirect(URL(\"http://www.example.com/\"));\n\t\tNext line of code:\n\t\ttropo", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "       // 1. Ver se a resposta fornece um arquivo.\n        if (arquivo != null) {\n        \tcaminho = arquivos.caminhoParaArquivo(arquivo.getUploadFile());\n        \tnmaxenvios = arquivos", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\t\tpublic void onResult(int code,DefaultDataConnector connector) {\n\t\t\t\tif (code == 0) {\n\t\t\t\t\tadapter = new PageViewPagerAdapter<ProgramTrack>(MainActivity.this, new ArrayList<ProgramTrack>());\n\t\t\t", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "   @Inject\n    PlayerUIController playerUIController;\n\n    @Mock\n    AdRetriever adRetreir;\n\n    @Mock\n    CuePointsRetriever cuePointsRetreir;\n\n    @Mock\n    VastAdInteractionSandBoxState", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t\t\t\tstop() ;\n\t\t\t\t}\n\t\t\t});\n\t\t\tstage.onLostCaretRequestProperty().set(new EventHandler<WindowEvent>() {\n\t\t\t\tpublic void handle(WindowEvent e) {\n\t\t\t\t\tlogger", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "   String className = adapterName(type.getQualifiedName().toString());\n    String name = className + INJECT_ADAPTER_SUFFIX;\n\n    if (constructor != null) {\n      name = name + STATIC_INJECTION_SUFFIX", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "       }\n\n        /**\n         * 获取push消息\n         * 该接口只在EMUI5.1以及更高版本的华为手机上调用该接口后才不会收到PUSH消息。\n         * @param handler", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": " assert isinstance(args.gps_sv[0].getL1CAMessage(), CNavMessage)\n  assert args.gps_sv[0].getL1CAMessage().bitValue == 1\n\n\ndef test_parameters_msgtype3():\n  '''\n ", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "   if elem is root:\n        return path\n    else:\n        return f'{path}{suffix}'\n\n\n###\n# Functions and operators on nodes\n@method(function('xpath', nargs=(0, 1), sequence_types=('node()?',", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "   def last_record(self, fill=False):\n        \"\"\"Returns the last record of the table\"\"\"\n        return last_record(self, fill)\n\n    def dropnan(self, column):\n        \"\"\"Drop NaN values from a column\"\"\"\"\n        dropnan_table", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "               if (isConnected())\n                {\n                    if (isTyping())\n                    {\n                        addMessage(new ChatMessage(ChatMessageSource.AUDIOLOGIST, ChatMessage.TEXT_TYPING_BOTH));\n                    }\n", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "\t\tif opts.exog:\n\t\t\tEXOG = opts.exog\n\t\telse:\n\t\t\tEXOG = []\n\t\t\n\t\tif opts.exog_exo:\n\t\t\tEXOG_A = opts.exog_", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "       assertThat(main.getStatus(), equalTo(ThreadStatus.RUNNABLE));\n        assertThat(main.getStatus(), equalTo(ThreadStatus.RUNNABLE));\n        assertThat(main.getStatus(), equalTo(ThreadStatus.RUNNABLE));\n       ", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "               DatePicker datePicker = new DatePicker(this);\n                datePicker.setMode(YEAR_MONTH_DAY);\n                datePicker.setSelectedYearIndex(mRecord.getYear());\n                datePicker.setSelectedMonthIndex(mRecord.getMonth());\n                datePicker", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "           GravitationSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 5 || type == 0) {\n            LightSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 6 || type == ", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "   private ViewPager viewPager;\n    private ArrayList<ShortCut> mShortCutData;\n    private XpNavBarSetting mXpNavBarSetting;\n    private FragmentManager fragmentManager;\n    private FragmentManager fragmentManager2;\n    private FragmentManager fragmentManager3;\n", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "       self.tracerouter = Tracerouter.Tracerouter(self.listener, self.fm, self.reporter, self.config)\n        self.time_manager = TimeManager.TimeManager()\n        self.tmpfile = None\n        self.mem = None", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "   assert isinstance(deltas.deltas[4].attributes, Thread)\n    assert deltas.deltas[4].cursor == \"thread_cursor\"\n    assert deltas.deltas[4].event == \"create\"\n    assert deltas.", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "   return Webhook(self)\n\n    @property\n    def neural(self):\n        return Neural(self)\n\n    def get_calendar_availability(self, emails, open_hours=None, free_busy=None):\n        \"\"\"\n        Returns a", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "       // TODO(jontayler): get the screen size from the surface.\n        getWindow().getWindow()\n        // TODO(jontayler): get the screen size from the surface.\n        .getWindow()\n        .getWindowMd()\n        .getWindowSize()", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "       non_equil_thermochemical_prob = calculate_non_equil_thermochemical_probability(parameters=params, **non_equil_thermochemical_kwargs)\n        else:\n        non_equil_thermochemical", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "           Str('IMSI', Pt=IMSI(), Len=1, with_options=with_options),\n            ]\n        )\n\n################\n# TS 24.008, section 9.2 #\n# Mobility Management    #\n################\n", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "       IptablesMangleController.parse(self, device)\n        IptablesMangleController.parse(self, device)\n        IptablesMangerController.parse(self, device)\n        IptablesMangerController.parse(self, device)\n        Iptables", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "       result, index = apply_fast_eq(left.values, right.values,\n                                       left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.eq(left.values, right), left.index)", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "   assert is_validated(response)\n\n    request = Request()\n    route_info = {'route': Mock(spec=Route, url='/foo/{id}')}\n    swagger_spec = Spec()\n    validator_map = ValidatorMap()\n    validate_", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
