{"pred": "\t\t\t\tif ( m_Participants[i].Gump != null )\n\t\t\t\t\tm_Participants[i].Gump.Close();\n\t\t\t\telse\n\t\t\t\t\tdefs[i] = -1;\n\t\t\t}", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tZ_.add_edge(e_v, root, **data.copy())\n\t\t\t\t\n\t\t\tP.put( (-w, e, A, Y_, Z_) )\n\t\t\tif w == float('-inf':\n\t\t\t\treturn solutions", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "       # Open the test file for reading\n        a = Sndfile(ofilename, 'r')\n        nframes = a.nframes\n        buffsize = 1024\n        buffsize = min(nframes, buffsize)\n        # First, read some frames,", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "   #VIDEO SIDE SECTION\n    #VIDEO SIDE SECTION\n    #VIDEO SIDE SEARCH\n    #VIDEO SIDE SEARCH\n    #VIDEO SIDE SEARCH\n    #VIDEO SIDE SEARCH\n", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"minValue\", styleValue.getMinValue());\n\t\t\t\t\twriter.addAttribute(\"maxValue\", styleValue.getMaxValue());\n\t\t\t", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "       if self.type == TYPE_ANAGRAMS:\n            ret = \"Anagrams: %s\" % (self.question)\n        elif self.type == TYPE_TRIVIA:\n            ret = \"Trivia: %s\" % (self.question", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   mob.Prompt = new SR_NewRunePrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 3:\n                    mob", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "           for (X509Certificate cert : chain) {\n                cert.print(s);\n            }\n        }\n    }\n}\n/*\n * ServerKeyExchange ... SERVER --> CLIENT\n *\n * The server sends the server's public key to the client.", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "       sp = new JESpace (name, path);\n        spaceRegistrar.put (name, sp);\n        }\n        return sp;\n    }\n    public static void register (String name, JESpace sp) {\n        if (sp == null)\n        throw new", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (Shopkeeper.canSell(item)) {\n\t\t\t\tif (item.quantity() == 1) {\n\t\t\t", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "       return self.dispatcher.dispatch(rfile.getfile(), start_response)\n        # return self.dispatcher.dispatch(request, start_response)\n        # return self.dispatcher.dispatch(request, start_response)\n        # return self.dispatcher.dispatch(", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "       self.webview.execute_javascript(\"setRepeated('%s');\" % status_id)\n    def unmark_status_as_repeated(self, status_id):\nNext line of code:\n        self.webview.execute_javascript(\"unsetRe", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "   return self.get_process_data(CreateArchive, {\n        \"login\": login.decode('UTF-8'),\n        \"password\": password.decode('UTF-8'),\n        \"params\": byte_to_unicode_dict(params),\n        \"session\": byte_", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tAssert.IsTrue (Same (a, b.Union (a)), \"Union-DifferentIdentities\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, b.Union (a)), \"!ReferenceEquals1\");\n\t\t\tb = new ZoneIdentity", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "       return self.trust_managers.getAcceptedIstuers()\n    def getTrustAll()\nNext line of code:\n        return self.trust_managers.getTrustAll()\n    def getTrustManager()\nNext line of code:\n       ", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       DomainInfo domainInfo = manager.getDomainInfo(domain);\n        if (domainInfo == null)\n        {\n            request.setAttribute(\"domainInfo\", \"\");\n        }\n        else\n        {\n            request.setAttribute(\"domainInfo\", domainInfo);\n        }\n    }", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "       self.__datastream_transport = self.__server.get_transport_to(self.__datastream_address)\n        self.__datastream_protocol = DataStreamProtocol(\n        self.__datastream_transport,\n        self.__event_loop)\n        self.__dat", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1 == false) {\n\t\t\t\t\tjumpID = (int) store.GetValue (iter, 0);\n\t\t\t\t\tnewPersonWeight = Convert.ToDouble(Util.ChangeDecimalSeparator(jumpID));\n\t\t", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                continue;\n            }\n            if (args[i].isResource()) {\n", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t}), TIMED_DATA(new ConfigFile<UUID, TimedData>()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic TimedData create(UUID id, ConfigurationSection conf", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new BooleanFieldEditor(AUTO_SAVE, \"Auto save\",\n\t\t\t\t\t", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "               m_Owner.SelectTarget();\n            }\n        }\n        private class InternalTarget : Target\n        {\n        }\n        public class Effect\n        {\n        }\n        public class InternalTimer\n        {\n        }\n        public class InternalSphereTarget\n       ", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "       if self.autoflush:\n            self._autoflush()\n        return states\n    def _begin_nested(self, savepoint_name=None):\nNext line of code:\n        if self.autoflush:\n            self._autoflush()", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) { \n\t\t\tfinal String name = field.getFieldName().toString();\n\t\t\tList<IField> named = name2Field.get(name);\n\t\t\tif (named==null) { \n\t\t\t\t", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   r'/(foo|foo.*)/*' in conjunction with using the decorator.\n    \"\"\"\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        if self.request.path.startswith(\"/\"):\n", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tif (viewIndex == -1)\n\t\t\t\tthrow new HttpException (\"The ActiveViewIndex is not set to a valid View control\");\n\t\t\tif (Views.Count == 0)\n\t\t\t\tthrow new HttpException (\"The MultiView control has no View", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   WigleDownloader.WigleDownloader( user, password, coordfile, outpath )\n    ## This is the only way to get the WigleDownloader class\n    ## (and the WigleDownloader.WigleDownloader class)\n    ## from the", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod >= 161 && mod <= 165)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.Possible", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "   for plat, plat_builds in firefox_details.firefox_desktop_builds.items():\n        for build in plat_builds:\n            if build in platforms:\n                builds.append(build)\n        # Check if the user is on an old version of Firefox\n       ", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (projectID!=null && issueTypeID!=null) {\n\t\t\tstateBeansList = StatusBL.getByProjectIssueTypeAssignments(projectID, issueTypeID, objectID);\n\t\t} else {\n\t\t\tstateBeansList =", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (ArgumentSyntax argument in argumentSyntaxs) {\n                if ( argument.TypeNode == null ) {\n                    continue;\n                }\n                if ( toReplace.ContainsKey( argument ) ) {\n                    continue;\n                }\n                toReplace.Add( argument, argument", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       split_test = self._update_partition_id(0)\n        # Verify that the user_partition_id is set to 0.\n        split_test = self.get_item_from_modulestore(self.split_test_usage_key, verify_is", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           if (cff) {\n                tmp.Add(GetCIDFontType2(piref, fontPrefix, metrics));\n            }\n            else {\n                tmp.Add(GetFontBaseType(piref, fontPrefix, null));\n            }\n            if (direct", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tif (cgn.depth == -1)\n\t\t\t\t\t\t\tmore = true;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tc", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       task = new ListenableFutureTask<Bitmap>(callable);\n        task.get();\n        return task;\n      }\n    }\n    private Bitmap loadPage() throws IOException {\n      InputStream input = context.getResources().getAsStream(model.getSprite());\n", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                }\n               ", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "   prerequisite = NavigateToSel('EditTags')\n    def step(self):\n        self.prerequisite_view.policy.item_select('Manage Policies')\nclass NodeManageRolesForm(NodeView):\n    roles = BootstrapSelect", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequences,\n\t\t\t\t\tStringVector(StringTitles(sequences)));\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "               ScriptManager sm = ScriptManager.GetCurrent(Page);\n                sm.RegisterScriptControl(this);\n            }\n            if (String.IsNullOrEmpty(Roles)==false)\n            {\n                string[] roles = Roles.Split(new String[]{ RoleSeparator", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\t\tdamageCooldown = compound.getInt(\"DamageCooldown\");\n\t\tdamage = compound.getInt(\"Damage\");\n\t\tfire = compound.getInt(\"Fire\");\n\t\tblast = compound.getInt(\"Blast\");", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return getSpecification().getId() + \":\" + getId() + \":\" + getProbability() + \":\" + getScopes();\n    }\n}", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "   i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'everyone',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "   p = Person.objects[0].select_related()\n    o = Organization.objects.first()\n    self.assertEqual(p.owns[0], o)\n    self.assertEqual(o.owner, p)\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "   display(widget_x)\n    display(widget_y)\n    display(widget_dim)\n    if sel_dim:\n        display(widget_x)\n        display(widget_y)\n        display(widget_dim)\n        # noinspection PyUnresolable", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               if (rootFolder.IsIgnored(path))\n                {\n                    toScan.Add(path);\n                }\n                else\n                {\n                    _logger.Trace($\"{rootFolder.Name} - {path}\");\n                }\n                _tempIgnoredPath", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, (I)computed);\n\t}\n\t@Override\n\tpublic E get(String key) {\n\t\treturn read(key, internalMap.get(key));\n\t }\n\t@Override\n\tpublic void put(String key, E value)", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       resbrains = cat.searchResults(query)\n        if len(resbrains) == 1:\n            contobj = resbrains[0].getObject()\t    \n            \n            if contobj.isDiscussable() and canreply(contobj", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\tset { m_ID = value; }\n\t\t}\n\t\tinternal byte m_X;\n\t\tinternal byte m_Y;\n\t\tinternal byte m_Hue;\n\t\tinternal byte m_Terrain;\n\t\tinternal byte m_Ter", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   // get the parcel voice channel\n                    parcelVoiceInfo = new LLSDParcelVoiceInfoResponse(\n                        land.Name,\n                        land.LocalID,\n                        land.Sprites,\n                        land.ParcelBits,", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(IsNew){\n\t\t\t\tif(PayPeriodCur.DateStart.Year>1880){\n\t\t\t\t\tPayPeriodCur.DateStart.ToShortDateString();\n\t\t\t\t", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)\n        # Convert the time to python datetimes\n        new_time_column_header = []\n        for i, t in enumerate(column_headings['Time']):\n", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   if not user:\n        return {'success': False, 'msg': _('Valid API key needed to create a group')}\n    return authz.is_authorized('group_create', context, data_dict)\n## Modifications for the API\ndef group_member_create(", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tint[] outcomes = new int[applySet.size()];\n\t\t\t\tint[] depths = new int[applySet.size()];\n\t\t\t\tArrays.fill(outcomes, parentIndex);\n\t\t\t\tdepths[parentIndex]", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           return new[] { new SearchResults() { ErrorCode = ErrorCode.InvalidOperation } };\n        }\n        /// <summary>\n        /// Performs a search for an array of segments.\n        /// </summary>\n        /// <param name=\"settings\">The settings that define the search parameters", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "        {\n            codePoint = ch - '\\uD800 - '\\uDBFF;\n            if (codePoint < 128) {\n               return _asciiSet[codePoint] ? offset : -1;\n            }\n         }\n         }\n         if (", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "\t\tif (StringUtil.isEmpty(studyFormName)){\n\t\t\treturn ValidationResults.REQUIRED_FAIL;\n\t\t}\n\t\tif (StringUtil.isEmpty(accessionNumber)){\n\t\t\treturn ValidationResults.REQUIRED_FA", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Mod != ModData.Manifest", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tfor(int i = 0; i < beans.length; i)\n\t\t\tcoll.add(beans[i]);\n\t\treturn coll;\n\t}\n\tpublic static CatsReferralPendingEmergencyNonEDAdmissionListVoCollection buildFrom", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "if prnum == 'advanced':\n    advanced()\nelif prnum == 'viewsdb':\n    viewsdb()\nelif prnum == 'date':\n    date()\nelif prnum == 'donate':\n    donate()\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": " plotName = pD[ 'plotName' ]\n  del( pD[ 'plotName' ] )\n  #Get plotname\n  if not 'granularity' in pD:\n    return S_ERROR( \"Missing granularity!\" )\n  gran =", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tif (newProductionBuilders.IsNull())\n\t\t\t\treturn;\n\t\t\tforeach (var b in newProductionBuilders)\n\t\t\t\tb.RallyPoints = GetRallyPointsForNewProductionBuilders(bot);\n\t\t}", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       m_currentPlan = plan;\n        return plan.getPlan();\n    }\n    public static void main(String[] args) {\n        PlannerTestAideDeCopmpart.tearDown();\n        PlannerTestAideDeCopmpart.compileAdH", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Name = \"comboBox1\";\n\t\t\tthis.comboBox1.Name = \"comboBox1\";\n\t\t\tthis.comboBox1.Name = \"comboBox1\";\n\t\t\tthis.comboBox1.Name = \"com", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.Baud = baud_rate;\n\t\t\tdcb.Parity = parity;\n\t\t\tdcb.Bits = data_bits;\n\t\t\tdcb.StopBits = bits;\n\t\t\tswitch (hs) {\n", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "       page = self.get_page(self.user.get_profile().get_url(),\n                             login_as=admin)\n        self.assertEquals(page.context['cobrand'],\n                          cobrand)\n    def test_user_with_cobrand", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   sys.argv = [\"fetchphotos.py\",\n                 \"-c\",\n                 self.cfgfile,\n                 os.path.join(self.tempdir,\n                              u\"src\",\n                              u\"IMG_0533_normal_top_left.J", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\tnewListIndex = newList.index(self.newAPList[0])\n\t\t\tcurrentListIndex = self.oldlist[ap['essid']]['currentIndex']\n\t\t\tif newListIndex != currentListIndex:\n\t\t\t\tcurrentListEntry =", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               if (generateChecksum && checksumText)\n                    fCode += GetChecksum(fCode);\n                if (startStopText)\n                fCode = \"*\" + fCode + \"*\"\n                float barsX = x * fontX;\n                float barsY = y -", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return ArrayUtils.toPrimitive(results);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "       y_points = np.arange(-90.0, +90.0, 10)\n        x_points, y_points = np.meshgrid(x_points, y_points)\n        sample_points = [\n            (\"longitude\", x_", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           Clipboard.Clear();\n            Clipboard.SetText(currPacket.ToString());\n            toolStripButtonCopy.PerformClick();\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            LogPack", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "   print 'red'\n    print '\\033[1;31;40m'\nNext line of code:\n    print 'yellow'\n    print '\\033[1;31;40m'\nNext line of code:\n    print 'color'\n", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "       }\n        public int NullEntry {\n            get { return _nullEntry; }\nNext line of code:\n        }\n        public bool HasNullEntry {\n            get { return _hasNullEntry; }\nNext line of code:\n        }\n        public void CopyTo(Array", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.Controls.Add(this.treeView1);\n            this.Name = \"DummySolutionExplorer\";\n            this.Text = \"DummySolutionExplorer\";\n            this.treeView1.TreatNullInputAsHarmless:\n            this.tree", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "   def nullFunction( \n        functionName, dll=None,\n        resultType=None, \n        argTypes=None,\n        doc = None, argNames = None,\n        extension = None,\n        deprecated = False,\n    ):\n    \"\"\"Create a null function for", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "\n            for (int i = 0; i < files.size(); i++) {\n                if (emptyStreams.get(i)) {\n                    writeUint64(baos, i);\n                }\n            }\n            writeUint64(header, baos", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_be_removable_and_should_allow", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "               if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, can", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "       f.writelines(['F) ', str(NXPTS), '\t\t\t# Number of',\\\n                      ' pixels in the PSF image\\n'])\n        f.writelines(['G) ', str(NYPTS), '\t\t\t# Number of',\\", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                   i += ((b & 0x08) << 2);\n                    i += ((b & 0x04) << 5);\n                    i &= 0xFF;\n                    break;\n                case 0x08:\n                    /* D", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "   return self.course_key\n    def _create_course(self):\n        \"\"\"\n        Create the course.\n        \"\"\"\n        self.install()\n    def _install_course_updates(self):\n        \"\"\"\n        Install the course updates.\n        \"\"\"\n        self", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tfor(int i=0;i<splitNumber.length;i++) {\n\t\t\tif(splitNumber[i] != null) {\n\t\t\t\tchance*=10;\n\t\t\t\tif(chance%100==0) {\n", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "       # Download both cert files from the api host\n        try:\n            # If we can't open the file it's not there, so we should download it\n            cert_file = open('%s/%s.pem' % (config_directory,cert_type))\n       ", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.lblPrivacy.AutoSize = true;\n            this.lblPrivacy.Location = new System.Drawing.Point(10, 129);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "       for (plugname, plug) in self.loaded_plugins:\n            try:\n                plugruncount += 1\n                plug.run()\n            except KeyboardInterrupt:\n                raise\n            except (OSError, IOError) as e:\n                if e", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "   getRoomFullName.produce = lambda s: s.getRoom()\n    getRoomFullName.convert = Conversion.roomFullName\n    def getSupportInfo(self):\n        \"\"\" Support Info\"\"\n    getSupportInfo.result = ISupportInfoFossil", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "               throw new MessageWriterException(e);\n                }\n                return true;\n            }\n            };\n            result = messageBrowser.importMessages(fileTextField.getText(), messageWriter);\n        } catch (MessageImportInvalidPathException e) {\n            parent.alertError(parent, \"", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t       \t\t\tif (value instanceof Layer) {\n\t\t       \t\t\t\tlayer = ((Layer)value).getLayer();\n\t\t       \t\t\t}\n\t\t       \t\t}\n\t\t    \t}\n    \t\t}\n    \t\treturn layer", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       if (currentSession != null && !currentSession.equals(Session.getActiveSession())) {\n            userInfoSession = currentSession;\n            if (userInfoSession.getUser() != null) {\n                user = userInfoSession.getUser();\n                if (user != null)", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (int i = 0; i < emotions.length; i++)\n\t\t\tsum += Math.pow(10, Math.abs(emotions[i].strength));\n\t\tfor (int i = 0; i < emotions.length; i", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "                   'property1': 2, 'property2': 3}\n            }],\n            self.build.stages_to_list())\n    def test_to_xml(self):\n        \"\"\"Test xml output\"\"\n        # read and parse sample file\n        self.build", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   if (NorthernHemisphere == 1):\n        #LongRad = phi1Rad-LongOriginRad;\n        LongRad = phi1Rad-LongOriginRad;\n        if (phi1Rad < -180.0):\n            #LongRad =", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "       if captcha.check(request.POST['recaptcha_challenge_field'], request.POST['recaptcha_response_field')):\n            report = ReportUserForm(request.POST)\n            if report.is_valid():\n                report.save()\n                messages.", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   label = \"Add a new product\"\n    default_field_names = [\n        \"name\",\n        \"owner\",\n        \"active\",\n        \"autoupdate\",\n        \"product_owner\",\n        \"product_name\",\n        \"product_release_owner\",\n", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tform.RightToLeft = RightToLeft.No;\n\t\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t\t}\n\t\t\t\tcatch(Exception) { Debug.Assert(", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>= 8;\n\n                if (temp == 0)\n                {\n                    break;\n                }\n            }\n        }\n        return arr;\n    }\n    /**\n     * Write to Byte Array\n     *\n     * @param arr\n     *", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "       new_positional_tags_list.append(regex)\n        return new_posional_tags_list\n    def compile_tag_regex_with_default(positional_tags, default_tag_regex):\n        if not positional_tags:\n            return default_tag", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "               return new object[0];\n            }\n            public override bool IsDefined (CustomCustomAttributeAttribute attribute, bool inherit)\n            {\nNext line of code:\n                return false;\n            }\n            public override bool IsDefined (CustomCustomAttributeAttribute attribute, bool inherit, bool", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "\n# 1000000000000000000000000000000000000000000000000000000000000", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tready_pipe = self.bus_connection.get_sync_port()\n\t\tself.bus_connection.signal_listen_thread(ready_pipe, 'org.freedesktop.Secret.OpenSession')\n\t\tself.bus_connection.signal_listen_", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "               this.AddRes(index, typeof(SwitchItem), 1073464, 1, 1044253);\n                this.ForceNonExceptional(index);\n                this.SetNeededExpansion(index, Expansion.ML);\n", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "\n    # If the context is not popped explicitly, the context is popped\n    # automatically at the end of the request.  In debug mode the context\n    # is kept around for a little longer in case of exceptions.  This is\n    # used by the :meth:`~fl", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   response = _pubsub_consumer(session, cluster_id, query_wrapper)\n    if topic_name:\n        response = response.filter(PubSubTopic.name==topic_name)\n    return response\n# ################################################################################################################################\n", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n            }\n        return result;\n    }\n    public Set<ResourceEntity> getProvidedRelatedResourcesByResourceType(ResourceEntity resource, DefaultResourceTypeDefinition default", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "   dx = (rot_dir[0] * angles[1] + rot_dir[1) * angles[2)\n    # Compute angles\n    phi = np.arctan(dx / (src_radius + det_radius))\n    theta = phi * 2", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "   def _buildRE(self, regx):\n        \"\"\" Return the Proxyfied RE string \"\"\"\n        if self.isEnabled():\n            regx = re.sub('//1', self.option, regx).replace('&', '&amp;')\nNext line of code", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\tswitch (type) {\n\t\t\t\tcase FontSize.Small:\n\t\t\t\t\treturn font_size_names [0];\n\t\t\t\tcase FontSize.Medium:\n\t\t\t\t\treturn font_size_names [1];\n\t", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\t\tAssert.That(obj.Properties[0].Value.Properties[0].Key, Is.EqualTo(\"The outermost value\"));\n\t\t\t\tAssert.That(obj.Properties[0].Value.Properties[0].Value.Type, Is.EqualTo(TokenType", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "               for (int w = 0; w < width; w++) {\nNext line of code:\n                    T2 t = T2(w, h);\nNext line of code:\n                if (t != null) {\nNext line of code:\n                    edges.add(", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   iso.Isoelastics(ds)\n    iso.Isoelastics(ds)\n    iso.Isoelastics(ds)\n    iso.Isoelastics(ds)\n    iso.Isoelastics(ds)", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "\n        if (args.length == 1) {\n        \n        }\n        \n        else {\n        \n        }\n        \n        }\n    }\n\n    /**\n     * Compares two {@link LocalTripleStore}s\n     * \n     * @param args", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "\n        virginia_under_a_nickle = {'name': 'Virginia Under A Nickle',\n                                   'threshold':'0.05', 'region':'us-east-1', 'zone':\n                                   'us-east-1b', '", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\treturn performDownload();\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * Returns the timestamp of yarta.jar from Internet.\n\t * \n\t * @return\n\t */\n\tprivate String performDownload() {\n\t\tString downloadedJar", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tif (context != IntPtr.Null)\n\t\t\t\tSDL.SDL_GL_Delete(context);\n\t\t\tcontext = IntPtr.Null;\n\t\t\twindow.Window = IntPtr.Null;\n\t\t\twindow.SurfaceSize = null", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "       projected onto the *y* axis.\n        :rtype: numpy.ndarray or None\n        \"\"\"\n        return self._project_cov_mat_inverse(\n            self.x_data_cov_mat_inverse, self.y_data_cov_mat_", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n}\n    /**\n     * Returns the string representation of this.\n     *\n     * @return the string representation of this\n     */\n", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "                 adminUser = getEucalyptusAdmin();\n                }\n            }\n            catch (AuthException e) {\n                LOG.warn(\"Account ID \" + walrusObject.getOwnerId() + \" does not exist. Changing the ownership of object \"\n                    +", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "       get { return _selectedFolderChanged; }\n        }\n        public void SelectFolder(FolderTreeNode node)\n        {\n\t\t\t// check initialized\n\t\t\tif (!IsInitialized)\n\t\t\t\treturn;\n\t\t\tif (_selectedTreeNode != null)", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       CanDoActionTestUtils.runAndAssertCanDoActionSuccess(\n                setupImportVmTemplateCommand(isImportAsNewEntity, name));\n}\n    private ImportVmTemplateCommand setupImportVmTemplateCommand(boolean isImportAsNewEntity, String name) {\n        ImportV", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.XOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\tw10.YOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\t// Container child table1.Gtk.Table+TableChild\n\t", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "       if self.status is not None:\n        if self.scriptstatus is not None:\n        if self.parstatus is not None:\n        if self.unpackstatus is not None:\n        if self.nzbheaders is not None:\n        if self.nzb", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic void SetBaseType(Type baseType)\n\t{\n\t\t\tthis.lazyBaseType = baseType;\n\t\t\tif (this.attribs & TypeAttributes.Interface) == ", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "     return new Builder(prototype);\n    }\n    public static SendInvitationRequest DefaultInstance {\n      get {\n        if (defaultInstance_ == null)\n            if (global::bnet.protocol.channel_invitation.ChannelInvitationTypes.Store.HasDefaultInstance())\n", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "               vertices[x] = getVert(i, x);\n            }\n        }\n    }\n    /**\n     * Stores in the <code>vertices</code> array the vertex values of quad\n     * <code>i</code>. If <code>i</code>", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       if (showDateData != null) {\n            String[] showDate = CmsStringUtil.splitAsList(showDateData, ',');\n            for (String showDateElement : showDate) {\n                if (showDateElement.equals(\"hide\")) {\n                    result.add", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForSeconds (0.1f);\n\t\t\tif (dynamicHeight)\n\t\t\t{\n\t\t\t\ttextRect.sizeDelta = displayTextRect.sizeDelta;\n\t\t\t\tdisplayText.text = inputField.text;\n", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "     Invalidate();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    protected override void OnMouseClick(MouseEventArgs e)\n    {\n      switch (e.Button)\n      {\n        case MouseButtons.Left:", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                   lastUser = r[\"CreatedBy\"].ToString();\n                }\n                else\n                {\nNext line of code:\n                    lastUser = r[\"ModifiedBy\"].ToString();\n                }\n                if (lastUser.ToLower() != lastUser.ToLower())\n                {", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeCornerScrollThreshold)\nNext line of code:\n\t\t\t\tdirections |= ScrollDirection.Down;", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           if (CriteriaCodesUsed.Contains(\"CHILD\"))\n            {\n                // displays a warning message\n                VerificationResult = new TScreenVerificationWarning(new TVerificationWarning(this, ErrorC.ERR_CHILD_DISCOUNT_WARNING),\n                ", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, buffer.Length);\n                args.Add (filename, buffer);\n            }\n        }\n}\n}\n", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "   def __repr__(self):\n        return 'PayloadRequirements(packages=%s, groups=%s)' % (self.packages, self.groups)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\treturn Enabled && CopyCustom;\n\t\t}\n\t\tpublic bool UpdatingCopyRange\n\t\t{\n\t\t\tget { return _updatingCopyRange; }\n\t\t\tprivate set\n\t\t\t{\n\t\t\t\tif (_updatingCopyRange ==", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget {\n\t\t\t\treturn dataDir;\n\t\t\t}\n\t\t\t}\n\t\tpublic string ConfDirectory {\nNext line of code:\n\t\t\tget {\n\t\t\t\treturn confDir;\n\t\t\t}\n\t\t\t}\n", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "\n            switch (bugAnnotation.getType()) {\n            // ...\n            }\n\n            switch (bugAnnotation.getType()) {\n            // ...\n            }\n\n            switch (bugAnnotation.getType()) {\n            // ...\n            }\n\n            switch (bugAnnotation.", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\tpublic class Eggs : Food\n\t{\n\t\t[Constructable]\n\t\tpublic Eggs() : this( 1 )\n\t\t{\n\t\t}\n\t\t[Constructable]\n\t\tpublic Eggs( int amount ) : base( amount", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                       if (eFarm.IsValid)\n                        {\n                            E.Cast(eFarm.Position);\n                        }\n                    }\n                }\n            }\n        }\n        private void JungleClear()\n        {\n            if (ManaManager.", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);\n\t}\n\t/**\n\t * Returns a GridBagConstraints\n\t * @param x\n\t * @param y\n\t * @param width\n\t", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "       fb = self._retr_file(filename)\n        try:\n            year, month, day = re.findall(r\"\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d\", fb)[0].split('-')\n        except:\n", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "       self.assertEquals(\n            field_def['rules']['marc'][1]['function'],\n            field_model_def['rules']['marc'][1]['function'])\n        clean_field_model_definitions()\n    def test_field_name_model_based_", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "               new object[] {\"E1\", 10L});\n                env.UndeployAll();\n                // widen to int\n                path.Clear();\n                env.UndeployAll();\n                env.EplToModelCompileDeploy(\n                    \"create index My", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "       c = self.copy()\n        return c.__imul__(other)\n    \n    def __div__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n        c = self.copy()\n        return", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "   return super(view, self).save(cr, uid, res_id, value, xpath=xpath, context=context)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "       value = createHTMLView(c, text);\n        }\n        if (oldValue != null) {\n            c.getClientProperties().remove(BasicHTML.propertyKey);\n        }\n        if (value != null) {\n            c.getClientProperties().setClientProperty(", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = create(filename, contents=content)\n    assert s.name_is_reference\n    assert not s.name_is_multi_global\n    assert not s.name_is_worker\n    assert not s.name_is_window\n    assert not s.name_", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tthrow new ArgumentOutOfRangeException(\"SqlLoader\", \"SqlLoader is null.\");\n\t\t\t}\n\t\t\tif (namedQueryReference == null)\n\t\t\t{\n\t\t\t\tthrow new ArgumentNullException(\"namedQueryReference\");\n\t\t\t}\n", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tfor ( int i = 0; i < m_Members.Count; ++i )\n\t\t\t{\n\t\t\t\tPlayerState pl = m_Members[i", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "   }\n    private void moveForward() {\n        if (graphQueue.isEmpty()) {\n        }\n        else {\n        }\n    }\n    private void backtrack() {\n        if (graphQueue.isEmpty()) {\n        }\n        else {\n        }\n   ", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "                   if not self.args['wharf']:\n                        self.create_wwharf_command(pytest, sprout_appliances)\n                    else:\n                        self.create_wwharf_command(pytest, sprout_appliances)\n", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    PhiNode phi = getCachedPhi(key, value.stamp());\n                    if (value != null) {\n                        effects.replaceAtUsages(value, phi);\n                    }\n                    effects.replaceAtUs", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "       if (mCallback != null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n    /** @see Connection.VideoProvider#handleConnectionEvent */\n    public void handleConnection", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendMessage(1019002);\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic override void Serialize(GenericWriter writer)\n\t\t{\n\t\t\tbase.Serialize(writer);\n\t\t\twriter.Write", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "   'Bibxxx',\n    'BibrecBibxxx',\n    'models',\n    'utils.TableFromCamelNameMixin',\n    'utils.TableNameMixin',\n    'utils.utils',\n    'utils.utils.utils',\n   ", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "   raise NotImplementedError()\n\n\nclass XmppBackend(DummyBackend):\n    \"\"\"A backend for Xmpp.\n    :params domains: A list of domains to serve.\n    \"\"\"\n    library = 'django.core.cache.cache'\n   ", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "       - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath, 'to_binary')\n    def __str__(self):\n        \"\"\"\n        Convenience method that return the string representation of the\n       ", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      gLogger.error( \"Failed to determine waiting problematics for transformation\", res['Message'] )\n      return res\n    if res['Value']:\n      res = self.transClient.setTransformationProblematics( transID, 'Status", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\tif(uri.getPath().startsWith(PLUGINS_PREFIX))\n\t\t\t\tthrow new CommentException(l10n(\"invalidFormURI\"));\n\t\t\tif(uri.getPath().startsWith(\"/plugins/\"))\n\t\t\t\tthrow new", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       gsp = yield self.setupGerritStatusPush(summaryCB=sampleStartCB)\n        yield self.run_fake_single_build(gsp, buildResult, expWarning=False)\n        gsp.sendCodeReview.assert_called_once_with(", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n  def testCategoriesToAndFromString(self):\n    self.category.type = 'text'\n    self.category.text = 'Less: &lt;'\n    self.assert_(self.category.type == 'text')", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "       Map<String, AnnotationMirror> r2) {\n            if (r1 == null)\n                return r2;\n            if (r2 == null)\n                return r1;\n            if (r1.equals(r2))\n                return r1;\n", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "   def draw(self, context):\n        layout = self.layout\n        mat = context.material  # don't use node material\n        ob = context.object\n        split = layout.split()\n        col = split.column()\n        col.prop(mat, \"use_", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           if (_engine.Memory.Map.Cartridge.MapperNo == 16)\n            {\n                var map16 = (Mapper16) _engine.Memory.Map.CurrentMapper;\n                mapper16_latch1 = map16.Latch1;\n", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           JMenuItem jMnuOpenDocument = new JMenuItem(oActionListener);\n            jMnuOpenDocument.setAction(SADDTOSOURCECODE);\n            jMnuOpenDocument.setActionCommand(SADDTOSOURCECODE);\n            _jMnuRoot.", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Red Bears]\nNext line of code:\n\t\tAdd(\"Party Quest\", 70027); // Party Quest Scroll [10 Red Bears]\n", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\treturn (int)LayoutSize (W, H, W, H);\n\t\t}\n\t\tpublic override int LayoutSize (int W, int H, int WSize, int HSize)\n\t\t{\n\t\t\treturn (int)Frame.W;\n\t\t", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "       return self.announcement.title\n    def get_absolute_url(self):\n        \"\"\"\n        Return the permalink to the announcement.\n        \"\"\"\n        return reverse('announcements:announcement_detail', kwargs={'slug': self.announ", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "lexers.all.add(PhpLexer)\n# Enable highlighting for PHP code not between <?php ... ?>\n# by default\n#lexers.all.add(PhpLyxing)\n# Enable highlighting for PHP code not between <?php ... ?>\n", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "                ORDER BY sdate, stime ''', (i,))\n    row_0 = cursor.next()\n    print \"row_0 is: \", row_0\n    print \"sdate is: \", row_0[0]\n    print \"stime is: \", row_0", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "   conn.rpush(project_id, timestamp)\n    conn.commit()\n    conn.close()\n    print(\"db_set_last_snapshot\", project_id, timestamp)\n    \"\"\"\n    # Get the projects table\n    projects = conn.index('projects')\n", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\tMsg(\"Hm... I don't know what you're talking about.<br/>I'm not a part of any conspiracy.\");\n\t\t\t\tbreak;\n\t\t\tcase \"complicity_conspiracy\":\nNext line of code:\n\t", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "\t\tname\t- aname/ename/gname\n\t\tvalue\t- vote value\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_REVOKED", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "   self.finish = None\n\"\"\"\n    :type uuid: str\n    :type name: str\n    :type path: str\n    :type play: str\n    :type start: None\n    :type finish: None\n    :type host_data: OrderedDict", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "           }\n        }\n    }\n}\n", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   if (len(primary.items) == 0):\n        raise AssertionError(\"Primary.xml has no packages\")\n    else:\n        print(\"Primary.xml has packages:\")\n        for key in primary.items:\n            pkg = primary.items[key]\n           ", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "       ext_outputs = self._mutate_outputs(self.distribution.has_ext_modules(),\n                                          'build_ext', 'build_lib',\n                                          self.install_dir)\n        inputs.extend(ext_outputs)\n        return inputs\n", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tobject propValue = lazyPropertyTypes[j].NullSafeGet(disassembledValues, lazyPropertyColumnAliases[j], entry, entity", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "       '-c', log_name,\n        '-o', log_name,\n        '-l', log_name,\n        '-S', 'sge',\n        '-s', 'sge',\n        '-e', 'sge',\n        '-f', 'sge',\n       ", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           return View(\"Form\", new DelegateViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [HttpPost]\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")]\n        public ActionResult SaveEventDelegate(DelegateViewModel", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                       var circle = (Circle) obj;\n                        return string.Format(\"({0},{1},{2})\", circle.X, circle.Y, circle.Z);\n                    }\n                    if (obj is Vector)\n                    {\nNext line of code:\n                ", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path.Length == 0)\n\t\t\t\treturn null;\n\t\t\treturn path.Last();\n\t\t}\n\t\tCPos GetSearchFromLocation(Actor self)\n\t\t{\n\t\t\tif (orderLocation == null)\n\t", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "                   self.logger.error(\"service %s restart failed\")\n                    return False\n        else:\n            self.logger.info(\"not managing dhcp\")\n        return True\n    def write_boot_files(self):\n        \"\"\"\n        Write the boot files to the", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return new Event.Builder();\n}\n    protected abstract void sendEvent(Event e);\n    protected abstract void setSource(String source);\n    protected abstract void setSeqNo(int seqNo);\n    protected abstract void setRepeatedEventReduction(boolean repeatedEventReduction", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "   while (stateIndex < MAXIMAL_ORDER)\n    {\n        PpmState state = states[stateIndex++];\n        if (state == PpmState.ZERO)\n        {\n            goto NoLoop;\n        }\n        if (state.Flags == ", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Signed Octet VR.\n        /// </summary>\n        public static readonly DicomVr SQvr = new DicomVr(\"SQ\", false, false", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\t\tif(tFull[3].ToInt() == 0)\n\t\t\t\t\tcontinue;\n\t\t\t\telse\n\t\t\t\t\tbreak;\n\t\t\t\t\t//if(tFull[3].ToInt() == 0)\n\t\t", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "       o = self.file(b'abcdefghij')\n        insert_bytes(o, 4, 9)\n        self.assertEquals(b'abcdefghij\\x00\\x00\\x00\\x00\\x00\\x0", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "   <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Linux 32", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   plt.plot(cr['runs'][0][app][VC]['durations'], csi_95,\n               label='1-run 95%% CI')\n    for run_idx, run_results in enumerate(cr['runs'][1, app, test", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "   self._testUIDGIDSwitch(1, 0, 0, 1, [1, 0, 1, 0], [1, 0])\nNext line of code:\n    self._testUIDGIDSwitch(1, 0, 1, 1", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t\t}\n\t\t\t\telse if(b", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": " winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[1])\n  if winner != 0:\n    failures += \"Inference failed with k=3\\n\"\nNext line of code:\n  winner, _inferenceResult,", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       final int index = (offset - headerSize()) / kind.width.numberOfBytes;\n        mirror.writeElement(kind, index, value);\n}\n}\n\n\n/* Location: */\n@java_lang_annotation::TargetAnnotation(AnnotationTarget.FIBER_THREAD_", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           if (string.IsNullOrEmpty(relativePath)) {\n                return null;\n            }\n            // check if the assembly is stored in the GAC\n            if (GacCache.IsAssemblyInGac(relativePath)) {\n                return null;\n            }\n            //", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "   return str.format(string, *args, **kwargs)\n\n# Utilities\ndef get_version(package):\n    \"\"\"\n    Returns the version of a package\n    \"\"\"\n    try:\n        return package.__version__\n    except AttributeError:\n        return None\n\n", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "       if (i16 >= 0) {\n          i10 = i16;\n        } else {\n          i10 = i19;\n        }\n        i10 = i10 + i16;\n        i10 = i10 + i", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += s.ToString();\n\t\t\t\tif( !s.IsLooping ) {\n\t\t\t\t\tstr += \"ResetTime: \" + s.ResetTime;\n\t\t\t\t}\n\t\t\t\tif( !s.IsLooping )", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "               });\n            #endregion Lucian\n            #region Nelasus\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Nelasus\",\n                    SpellName = \"NelasusQ\",\n                    Slot", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentTenantRole()).thenReturn(\"test.tenant.role\");\nNext line of code:\n\t\twhen(securityContext.getCurrentTenantRoleGroup()).thenReturn(\"test.tenant.group\");\nNext line of code:\n\t\twhen", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "       self.assertRaises(\n            OSError,\n            lambda: subprocess.Popen(\n                'ls',\n                stdout=subprocess.PIPE,\n                stderr=subprocess.PIPE,\n                close_fds=True))\n\n\n\n\n\n", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tPropertiesService.Properties = propertiesName;\n\t\t\tResourceService.ApplicationName = applicationName;\n\t\t\tMessageService.DefaultMessageBoxTitle = applicationName;\n\t\t\tMessageService.ProductName = applicationName;\n\t\t\t\n\t\t\t// start the core", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\tinternal void SetIndex (Index index)\n\t\t{\n\t\t\tIndex = index;\n\t\t}\n\t\tinternal void SetConstraintCollection (ConstraintCollection constraintCollection)\n\t\t{\n\t\t\tConstraintCollection = constraintCollection;\n\t\t}\n\t\tinternal void Set", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "       self.verticalSplitter.setWidget(0, self.Dialog)\n        self.verticalSplitter.setStretch(0, 0)\n        self.verticalSplitter.setStretch(1, 1)\n        self.verticalSplitter.setStretch(2,", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "           } else {\n                // We have the station with TAF\n                mStationId = stationId;\n                mLastForecast = new Forecast( wxs );\n                mReceiver.onReceive( getActivity(), intent );\n                startBackgroundTask( new TafBackgroundTask() ).", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\ts.CreateQuery(\"from Continent\").List();\n\t\t\t\ts.CreateQuery(\"from Locality\").List();\n\t\t\t\ts.CreateQuery(\"from Continent\").List();\n\t\t\t\ts.CreateQuery(\"from Locality\").List();\n", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiByteValue = uiByteValue | (uint)p[iBufferIndex];\nNext line of code:\n                uiCRCITTSum = uiCRCITTSum >> 1;\nNext line of code:\n                if (uiByteValue == 0x0000", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn 1;\n\t}\n\tpublic boolean isTargetingAllowed(LivingEntity potentialTarget) {\n\t\tif (potentialTarget != null) {\n\t\t\tList<String> players = ModuleUtils.getPlayersFromModule(getAllowlistModule());\n\t", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "       return new IHyperlinkDetector[] { \n                new JavaJavaBackendHyperlinkDetector(\n                    getSettings(), \n                    getEditor(), \n                    getEditor().getEditorSite().getContext(), \n                    getEditor().getEditorSite().get", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "   self.drawingModeWidget.setSupportedModes(DRAW_MODES)\n\n    self.aspectWidget = Object3Ascent(self)\n        self.l.addWidget(self.drawingModeWidget)\n        self.l.addWidget(self", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\t\t}\n\t\t\t\tcase 3: // Pick location\n\t\t\t\t\t{\n\t\t\t\t\t\tm_Mobile.Target = new InternalTarget( m_Property, m_Mobile, m_Object, m_Stack, m_Page, m", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                    for (Object valueChoice : valueChoices)\n                     {\n                        Object convertedObj = selectConverter.convert(valueChoice);\n                        if (convertedObj.equals(value))\n                        {\n                           chosenObj = valueChoice;\n                           break;\n                ", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\tif (i!=j)\n\t\t\t\tsb.append(\"\"+i+\"->\"+j+\" \\t\"+fractionWithAmount[i][j][0] +\"\\t\"+fractionWithAmount[i][j][1] +\"\\t\"+fractionWithAmount[i", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "           foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n            {\n                //get the index of the purchase order and line that contains the unpriced product\n                int orderIndex = unpricedLine.Key;\n                int lineIndex = unpr", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic ICollection<FaultContractInfo> FaultContracts {\n\t\t\tget", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       final int groupGroupId = new Random().nextInt(SecurityManagerImpl.MAX_GROUP_ID);\n        final int groupId = new Random().nextInt(SecurityManagerImpl.MAX_GROUP_ID);\n        final int userId = new Random().nextInt(SecurityManagerImpl.MAX", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn v.ToVector2 () * viewport.ToVector2 ();\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Viewport viewport, Vector2 offset)\n\t\t{\nNext line of code:\n\t\t\treturn v.", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "   endpoint_stats.unpack_from(reader)\n    endpoint_value.unpack_from(reader)\n    endpoint_key.unpack_from(reader)\n    xdr.send_packed_message(endpoint_key(vlan=1, mac_hi=2", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t\tRemoveClient(i, m_workerSocketList, disconnect_client);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\tif (sending_data.Count > 0)\n\t\t\t{\n\t\t", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           switch (type) {\n                case Steps:\n                    logDataSet(list);\n                return;\n            }\n            if(list != null) {\n                for(Bucket bucket : list) {\n                    switch (type) {\n                        case Steps:\n", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " for i in xrange(exec_count):\n    PrintLongLine('                                  Arg%d(a%d%s)' % (i, i,\n                                                                    bind_bind_types[i]))\n  if is_method:\n    print '  return object", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "\n    return simplejson.dumps(items,\n                            dict_data_fields=['id', 'title', 'start', 'end'])\n\"\"\n    return simplejson.dumps(items,\n                            dict_data_fields=['id', 'title', 'start', '", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                       new VarNode(\"score\"), null/* c */, Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(serviceGraphPattern);\n            }\n        }\n        {\n            final ASTSearchOptimizer optimizer = new ASTSearchOptimizer", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "       if self.request.method == \"post\":\n        if self.request.method == \"post\":\n        if self.request.method == \"post\":\n        if self.request.method == \"post\":\n        if self.request.method == \"post\":\n        if self.", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return UnitHelper.ComputePublicKeyToken(this.PublicKey); }\n}\n    /// <summary>\n    /// A list of named byte sequences perused with the assembly and used during execution, typically via .NET Framework helper classes.\n    /// </summary>\n    public IEnumerable", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           for (int i = 0; i < input.Count; i++)\n            {\n                d[i] = input[i];\n                r[i] = d;\n                uodd[i] = d;\n                ueven[i] = d;\n                v[", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\treturn new Apfloat[] {sortedNumbers[right - 1}};\n\t\t}\n\t\t\n\t\tApfloat[] medians = new Apfloat[2];\n\t\tApcomplex median;\n\t\tApcomplex[] sortedMedians;\n\t\t\n\t\tif", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "   if sample_count[v, j] == 0:\n        # If the node is not an ancestor of any of the reference nodes, then\n        # we have to check to see if it is an ancestor of the focal node.\n        if focal.ancestor(", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "       for key in csv_mapping:\n            if not csv_mapping[key] in mapping_json:\n                raise Exception(csv_mapping[key)\n        return result\n    def _test_fetch_enrich(self, sortinghat=False, projects=False):\n        \"\"\"Test", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tif (slot.Value.AllowBots)\n\t\t\t\t\t\t\t\t\t\t\tslot.Value.LockTeam = false;\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t\tinternal static String GetErrorMessage(int errcode)\n\t\t{\n\t\t\tif (errcode == 0)\n\t\t\t{\n\t\t\t\treturn \"NT_STATUS_SU", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "   return frame_header + padding_bytes + self.data\n    # TODO(roasbeef): Enforce max frame size, tests and such.\n    # TODO(roasbeef): Enforce max frame size, tests and such.\n    # TODO(roasbeef): En", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           if (boundingBox.Contains(cluster.BoundaryCurve.BoundingBox))\n                return;\n            throw new ArgumentException(\"Cluster \" + cluster.Id + \" has a curve with a bounding box that is not in the graph's bounding box\");\n        }\n", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\tm_maxSlopeDot = (1.0 / m_maxSlopeRadians);\n}\nvoid btKinematicCharacterController::setMaxAngularSlope(double slopeRadians)\n{\n\tm_maxAngularSlopeRadians =", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       for (ExpressionTree exp in initializers) {\n            if (canBeLeaked(exp)) {\n                checker.report(Result.failure(\"unique.leaked\"), exp);\n            }\n        }\n        return super.visitNewArray(node, p);\n   ", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound == null)\n\t\t\t{\n\t\t\t\tstack.setTagPriority(10);\n\t\t\t\tnbttagcompound = stack.getTagCompound();\n\t\t\t}\n\t\t\tif (nbtt", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\tif (typeAttribute != null)\n\t\t\t\t{\n\t\t\t\t\t_returnType = new ClassItem(typeAttribute.Value);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// init return type\n\t\t\tif (_returnType !=", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\tmyTrackBar.AutoSize = false;\n\t\t\t\tmyTrackBar.Height = 50;\n\t\t\t\tmyTrackBar.Width = 80;\n\t\t\t", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\twhen(classType.isClass()).thenReturn(false);\n\t\t\tdoReturn(Collections.singleton(annotationType)).when(lookup).findAll();\n\t\t\tCollection<? extends ImmutableClassType> result = instrumentation.addInstrumentationPoints(agentConfiguration,", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.isImplicit != other.isImplicit)\n\t\t\treturn false;\n\t\tif (this.postdominators == null) {\n\t\t\tif (other.postdominators != null)\n\t\t\t\treturn false;\n\t\t} else", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           int min2 = wideRExtent[end][r.leftChild];\n            int min = (min1 > min2 ? min1 : min2);\n            if (min > narrowL) { // can this right constituent stretch far enough to reach the left constituent?\n              continue", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "               'pg_dump', '-n', '-f', 'tmp', 'src', 'tmp',\n                'pg_restore', '-f', 'tmp', 'tmp', 'dst'\n            ],\n            shell=False, env=None,\n            stdout=PIPE, stderr=", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tvar state = process.GetOrCreateData<ProcessState>();\n\t\t\tstate.IgnoreThreadsChangedEvent = false;\n\t\t\tif (state.IgnoreThreadsChangedEvent)\n\t\t\t\treturn;\n\t\t\tif (SelectedItems.Contains(SelectedVM", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n\t/**\n\t * Writes a material with an YafaRay material identifier.\n\t *\n\t * @param   identifier  ", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( (proxyThat != null) && (getClass() == proxyThat.getClass()) ) {\n\t\t\tfinal Contact that = (Contact)proxyThat;\n\t\t\treturn (equals(that.contactDate) ||\n\t\t\t\tequals(that.contactLocation)", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "\t  if n == 0:\n\t    status = 'w'\n\t  else:\n\t    status = 'a'\n\t  with open(name, status) as f_ID:\n\t    f_ID.write(str(body_types[i]) + '\\n", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "   if cdata is not None:\n        if cdata in (0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12,\n                      -13, -", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "   self.fields['groups'].widget.widget.__init__(self, widget, widget.widget.__init__(self, widget, widget.widget.__init__(self, widget, widget.widget.__init__(self, widget, widget.widget.__init__(self, widget, widget.widget.__init__(self", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "       return fn(*arg, **kw)\n    def before_execute(self, query):\n        \"\"\"Receive the :class:`.Query` object before it is executed.\n        This event is intended to allow changes to the query given::\n            @event.listens_for(Query, \"", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "       for show_tag in self.show_tag_list:\n            if show_tag.location not in self.get_children():\n                self.runtime.add_block_as_child_node(show_tag, xml_object)\n        if self.get_children():\n", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "       for key in data_model_changes.get_changes(self.get_axes_filtered_data()):\n        \"\"\"\n        for key in data_model_changes.get_changes(self.get_axes_filtered_data()):\n        \"\"\"\n        if", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\tif (Class == null && Method != null)\n\t\t\t{\n\t\t\t\tStaticCompiler.IssueMessage(Message.MapXmlError, \"not implemented: cannot use 'method' attribute with 'class' or 'field' attribute for ldtoken\");\n\t\t", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);\n\t\t\tthis.objYLabel.TabIndex = 13;\n\t\t\tthis.objYLabel.Text = \"Description...\";\n\t\t\t//", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       c = self.get(\"mail/changes.1\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"test/changes/freshcvsmail.py\"]))\n        self.assertEqual(", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       if (null == termData) {\n            // No cached data for this identifier, create a new map\n            this.data.get(row.get(ID_KEY));\n            // Create a new map\n            termData = new ArrayListValuedHashMap();\n            this.data.get", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(isPassiveFlower()) {\n\t\t\tif(ticksExisted == 0) {\n\t\t\t\tif(acceptsRedstone()) {\n\t\t\t\t\tint redstoneSignal = 0;\n\t\t\t\t\tfor(EnumF", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           intrinsicCohesion += this.getRepresentativity(component, c);\n        }\n        return intrinsicCohesion;\n    }\n    private void birthCase3(ArrayList<Community> newCommunitiesToReturn, THashSet<Community> common", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "if not are_equal:\n    logger.error(\"ERROR: Document %s: Expected moreinfo %s and got %s\" % (str(docid), str(minfo), str(flags)))\n    raise\n\"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   for (java.util.Date exceptionDate : exceptionDates) {\n    exDateList.add(exceptionDate);\n    }\n    return new ExDate(exDateList);\n  }\n  /**\n   * Generates the dates at which it occur the specified event.\n  ", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo() { Component = sourceComponent, MemberName = sourceProperty };\n\t\tsourceEventBinding.Bind();\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = gameObject.AddComponent<dfEvent", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "       ObjectMapper mapper = new ObjectMapper();\n        String configJson = null;\n        if (jsonData != null) {\n            configJson = jsonData;\n        }\n        if (configJson != null) {\n            @SuppressWarnings(\"unchecked\")\n            Map", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t\tpublic final String pkg=\"lookittools\"\n\t\t\t\n\t\t\t//Allergy\n\t\t\tpublic static ims.resource.Image X_Allergy\t=", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "   return rnd.next(size);\n}\n    public int randomChoice(int size, int min) {\nNext line of code:\n    return rnd.next(min, size);\n}\n    public int randomChoice(int size, int min, int max) {\nNext", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "   \"\"\"\n    PRED_SBJ_IS_SUB_OF_OBJ = 'skos:broader'  # default predicate for subject item is subordinate to object item\n    \"\"\"\n    PRED_SBJ_IS_SUB_OF_OBJ = 'skos:sub", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           buffer.Append(\"          .shrinkfit  = \")\n                .Append(StringUtil.ToHexString(ShrinkFit)).Append(\"\\n\");\n            buffer.Append(\"          .mergecells = \")\n                .Append(StringUtil.ToHexString(Mer", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// Half-width kana.\n\t\t\t\tposn += 2;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Write the byte.\n\t\t\tbytes[posn++] = (byte)value;\n\t\t\tif", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "   src1 = env.A[b]\n    off10 = off1//off2\n    src2 = env.cst(off10.int(-1),10)\n    obj.operands = [src1, src2, dst]\n    obj.type =", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tstream = new InputStream(new URL(IURL.getURL(IURL.getURL(IURL.getURL(IURL.getURL(IURL.getURL(IURL.getURL(IURL.getURL(IURL.getURL(IURL.get", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "       return this == CREATIVE;\n        }\n        /**\n         * Returns true if this is the SURVIVAL game type\n         */\n        public boolean isSurvival()\n        {\n            return this == SURVIVAL;\n        }\n        /**\n", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");\n\t\t\tSecurityIdentifier groupSid = new SecurityIdentifier (\"BA\");\n\t\t\tCommonSecurityDescriptor csd; DiscretionaryAcl dacl;\n\t\t\tcsd = new CommonSecurityDescriptor (false", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "       self.__progress_cb(releases)\n        self.__queue.get()\n        self.__idle(self.__progress_cb, releases)\n        self.__queue.get()\n        self.__idle(self.__progress_cb, releases)\n        self.__queue.get()", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       if (PhotonEditor.Current != null)\n        {\n            if (PhotonEditor.Current.Rpcs != null)\n            {\n                for (int i = 0; i < PhonetNetwork.Rpcs.Length; i++)\n                {\n", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "\n        parentContext = getActivity();\n        parentContext.setOnMenuItemClickListener(new MenuItem.OnMenuItemClickListener() {\n            @Override\n            public boolean onMenuItemSelected(MenuItem menuItem) {\n                switch (menuItem.getItemCodeKey()) {\n                    case R.id", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "       if time_reversal:\n            return psit_G.conj()\n        else:\n            return psit_G\n        # Time-reversal symmetry\n        if time_reversal:\n            return psit_G.conj()\n        else:\n", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n        utkastRequest.setPatientEfternamn(Strings.repeat(\"a\", 255));\n        Response response = utkastController.createUtkast(intygs", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach (ILNode child in block.Body) {\n\t\t\t\t\tif (child is ILBasicBlock) {\n\t\t\t\t\t\tprevChildAsBB = (ILBasicBlock)child;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll)\n\t\treturn;\n\t    IsRagdoll = ragdol;\n\t    if (IsRagdol) {\n\t\tmSmoothPosition = MovementPivot.position;\n\t\tmEyeModel =", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   def __init__(self, config={}):\n        self.top =  ClassFactory( [InterpolatedNodeSet, InterpolatedNodeSet] )\n        \"\"\"Top and bottom node set index\"\"\"\n        self.polygon_region_ids = [ int ]\n        self.", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "   out[outOff + 3] = (byte) (((int) (bitsTobyte(bits, 24) & 0xff000000) >> 24);\n    out[outOff + 2] = (byte) (((int) (", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           super( source, new SimpleRegexValueGetter( objectVariables,\n                source.match( new PatternNode( \"*\" ), null ),\n                new FilterExpression[] { } ) );\n\n            }\n        }\n\tprivate static class PatternFinder\n\t    implements Iterable<", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "       elif key == 'VALEUR':\n            slice_json['valeur'] = transform_values_holder_xml_json_to_json(value[0)\n        else:\n            slice_json[key] = value\n    if comments:\n        slice_json['comment", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "          }\n        }\n        public void mouseReleased(MouseEvent e) {\n        }\n        public void mousePressed(MouseEvent e) {\n        }\n        public void mouseDragged(MouseEvent e) {\n        }\n        public void mouseDoubleClicked(MouseEvent e", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "   getNearestLC(name, 2/60.0/60.0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));\n    for (int y = 0; y < p.getRasterHeight(); y+= toolDiameterInPx/2)\n   ", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                   db.update(Db.Table1.TABLE_NAME, Db.Table1.GROUP_NAME + \" = '\" + newId + \"', \" + Db.Table1.ID_GROUP + \" = \" + deleteId, null);\n                    //Update budget items\n                    db", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "           }\n        }\n        #endregion\n    }\n    internal enum AllocMethod\n    {\n        HGlobal,\n        CoTaskMem\n    };\n    internal enum UnionChoice\n    {\n        File = 1,\n        Catalog,\n        Blob,\n        Sign", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "\n# Django 1.4\n# Django 1.5\n# Django 1.6\n# Django 1.7\n# Django 1.8\n# Django 1.9\n# Django 1.10\n# Django 1.11\n# Django 1.", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (queue.Count == 0)\n\t\t\t\treturn;\n\t\t\tvar queueItem = queue.ElementAt(0, new QueueItemComparer());\n\t\t\tif (queueItem.Item == itemName)\n\t\t\t\tqueueItem.", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "       infoText += \" file\" if numberOfFiles==1 else \"files\"\n        infoText += \"<br>\"\n        \n        if numberOfHiddenFiles>0:\n            infoText += \"(+\" + str(numberOfHiddenFiles) + \" hidden \" \n            infoText += \"file", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = re_m4.sub(re.M, code)\n        self.outputs[0].write(code)\n    def __init__(self, *k, **kw):\n        \"\"\"\n        :param vars: a dictionary of variables to be substituted\n        :", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "       result = self._planningExecutorClient.get_result()\n        rospy.loginfo(\"Received the result from PlanExecutorServer!\")\n        return result\n        #===========================\n        if self._as.is_preempt_requested():\n            rospy.log", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t- 2 * ( chemical[ 0 ][ idx - reactorExtext ] + chemical[ 0 ][ idx - reactorExtext + 1 ]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP format pattern is required\");\n                }\n                columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampLocale));\n                break;\n           ", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\treturn false;\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Recebe o valor do auto incremento e coloca na propriedade \n\t\t/// </summary>\n\t\t/// <param name=\"qs\">Objeto da Store Pro", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic SqlType[] SqlTypes\n\t\t{\n\t\t\tget { throw new NotImplementedException(); }\n\t\t}\n\t\tpublic System.Type ReturnedType\n\t\t{\n\t\t", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "       self.config_ntp_auth_keyid()\n        self.cli_load_config(self.updates_cmd)\n        self.results.update(self.ntp_auth_conf)\n        self.results.update(self.existing)\n        self.", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "       check_node(component.location, editing_user, None, editing_user, None, None, editing_user)\n        check_node(sibling.location, editing_user, None, editing_user, None, None, editing_user)\n        check_node(s", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "       digest.update((byte) (TEXT_CODE & 0xff));\n        addToCharBuff(ch, start, length);\n        updateWithCharBuf();\n        digest.update((byte) 0);\n        digest.update((byte) 0);", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "   return aetypes.Range(dict)\ndef mkcomparison(comparison):\n    return aetypes.Comparison(comparision)\ndef mklogical(logical):\n    return aetypes.Logical(logical)\ndef mkobject(object):\n   ", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           if (api == null)\n            {\n                throw new ArgumentNullException(\"api\");\n            }\n            if (controllerName == null)\n            {\n                throw new ArgumentNullException(\"controllerName\");\n            }\n            if (actionName == null)\n            {\n                throw", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "               value = entry.get_active_text()\n            self.on_open_remote(record, column.name, False, value,\n                entry=entry)\n            return True\n        elif event.keyval == gtk.keysyms.Delete:\n            if isinstance(", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanFactory.registerBeanDefinition(beanName, beanProperties,\n                    new MutableWritablePropertyValues(beanProperties));\n            }\n        }\n        return null;\n    }\n}", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "       f.strip()\n        f.close()\n    if f is not None:\n        pass\n    else:\n        raise ValueError(\"Unable to open file %s\" % path)\n    if state == 'present':\n        if not check_file_attrs(module,", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           [In, MarshalAs(UnmanagedType.IUnknown)] object pUnkState,\n            [In, MarshalAs(UnmanagedType.Error)] int hrStatus,\n            [In, MarshalAs(UnmanagedType.LPStruct)] ConstPropVariant pvValue\n", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "   }\n    @Timed\n    @Override\n    @PostMapping(\n            path = ROLES,\n            consumes = MediaType.APPLICATION_JSON_VALUE )\n    public Void addRoleToRoles( @RequestBody DirectedAclKeys directAclKeys ) {", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "       if not self.verify_children(element):\n        return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag of the element.\n        Verifies the tag of the element and the tag of the parent element.\n        If the tag of", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   return clone\ndef _get_elements_by_tagName_helper(parent, name, result):\n    \"\"\"\n    Get a list of elements with a given tag name.\n    Called by Element.getElementsByTagName and Document.getElementsByTagName\n    \"\"\"\n    if parent.nodeType ==", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t(EMSSceneSection) objectToTest,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(TlvTypeCodes.KeyLocatorDigest, endOffset))\n\t\t\t\tdecodeKeyLocator\n\t\t\t  (TlvTypeCodes.KeyLocatorDigest, keyLocator.getKeyDigest(), dec", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            if(ActiveWeapons.get(i).offCD()){\n                ActiveWeapons.get(i).update(delta);\n            }\n        }\n        //updates the", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       action.setColor( color );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue );\n        GameEngine.model().getGame().getRegistrationByColor( colorValue ).getTeam( GameEngine.model()\n        .getGame() );\n        Game", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "       raise RuntimeError(\"Error downloading file from %s: %s\" % (url, r.status))\n    if progress:\n        log.debug(\"Progress: %s\" % r.info())\n    if r.info()[\"url\"] != url:\n    Next line of code:", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tif (response == null)\n\t\t\t\t\tfailureReason = SR.FailureMergeOrdersToolDryRun;\n\t\t\t\telse\n", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   if not reaction.metabolites:\n        raise ValueError(\"Reaction has no metabolites\")\n    return [coeff * met.weight for met, coeff in reaction.metabolites.items()]\ndef _total_components_flux(\n    input_flux", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "       return self.get_queryset(\n            filter=(\n                # Filter by pootle_path\n                f.filter_by_pootle_path(\n                    pootle_path,\n                    user,\n                    get_editor_filter(user),\n", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "           },\n        ),\n        migrations.CreateModel(\n            name='Training',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                ('training_type',", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "       elif poxpkt.payload.opcode == pktlib.arp.REPLY:\n            self.logger.debug(\"Got ARP reply: {}\".format(str(poxpkt.payload)))\n            arp = poxpkt.payload\n            dstip = str(", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": " if (m_IgnoreChanges)\n    return;\n\n  if (m_RecentItems.contains(item))\n    return;\n\n  m_RecentItems.add(item);\n  writeProps();\n  updateMenu();\n  }\n  /**\n   * Rem", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (target.Follower)\n                return false;\n            // Checked aggressed/aggressors\n            if (target.Aggressed.Any(x => x.Defender == src) || target.Aggressors.Any(x => x.Attacker == src", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "       if (halfTradePeriodDate == null && takeOfferDate != null)\n            halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getHalfTradePeriod());\n        return halfTradePeriodDate;\n", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a == null) a = LeadingAny(p.down);\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tstatic void CompSets(Node p) {\n\t\tif (p == null) return;\n\t\tswitch (p.", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tbuff[4] = (byte)((address & 0x00000008)  >>  2);\n\t\t\tbuff[5] = (byte)((address & 0x00000007)  << 2);\n", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis(order);\n\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tpublic int compare(Object o1, Object o2)\n\t\t{\n\t\t\tif (o1 == null)\n\t\t\t\treturn -", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           for (k += N2 + N3; i < N1 + N2 + N3; i++, k += 3)\n            {\n                _indx2Units[i] = k & 0xff;\n            }\n            for (k += N3; i", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "       rate.create()\n        return rate\n    def edit(self, *args, **kwargs):\n        \"\"\" Edit a rate in the UI\n        Args:\n            *args, **kwargs: -  args and kwargs to the create method\n        \"\"\"\n        return self.create(*", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.Lock( offset, length, BufferLocking.WriteOnly );\n\t\t\t\tMemory.Copy( src, dest, length );\n\t\t\t\tshadowBuffer.Unlock();\n\t", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\t\tself.satfinder_scan_nims.setPlygData(satfinder_nim_list[0[1])\n\t\t\tself.satfinder_scan_nims.setPlygData(satfinder_nim_list", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "       else {\n            TcpAddress.TcpAddressMask mask;\n            if (StringUtils.getTcpAddressMask(filterStr, mask)) {\n                tcpAcceptFilters.add(mask);\n            }\n            else {\n                throw new IllegalArgumentException(\"tcpAcceptFilter", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               for (int i = 0; i < bytesPerRow; i++) {\n                    fout.Write(prior, 0, bytesPerRow - i);\n                    fout.Write(curr, 0, bytesPerRow - i);\n                }\n                prior =", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), None)\n        self.assertFalse(s.has_interface(':1.23'))\n        s.set_", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "           try:\n                m_product = self.p_operator(element, index)\n                output += str(m_product) + \"\\n\"\n            except:\n                pass\n            try:\n                m_product = self.p_operator(element, index)\n                output +=", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "               \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field \" +\n                \"named \\\"nosuchfield\\\".\",\n                \"nosuchfield: 123\");\n                \"1:1: Message type \\\"protobuf_unittest.Test", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic void set(Object key, Object value) {\n\t\tif ( isPutQueueEnabled() ) {\n\t\t\tqueueOperation( new Set( key, value, getSnapshot() ) );\n\t\t}", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member buying an item\n\t\t/// </summary>\n\t\t///", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "       action_message['attendance_state'] = modified_attendance.attendance_state\n        action_message['attendance_state'] = modified_attendance.attendance_state\n        action_message['attendance_state'] = modified_attendance.attendance_state\n       ", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tif (orderInvestigationLieVo.getRadReportingDetailsIsNotNull())\n\t\t{\n\t\t\tif (orderInvestigationLieVo.getRadReportingDetails().getRadReportingDetailsIsNotNull())\n\t\t\t{\n\t\t", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               pt = (POINT)c.ReadToStructure(0, typeof(POINT));\n                c.Dispose();\n                return pt;\n            }\n        }\n        /// <summary>\n        /// The index of this item.\n        /// </summary>\n       ", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "       if cwd is not None:\n        if profile is not None:\n        if cwd is not None:\n        if profile is not None:\n        if cwd is not None:\n        if profile is not None:\n        if cwd is not None:\n        if profile is", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "               }\n                else {\n                    throw new InvalidFormatException( 1, null, string.Empty );\n                }\n                toReturn.Add( new StructTypeInfo( nametypeFragments[0], managedType, UnmanagedType.Null, 0 ) );\n            }", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\treturn base_type != null && base_type.IsTypeOf (\"System\", \"ValueType\"); }\n\t\t}\n\t\tpublic bool IsTypeReference {\n\t\t\tget { return base_type != null && base_type.IsTypeOf (\"System\", \"Type", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"sender\"></param>\n        /// <param name=\"args\"></param>\n        /// <", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "       self.protocol = protocol\n        self.connection = None\n        self.socket = None\n        self.suppress_ragged_eofs = False\n        self.get_context_from_urllib3 = False\n        self.get_context_from_urllib3_", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.togglebuttonMissing = new global::MonoDevelop.Components.ImageViewToggleButton ();\n\t\t\tthis.togglebuttonMissing.Name = \"togglebuttonMissing\";\n\t\t\tthis.togglebuttonMissing.ToggleButton.Icon = new global::Gtk.", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "               notebooks[\"board\"].set_current_page(new_num)\n                notebooks[\"statusbar\"].set_current_page(new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_new_", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_1),\n    \"Move-Tab-to-up\": QKeyShortcut(Qt.CTRL + Qt.SHIFT + Qt.Key_2),", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"MutablePersistenceUnitInfo{\"\n\t\t\t\t+ (this.persistenceUnitName == null ? \"null\" : this.persistenceUnitName)\n\t\t\t\t+ \", \"\n\t\t\t\t+ (this.persistenceProviderClassName == null ? \"null\" : this.", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": " return false;\n}\n\n  public IFileEditorInput getFileEditorInput()\n  {\n    return new FileStoreEditorInput(getEditorInput());\n  }\n  \n  public IEditorInput getEditorInput()\n  {\n    return getEditingViewer().getEdit", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.DialogResult = System.Windows.Forms.DialogResult.Cancel;\n\t\t\tthis.butAttach.Location = new System.Drawing.Point(182, 23);\n\t\t\tthis.butAttach.Name = \"but", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "       if (sb != null)\n        {\n            sb.append(string.substring(i));\n        }\n        return sb.toString();\n    }\n}", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"RFC4231-TC1-Legacy\", hmac, data, digest);\n\t\t}\n\t\t[Test]\n\t\tpublic void RFC4231_TC2 ()\n\t\t{\n\t\t\tbyte[] key = {", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    switch(EnumSwitchUnion.m_d) {\n\t    \tcase option_1:\n\t    \tcase option_2:\n\t    \t\tcurrent_align += 4 + CDRSerializer.alignment(current_align, 4); // I32 type\n\t", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "       return null;\n      else\n        return java.ToString();\n}\n    private static String GetJreHome(String key)\n    {\n      String jreHome = null;\n      String jreVersion = null;\n      String jreHomeRegistry = FindJdkInRegistry(", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "   if job is not None:\n        return [l, job]\n    else:\n        return [l]\n    return None\n    def find_env(self, name):\n        # attempt to find env by 'Ansible:' header comment\n        comment = None\n        for l in", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "   modifier.target = BLObject.to_json(instance=modifier.target)\n        modifier.vertex_group = modifier_json['vertex_group']\n        modifier.use_add = modifier_json['use_add']\n        modifier.use", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "       }\n        for(int i = 0; i < totalBuckets; ++i)\n        {\n            if(rankCounts[i] == 0)\n                continue;\n            double[] rankRanks = new double[totalBuckets];\n            for(int", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       for (int i = 0; i < 4; i++) {\n            neighbors.add(i);\n        }\n        assertEquals(4, neighbors.size());\n        for (int i = 0; i < 4; i++) {\n            assertEquals(", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "   def parser(self, option, cap=None):\n        if not cap:\n            self.cap = self.cap\n        if option == 'help':\n        ###Help command###\n        self.help_command()\n        else:\n        ###Give packet number to inspect##", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "           this.rptComboBox.Location = new System.Drawing.Point(91, 165);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               if (isReturnAllTypes()) {\n                    QName qname = new QName(targetNamespace, sdoTypeName);\n                    getGeneratedGlobalElements().put(qname, new SDOProperty(qname, SDOConstants.SDO_URI, SDOConstants.S", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       self.holidays_first_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state':'validate', 'manager_id': False})\n    def holidays_first_validate_notificate", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           set { this.Enabled = value; }\n        }\n        /// <summary>\n        /// Gets the number of items displayed in the <see cref=\"IBOColSelector\"></see>.\n        /// <param name=\"control\">The <see cref=\"IBOColSelector\"></see", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "           return String.Format(\"Mixer Line: {0} {1}\", Name, ShortName);\n        }\n    }\n}\n", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tvalue10 = (ims.core.admin.domain.objects.CareContext)extractValue( valueObject.getCareContext(), domainObject.getCareContext() );\n\t\t\tif ( value10 == null )\n\t\t\t\tif ( domMap_", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "       \"cargo\",\n        \"build\",\n        opts,\n        env=env,\n        verbose=verbose)\n        build_elapsed = time() - build_start\n        if status:\n            return status\n        if android:\n            # Build the APK\n            ap", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\tif (estP == 0) {\n\t\t\t\testP = estN;\n\t\t\t}\n\t\t\tif (estN == 0) {\n\t\t\t\testN = estP;", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               Stashed.SetStashDiffs(gitStash.Rev, gitStash.Rev, gitStash.Message, gitItemStatuses, gitStash.Rev, gitStash.Message);\n                }\n            }\n        private void LoadGitItemStatuses_", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "st.CTrackJob(lattice, pset)\n\nst.CTrackJob(lattice, pset)\n\nst.CTrackJob(lattice, pset)\n\nst.CTrackJob(lattice, pset)\n\nst.CTrackJob(lattice", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       if (o instanceof AuthScope) {\n            return this.match((AuthScope) o);\n        }\n        return false;\n    }\n    /**\n     * @see java.lang.Object#hashCode()\n     */\n    @Override\n    public int hashCode() {", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                       b}, callback, asyncState);\n        }\n        public int AddInt(int a, int b) {\n            return this.Invoke(\"AddInt\", new object[] {\n                        a,\n                        b});\n        }\n        public System.IAsyncResult BeginGetEnc", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t\tif (i != (snrs.size() - 1)) {\n\t\t\t\t\t\ts += \" und \";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \nNext line of code:\n\t\t\t\t\tE", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "   self.miso_bits[0][0] = mosi\n    self.miso_bits[0][1] = misto\n    self.miso_bits[1][0] = misto\n    self.miso_bits[1][1] = mismo\n", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "         cursor = limit - v_3;\n          if (cursor < I_pV) {\n            return false;\n          }\n          cursor = I_pV;\n          v_2 = limit_backward;\n          limit_backward = cursor;\n          cursor = limit -", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               o = cls.getObject(dins);\n            } catch (Exception ex) {\n                System.out.println(\"ex: \"+ex);\n            }\n            if (cd == null) {\n                cd = new ChannelData(channel, cls, o);\n            }", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "   return result, extension.get_flags()\n    def _get_public_key(self, binary):\n        return self.cert.get_public_key(binary)\n    def _get_serial_number(self):\n        return self.cert.serial_number\n    def", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tstill_there = (s.begin() == i);\n\t\t\t}\n\t\t\tif (still_there) {\n\t\t\t\t\"\"\", file=f)\n    print(\"\"\"\n\t\t\t\t/* If the slot is still on the list", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   if X.begin >= 0x10000:\n    # The first value is the same, but the second value is different.\n    # The second value is the same, but the first value is different.\n    # The first value is different, but the second value is the", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\tExpect(27);\n\t\t\tif (t.pos > la.pos)\n\t\t\t sym.attrPos = new Position(la.pos, t.pos, la.col);\n\t\t}\n\t\telse SemErr(\"bad attribute\");\n\t\t", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "           edi_doc.update({\n                    # force trans-typing to purchase.order.line upon import\n                    '__import_module': 'purchase',\n                    'date_planned': line.date_planned,\n                    'product_uom_q", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS);\n\t\treturn new ServiceDescription(\"_openhab-server._tcp.local.\", \"openH", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               nameMap.put(name, permissions);\n                permissions = new ArrayList<>();\n                nameMap.put(name, permissions);\n                permissions.add(permissionEntry);\n            }\n            else\n            {\nNext line of code:\n                permissions.add(permissionEntry);\n            }", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "       subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))\n        for device in devices:\n            assert device.subsystem == 'input'\n            assert device.asbool('ID_INPUT_MOUSE')\n            assert device.sys_", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   from config import appToken\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "# Use uvindex to work out the necessary parameters of this dataset.\n# Use uvfmeas to get the Stokes and Stokes scattering information.\n# Use uvfmeas to get the Stokes and Stokes scattering information.\n# Use uvfmeas to", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "\n            if (m_Keys.Count > 0)\n                ItemID = 104000010 + m_Keys.Count;\n            else\n                ItemID = 104000000;\n        }\n        public override void GetFrom", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (String devicesString : devices){\n            String[] devicesStringArray = devicesString.split(\"\\\\s+\");\n            String deviceName = devicesStringArray[0;\n            String deviceIpAddress = ipAddressMap.get(deviceName);\n            String deviceModel = liveModelMap", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\n    if (lastSeenVersion < Version.DAMEON_STICKERS) {\n     ", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     if (split.length == 0) {\n        // empty line\n        continue;\n      }\n      if (split.length == 1) {\n        // empty regex\n        continue;\n      }\n      if (split.length == 2) {\n        // regex with", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "       if sub_path:\n            try_names = [n + sub_path]\n        if try_names:\n            return try_names\n        return []\n    def find_graphics_dependencies(self, filename, source_dir, path):\n        \"\"\"Find the graphics dependencies for a", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "   def features(self, query):\n        \"\"\"Return an iterable which yields instances of Feature for features within the passed query.\n        Required arguments:\n          query -- a Query instance specifying the region for which features should be returned\n        \"\"\"\n        return None\n    def features_at_", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "   return Difference(want, have)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   @property\n    def is_displayed(self):\n        return (\n            self.in_explorer and\n            self.title.text == 'Automate Method' and\n            self.datastore.is_opened and\n            check_tree_path(\n                self", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           throw new Exception(getClass().toString() + \", getClassByName(), \"\n            + \"no class definition for class (\" + className + \"/\" + classPath + \")\");\n            }\n        return result;\n    }\n    public IAction getActionObject(String className, String db", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "           {\"commentable_id\": \"dummy\", \"course_id\": unicode(self.course_id},\n            {\"body\": \"foo\"},\n            mock_request\n        )\n    def test_update_thread_empty_title(self, mock_request):\n        self._test", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "       embedManifestDllAction(target, source, env)\n        return 1\n    return 0\nembedManifestExeCheck = SCons.Action.Action('$MTEXECOM')\ndef embedManifestExeCheck(target, source, env):\n    \"\"\"", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "       execute(getSelection(), new ISchedulingRule {\n        public ISchedulingRule getSchedulingRule() {\n        return new ISchedulingRule {\n        public ISchedulingRule getSchedulingRule() {\n        return new ISchedulingRule {\n", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\tif (meta.getAggregateType() == null)\n\t\t{\n\t\t\tlogError(BaseMessages.getError(PKG, \"AggregateRows.Log.MissingAggregateType\", smi));\n\t\t\treturn false;\n\t\t}", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "   ## ultrashortcuts\n    assert f('1230+5', last) == (d(2014,1,31, 12,30), d(2014,1,31, 12,35))\n   ", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           if (mintime.TotalMilliseconds() > maxtime.TotalMilliseconds())\n                maxtime = mintime;\n            if (mintime.TotalMilliseconds() < maxtime.TotalMilliseconds())\n                mintime = maxtime;\n            mintime =", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "       s, o = self._session_cmd_close(session, suspend_log_chk_cmd)\n        if s:\n            raise exceptions.TestFail(\"Guest system log is dead. Resume failed.\")\n        # Verify the guest is up\n        self.verify_gu", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       rc.get();\n        service.shutdown();\n        Thread.sleep(1000000);\n        rc.get();\n        Thread.sleep(1000000);\n        rc.get();\n        Thread.sleep(10", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n                ((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfterParameters(res, destination);\n            }\n            this.owner.getDecorator().onSend", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\treturn (uint)((value << 3) - 0x7FFE0000);\n}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "       self.fm.commands.extract(one_file.path, au_flags, refresh)\n        self.fm.env.copy.clear()\n        self.fm.env.cwd.load_content()\n        self.fm.env.cwd.cwd()\n       ", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t[ExpectedException (typeof (ArgumentException))]\n\t\tpublic void CreateInstance_StringStringNull ()\n\t\t{\n\t\t\tActivator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\");\n\t\t}\n\t\t[Test", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "       repo = self._setup(da, None, None)\n        self.assertEqual(repo.changesets.count(), 2)\n        avs = AppVersion.objects.all()\n        flagdata = flags4appversions(avs)\n        self.assertIn(self.", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "               userstate.texture = cmd.parameters[\"texture\"]\n            if \"avatar\" in cmd.parameters:\n                userstate.avatar = cmd.parameters[\"avatar\"]\n            if \"avatar_url\" in cmd.parameters:\n                userstate.avatar_url", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "       PlayerGroup group = player.getPlayerGroup2();\n        if (group != null) {\n            group.onEvent(new PlayerGroupLeaderChangeEvent(group, player));\n        }\n}\n}\n", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "       if formatter is None:\n            formatter = Formats.get(conf.UI.formatter)\n        if outfile is None:\n            outfile = StringIO()\n        if not has_pygments:\n            formatter = \"Null\"\n        if not formatter", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "       column, tree_model, tree_iter = self._setup_column(1, False)\n        tree_model.add_map(tree_iter, self._create_store_map(1, False, 15, 1))\n        column.quantity_renderer.set", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t} while (parent != null);\n\treturn 0;\n    }\n}\n\n", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               nl = element.SelectSingleNode(\"Dialog\").ChildNodes;\n                if (nl != null) {\n                    XmlNode n = nl[0];\n                    DialogEntry d = new DialogEntry();\n                    Dialog.Add(d);\n                    d.Dialog = n", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\t\tm_key[i] = new ExodusActivation();\n\t\t\t\t\telse if (m_Peerless == PeerlessList.MelisandeTrammel)\n\t\t\t\t\t\tm_key[i] = new Mel", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tfor(int i = 0; i < beans.length; i)\n\t\t\tcoll.add(beans[i]);\n\t\treturn coll;\n\t}\n\tpublic static ChangeOfServiceVoCollection buildFromData(imso.ImsManualAssignmentRef", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "\n        new Version(1, new BitMatrix(17, 17, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\tkdf.Compute(pbMsg, pbExpc, pbExpc);\n\t\t\tDebug.Assert(MemUtil.ByteArraysEqual(p.GetByteArray(Argon2Kdf.ParamSalt), pbSalt));\n\t\t\tDebug", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn (boolean) (dispatchManaExact(stack, player, cost, remove));\n\t}\n\t/**\n\t * Dispatches mana to items in a given player's inventory. This version also\n\t * checks for IManaDiscountArmor items equipped to", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "\n# Django settings for django_agfk project.\n# Copy this file to app_server/settings.py and adjust to your specification (it should work fine out of the box)\n# Django settings for django_agfk project.\n# Copy this file to app_server/settings.", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\"but Lights has {1} LEDs\",\n\t\t\t\t\t\tNextFrame.PixelCount,\n\t\t\t\t\t\tLightCount));\n\t\t\t// Clone the layer over to avoid any reference links\n\t\t\tNextFrame.Blending", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage != null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorErrorMessage)))\n            return false;\nNext line of code:\n       ", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.clcc = p.readInt();\n            dc.clcc = p.readInt();\n            dc.clcc = p.readInt();\n            dc.clcc = p.readInt();\n            dc.clcc = p.readInt();", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isApplicableToApplications()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (od", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           for (int x = 0; x < xSizeP; x++)\n            {\n                // Vertices\n                newVertices[x * ySizeP + y] =\n                    newVertices[x * ySizeP + y - 1]\n                    // Vertices", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\tint testInt2 = rand.nextInt(5000);\n\t\t\t\n\t\t\trawResult = client.add(API_METHOD_ADD, testInt1, testInt2);\n\t\t\t\n\t\t\tif (rawResult != null)", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn null;\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\nNext line of code:\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tpublic void set", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "out.writeBoolean(false);\nout.writeUTF(\"Not found\");\nout.flush();\nout.close();\nin.close();\n        }\n        else\n        {\nNext line of code:\nout.writeBoolean(true);\nout.writeObject(found.object);", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "                       16 + (~stactics_display_buffer.read(i) & 0x0f),\n                        16,\n                        0, 0,\n                        pixel_x, pixel_y,\n                        Machine.visible_area, TRANSPAR", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                   .Distance(\n                                        position.To2D())\n                                    <=\n                                    spell.Range + spell.Width + 100\n                                    &&\n                                    !(target.IsWard() || target.IsWall())\n                                ", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       if (graph.isAncestorOf(x, y)) {\n            return false;\n        }\n        if (graph.isAncestorOf(y, x)) {\n            return false;\n        }\n        if (graph.isAncestorOf(", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   if (plcs.Push(pop[i]))\n                        return pop[i];\n                }\n            }\n            return null;\n        }\n        /// <summary>\n        /// Find an element with a specified name by looking to the descendants of this element.\n        ///", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       if (this.attachmentFile == null) {\n            if (other.attachmentFile != null) {\n                return false;\n            }\n        } else if (!this.attachmentFile.equals(other.attachmentFile)) {\n            return false;\n        }\n       ", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                       if (mobiles[i] == from)\n                            continue;\n                        if (mobiles[i] == m_Item.m_From)\n                            continue;\n                        if (mobiles[i] == m_Item.m_From.B", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tif (History.Contains(msg))\n\t\t\t\t{\n\t\t\t\t\tif (message)\n\t\t\t\t\t{\n\t\t\t\t\t\tInternalMessage(user, \"History: \\\"{0}\\\"\", msg.Text);\n\t\t\t", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": " return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n}\n  @Override\n  public String[] getAvailCompoIds(String sClientSpaceId, String sUserId, String sCompoName) {\nNext line of code:\n ", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                           files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    ZipFilesDialog.instantiate(mActivity.getFragmentManager(),\n                            mListView.getCheckedItems(),\n                            mListView.", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "       this.o = false;\n        this.p = false;\n        this.j.readLock().lock();\n        try {\n        this.i.clear();\n        } finally {\n        this.j.readLock().unlock();\n        }\n        this.channel.", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "           z_arr[p_index, kk, 0] = z_dict[z_key][per]\n            z_err_arr[p_index, kk, 0] = z_dict[z_key][per, 1]\n            t_arr[", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "if (name.equals(context.getAddress().toShortString()))\nreturn R.string.IdentityUtil_unverified_banner_one;\nelse\nreturn R.string.IdentityUtil_unverified_banner_two;\n}\nelse {\nreturn R.string.", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "       env[\"RUST_BACKENGINE_EXTRA_PATH\"] = \" \".join(extra_path)\n        env[\"RUST_BACKENGINE_EXTRA_LIB\"] = \" \".join(extra_lib)\n        if gonk:\n            env[\"", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "       for path, tests in iteritems(type_paths):\n            for test in tests:\n                tests.tests = [test]\n                tests.reftest_nodes = []\n                tests.reftest_references = []\n                tests.reftest_references_by", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "\t\tif (errorsInScript != null) {\n\t\t\tif (errorsInScript instanceof Throwable) {\n\t\t\t\terrorsInScript = new Throwable(errorsInScript.getStackTrace());\n\t\t\t}\n\t\t\tif (errorsInStream != null)", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "           throw new NotSupportedException();\n}\n        /// <summary>\n        /// Method to override indicating whether we can timeout or not\n        /// </summary>\n        /// <returns>True indicates a timeout can be set</returns>\n        protected virtual bool ServerCanTimeout()\n        {\n", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "     for i in range(energy.size):\n        Etf = energy[i]\n        grad_Etf = grad[i].flatten()\n        grad_E = Etf*grad_var+energy_var*grad_Etf+grad_means\n        grad_E", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif (this.isValidated())\n\t\t\treturn compare(obj, caseInsensitive);\n\t\telse\n\t\t\treturn compare(obj, caseInsensitive);\n\t}\n\tpublic int compare(Object obj, boolean caseInsensitive)\n\t{\n", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found.size(), 2);\n        assertEquals(found.get(0).getId(), stacks[1].getId());\n        assertEquals(found.get(1).getId(), stacks[3.getId());\n        }\n    private void updateAll", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       pf.add(new Parameter(CRAWLER_DEPTH, depth, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\tswitch (kind)\n\t\t\t{\n\t\t\t\tcase LKind.Expr:\n\t\t\t\t\tswitch (pattern.Kind)\n\t\t\t\t\t{\n\t\t\t\t\t\tcase LKind.Expr:\n\t\t\t\t\t\t\tswitch", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "                   if (colisionList.HitHouse)\n                    {\n                        extendedWillHit++;\n                        extendedFarmLocation = objAiBase.Position;\n                    }\n                }\n                if (extendedWillHit >= zedMenu.GetParamSl", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tif(context != null)\n\t\t\tcontext.contextMenu OnGPContractDetails = new ContextMenu(context, form.getDtf().getContextMenuBar());\n\t\tImmersionManager m = ImmersionManager.sank;\n\t\tm.setImmersion", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "   return re.findall(pattern, frozen_output,\n                       # re.S is a flag that makes the regex engine\n                       # more aggressive in matching.\n                       re.S)\n\n\n# Install the prereqs.\nif not no_pr", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           'value' = 1\n        })\n        f = Form(r)\n        with f.subs.new() as sub:\n            self.assertEqual(sub.v, 1)\n            self.assertEqual(sub.value, 1)\n        f.sub", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert (Sum(x, (x, 1, 2)) + 1).change_index(1, 2, 3) == 2\n    assert (Sum(x, (x, 1, 2)) + 1).change_index(1, 2", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif(argc==1){\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l,1,out a1);\n\t\t\t\tvar ret", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "               this._notifyAction = action;\n                this._newItemList = (changedItems == null) ? null : ArrayList.ReadOnly(changedItems);\n                this._newStartingIndex = startingIndex;\n            }\n            else\n            {\nNext line of code:\n                this._", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           StringReader reader = new StringReader(writer.toString());\n            InputSource inputSource = new InputSource(reader);\n            try {\n                parser.parse(inputSource);\n            } catch(Exception e) {\n                fail(\"An exception should have occurred but didn't.\");\n               ", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "               {\n                    c.Campus = Token2Csv();\n                    break;\n                }\n                case Param.Campus2:\nNext line of code:\n                {\n                    c.Campus2 = Token2Csv();\n                    break;\n", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "Console.WriteLine (\"width: {0}\", ide.width);\nConsole.WriteLine (\"height: {0}\", ide.height);\nConsole.WriteLine (\"colorCount: {0}\", ide.colorCount);\nConsole.WriteLine (\"reserved: {0}\", ide.reserved);\nConsole.WriteLine (\"", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "               if (l.inSameSubroutine(JSR)) {\n                    // the current label is reachable from the JSR target\n                    // (the JSR target is the first label of the subroutine)\n                    // and belongs to the same subroutine.\n", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.Maximum(__esp,1,T::_V12E+1);\n            if(ptr_of_this_method != NULL)\n\n            {\n                ptr_of_this_method = ILIntepre", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\tcomboLabelPosition.setSelection(position.equals(Position.Inside) ? 0 : 1);\n\t\t\tlblLabelPosition.setText(\"Label Position: \" + String.valueOf(comboLabelPosition.getSelection()));\n\t\t}\n\t\t\n\t\t", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "       currImageValue = self._getCurrentValue( driver, \"Image\" )\n        print \"Check decrease image...\"\n        print \"oldImageValue=\", lastImageValue, \"newImageValue=\", currImageValue\n        self.assertEqual( int(currImageValue), int(lastImage", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "   if srv_token is not None:\n        self.transport.gss_kex_used = True\n        self.transport._activate_outbound()\n        \"\"\"\n        if not self.transport.server_mode:\n        # reject if p's bit length < ", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "       if (treeModel != null) {\n            treeModel.reload(tree);\n        }\n        }\n        if (tree != null) {\n        }\n        if (treeModel != null) {\n        }\n    }\n    /**\n     * Gets the folder.\n", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "               res = self.cr.fetchone()[0]\n                return res or 0.0\n        \"\"\"\n            def sum(self, code, from_date, to_date=None):\n                if to_date is None:\n                    to_date = datetime.now().", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "       mf.append(marr[i])\n        dlnmdlnm.append(dlnm)\n        #bias.append(bias_mass_func_tinker(marr[i], zi, hzarr[i,0], hzarr[", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.setSize(font.getFontMetrics(font.getFontFont(font.getFontMetrics(font.getFontMetals(font.getFontMetals(font.getFontMetals(font.getFontMetals(font.getFontMetals(font.get", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "       #theta_res is the rotation angle in theta-axis, theta_res=0.1 means the rotation angle is 0.1 degree\n        #phi is the rotation angle in the x-axis, phi=0.1 means the rotation angle is 0.1 degree\n", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\twindow.Show();\n\t\t}\n\t\tprivate static void ShowOrHide(Control control)\n\t\t{\n\t\t\tif (control == null)\n\t\t\t\tthrow new ArgumentNullException(\"control\");\nNext line of code:\n\t\t\tcontrol.", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "       for n in xrange(1, int(1 + (params[0]['nbins'] - 1) / step))\n        raise TypeError(\"TH3F requires a bins parameter with a bins attribute\")\n        else:\n            raise TypeError(\"TH3F requires a bins parameter", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "       if (query.getPagingOrder() == PagingOrder.NORMAL) {\n            contact.firstServerMsgId = query.getAllMessagesCount();\n            protocol.getStorage().updateFirstServerMsgId(contact);\n        }\n        }\n    }\n    public", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "           im1L = im1.convert(\"L\", rgb2I)\n            h1 = im1L.histogram()\n        else: \n            #im1.mode == \"L\":\n            h1 = im1.histogram()\n        #compute transform\n", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tif (MAX_LOG < 0)\n\t\t\t\tbreak;\n\t\t\telse\n\t\t\t\tMAX_LOG--;\n\t\t\trsp = tag.readRecord(sfi);\n\t\t\tif (rsp.isOkey())\n\t", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "       return \"Unknown block of type %u\" % self.block_type\n\n", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\tsocketAdapter.disconnect();\n\t\tsocketAdapter = null;\n\t\t// log.dispose();\n\t\t// log = null;\n\t\t// if (commLog != null)\n\t\t// commLog.dispose();\n\t\t// commLog = null;\n", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "   return self.dispatch(environ, start_response)\n    def dispatch(self, environ, start_response):\n        \"\"\"Dispatch WSGI request to the right WSGI app.\n        Args:\n            environ (Mapping): a dict containing WSGI environment variables\n            start_", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tif sys.argv[ 1 ] == \"bic\" :\n\t\t\tbic = BIC( sys.argv[ 2 , ] , sys.argv[ 3 , ] )\n\t\t\tprint \"BIC\"\n\t\t\tbic.precalculate_", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           switch (chance)\n            {\n                case 0:\n                    res = EnhanceResult.Failure;\n                break;\n                default:\n                    break;\n            }\n        }\n        public static void CheckFailure(ref EnhanceResult res, int chance)", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "   entries[entry_name] = rdltypes.UserEnum(entry_value, displayname, desc)\n    return entries\n    #---------------------------------------------------------------------------\n    def parse_addressBlock(self, addrBlock: minidress.Element) -> Union[None, rdltypes", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "               MessageBox.Show(\"Fatal Error:\\nUnable to locate coniguration file for FOG Service!\");\n                this.Close();\n                }\n                }\n                else\n                {\nNext line of code:\n                MessageBox.Show(\"Fatal Error:\\nUnable to locate", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "               return (bool)this.ViewState[\"SubmitText\"];\n}\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n}\n\n            }\n        /// <summary>\n        /// \n        /// </summary>\n        [Meta", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               if(this.trianglesUsed[textureHash] <= 0)\n                    continue;\n                if(!this.textureArray[textureHash].getImage().isSelected())\n                {\n                    this.textureArray[textureHash].getImage().selectTexture", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   if not (exposedHeaders in header):\n        response.set_header('Access-Control-Expose-Headers', exposedHeaders + ', ' + header)\n    return response\n\ndef ensure_valid_usage_key_string(view_func):\n    \"\"\"\n    This decorator", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "               }\n                // Remove the old drivers from the idle queue\n                for (int i = 0; i < idlePool.Count; i++)\n                {\n                    Driver d = idlePool.Dequeue();\n                    if (d.ConnectionLifetimeExpired())\n                   ", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "   var = [var]\n    if not isinstance(var, (list, tuple)):\n    raise ValueError(f'{name} must be a list of numbers, not {type(var).__name__}'\n                      + f'{var}. Got {var!s}'.", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "QUEST.setStartingItem(SI_ORE,REWARDS)\nQUEST.addQuestItem(SI_ORE,REWARDS)\nQUEST.addQuestNpc(WK_ROMP)\nQUEST.addQuestItem(SI_ORE,RE", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tdouble? seconds1 = this.Seconds;\n\t\t\t\t\tint num2 = (int)Math.Floor(((double)seconds1.Value - ((double)num * 60 * 60 + (double)num1)) * 100", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           VertexDataStride = 0;\n            VertexDataSize = 0;\n            _attributes = new List<AttributeInfo>();\n            _textures = new Dictionary<String, TextureInfo>();\n            _uniforms = new Dictionary<String, int>();\n            Program = ", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "   for rxn in self.reactions:\n        rxn._model = self\n        # point _model to self\nNext line of code:\n    for met in self.metabolites:\n        met._model = self\n        # point _model to self\nNext line of", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor(int x = 0; x < beans.size(); x)\n\t\t{\n\t\t\tTumourGroupListVo vo = (TumourGroupListVo)beans.get(x);\n\t\t\tcoll.add(vo);\n\t\t", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tif(current.width>0){\n\t\t\t\t\tcurrent.width = 0;\n\t\t\t\t\tcurrent.x = lines[selected.lastElement].x;\n\t\t\t\t\tcurrent.y = lines[selected.lastElement].y;\n", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       new AnimationSet(false)\n        {\n        Animation anim;\n        public void onAnimationEnd(Animation animation)\n        {\n        anim = animation;\n        }\n        public void update(Message msg)\n        {\n        switch (msg.arg)\n        {\n", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (PartnerInterestRow.FieldKey == 0)\n                {\n                }\n                else\n                {\n                }\n                if (PartnerInterestRow.FieldKey != 0)\n                {\n                }\n                else\n                {\n                }\n                if", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tint[] \t\tscoresPred \t= new int[length];\nNext line of code:\n\t\tint \t\tindex \t\t= 0;\nNext line of code:\n\t\tint \t\tindexTmh \t\t= 0;\n", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
