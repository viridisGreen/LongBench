{"pred": "   private final transient JKademliaStorageEntry storageEntry;\n    private final transient JKademliaRoutingTable routingTable;\n\n    private final transient Timer timer;\n\n    private final transient ContentLookupOperation contentLookupOp;\n\n    private final trans", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "       mImmersiveSensorNavigation = new ImmersiveSensorNavigation(glView);\n        mImmersiveTouchNavigation = new ImmersiveTouchNavigation(glView);\n\n        // Add some basic effects to the list\n        mEffects.add(new InterlaceEffect());\n", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "\nclass Encryption1(Encryption):  # noqa: D101\n    input_widths = [8]\n    output_widths = [8]\n\n    @classmethod\n    def eval(cls, c, r):\n        c = RotateLeft(c", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "   private ContrastBrightnessAdjustmentEffect mContrastBrightnessAdjustmentEffect;\n    private FlipEffect mFlipEffect;\n    private FlowAbsSubEffect mFlowAbsSubEffect;\n    private KernelBlurEffect mKernelBlurEffect", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "               new EventCommandHandler<>(UpdateFrequencyChangeCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));\n    }\n\n    private void queueEvent(Event event) {\n        this.eventQueue.offer(event);\n    }\n\n    public void", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "    */\n    private LocalRateLimiter localRateLimiter;\n\n    private TaskRunnerConfig taskRunnerConfig;\n\n    private TaskRunnerLog taskRunnerLog;\n\n    private TaskListenerManager taskListenerManager;\n\n    private int threadCount = 1;\n\n    private int thread", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\tSet<Problem> problems = new CheckRunner(args).run();\n\t\t\tif (!problems.isEmpty()) {\n\t\t\t\tthrow new AbortCheckException(problems.stream() //\n\t\t\t\t\t\t.map(problem -> format(\"- %s", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "           // save private and public Key to external storage\n            // DebugManager.INSTANCE.storePrivatePublicKeyToExternalStorage(rsa.getPrivKeyinBase64(), rsa.getPubKeyinBase64());\n\n            // notify the user\n            // notify the user\n", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "   SignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN,\n        new byte[0], new byte[0]);\n}\n}\nu2f-ref-code/java/src/com/google/u2f", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "       self.uaA.acctMgr.onEvent(event)\n        if self.uaA.state == UasStateTrying:\n            self.uaA.state = UasStateConnected\n        else:\n            self.uaA.state = UasStateDead", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "\n\nclass FlagList(IntEnum):\nNext line of code:\n\n\nclass ByteFlag(FlagList):\nNext line of code:\n\n\nclass Boolean(IntEnum):\nNext line of code:\n\n\nclass CreationTime(IntEnum):\nNext line of code:\n", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "\n  def convert_ast_constraint(self, ast_node):\n    if isinstance(ast_node, TreeNode):\n      return self.convert_expression(ast_node)\n    elif isinstance(ast_node, Operator):\n      return self.convert_expression(ast", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "               String[] formats = new String[] { \"http://www.youtube.com/watch_popup?feature=youtube_gdata&v=\" };\n                Uri uri = Uri.parse(url);\n                String urlWithoutFormat = uri.getPath();\n                for (int i =", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "       // Create a new instance of the PostLocationDataBody class.\n        PostLocationDataBody postLocationDataBody = new PostLocationDataBody();\n        // Set the location data to the PostLocationDataBody object.\n        postLocationDataBody.setLatitude(latitude);\n        postLocation", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "       net = Network('net1')\n        # Layer pipeline.\n        self.net = InterLayerPipeline(net)\n        self.net.add(InputLayer(1, 1))\n        self.net.add(ConvLayer(1, 1, 2,", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "   class MyModel(BaseModel):\n        id = Column(Integer)\n        name = Column(String)\n        __init__(self, *args, **kwargs):\n            init_called = True\n            super().__init__(self, *args, **kwargs)\n\n    my_", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "   register(':')\n    XPath30Parser.unregister(':')\n    register(':', bases=(ValueToken,))\n    XPath30Parser.unregister(':')\n    register(':', bp=100)\n    XPath30Parser.", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "                   new HueTransformation(),\n                    new InvertTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MapColorsTransformation(),\n                    new MarbleTransformation(),\n                    new MaskTransformation(),\n", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "\n    private final Unbinder unbinder = ButterKnife.bindSelf(this, fragment.getContext());\n    private Movie movie;\n    private MovieDetails movieDetails;\n    private List<Rating> ratings;\n    private List<Trailer> trailers;\n   ", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "\n                try {\n                    if (remoteNotification) {\n                        remoteNotificationManager.addNotificationListener(name, listenerId, filter, handback);\n                    } else {\n                        server.getMBeanServerConnection().addNotificationListener(name, listener, filter, handback);", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "       await wild_report.wait_for_reaction(pending=True)\n        if reaction.emoji == MyEmojis.REMOTE:\n            await wild_report.delete()\n            await Wild.insert(self.bot, wild_id=wild_id", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "   if c['vocab_def']:\n        vocab_def = Vocabulary(c['vocab_def'])\n    else:\n        vocab_def = None\n    # Load dictionary\n    dictionary = retrieve(c['vocab_def'])\n", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": " assert isinstance(doppler, TCXOSine)\n  assert doppler.amplitude_mps == 50.\n  assert doppler.period_s == 3.\n\n\ndef test_params_doppler_poly():\n  '''", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "\n                mParticipants = new ArrayList<>();\n                mParticipants = participantDao.getAll();\n                mParticipantAdapter.setData(mParticipants);\n                mParticipantAdapter.notifyDataSetChanged();\n            }\n        }\n    }\n\n", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "\n    def test_random_key(self):\n        for i in range(10):\n            key = random_key(self.redlock, prefix='test_random_key')\n            assert self.redlock.acquire(key=key)\n            time.sleep(self", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "       return ConeSettings(self._get_threed_cone_settings_struct())\n\n    def get_tag(self, tag_type, tag_name):\n        \"\"\"Get a tag value from the sound.\n\n        :param tag_type: Tag type.\n       ", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "\n    def __init__(self, *args, **kwargs):\n        super(CompressedData, self).__init__(*args, **kwargs)\n        self.calg = 0\n        self.data = b''\n        self.header = Header()\n        self.header.", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "       findCellSize(imgshape, detectCellSizeDetector = detectCellShape, threshold = cellShapeThreshold, verbose = verbose, out = out, **parameter)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "           // play perfect sound\n            Music.INST.play(Assets.perfectSound, 0.5f, 1);\n        } else if (accuracy == Accuracy.GREAT) {\n            // play great sound\n            Music.INST.play(Assets", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "\n            while (transactionIterator.next()) {\n\n                printer.print(transactionIterator.get());\n                System.out.println(print);\n                print.setLength(0);\n\n            }\n\n        }\n\n    }\n\n    private synchronized void exit(int status", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "               // Post process the query to get the dimensions and metrics.\n                // This is a custom implementation to handle the case where the query is a SELECT query.\n                // In this case, we need to promote the query to a SelectQueryMeta object,\n                // and then call the postProcess method to", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "   encryption_algorithm.usage_encryption = UsageEncryption.OSY\n    encryption_algorithm.operation_mode = OperationMode.CBC\n    encryption_algorithm.encryption_algorithm_name = EncryptionAlgorithmCoded.TWOKEY3DES\n    encryption_algorithm.", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                           if (env.combExpRegList[i] != null) {\n                                // r = 0 ???\n                                combExpRecursiveCheckTrav(root, i);\n                            }\n                        }\n                    }\n                }\n            }\n        } //", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "\n    url(r'^jobs$', JobsView.as_view(), name=\"jobs\"),\n]\n\napp = DjangoApp(\n    name=\"Dashboard\",\n    version=\"1.0.0.0\",\n    template_loader=TemplateLoader(directory='", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\t\n\t\tpublic ResourceData (Meter meter, EnumMap<SRSLevel, String> tags, EnumMap<SRSLevel, Integer> colors, String notEnoughData) {\n\t\t\tthis.meter = meter;\n\t\t\tthis.tags = tags;", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "       self.set_client_id(client_id)\n        self.set_user(user)\n        self.set_pass(passw)\n        self.set_version(version)\n        self.set_release(release)\n        self.set_node_list(", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "   public ThenStepFactory thenStepFactory() {\n        return thenStepFactory\n                .andThen(preparation.getSystemUnderTest())\n                .andThen(preparation.getArgument());\n    }\n}\nimport testasyouthink.GivenWhenThenDsl.Pre", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "     try {\n        // Wait for the process to complete.\n        CommandResult result = await(process);\n        if (expectedExitCodes != null && !Arrays.asList(expectedExitCodes).equals(\n            result.exitCodes())) {\n          throw new IosDevice", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t\ttry {\n\t\t\t// Parse the XML message.\n\t\t\tString messageType = Message.getTypeFromXml(xml);\n\t\t\tswitch (messageType) {\n\t\t\tcase Message.TYPE_TEXT:\n\t\t\t\t// Handle a text message.\n", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "   try:\n        # 如果是未签名的错误，则对其进行签名并安装，\n        # 签名命令示例：jarsigner -verbose -keystore davidblus_android.", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "   @channel_checks.raid_report_enabled()\n    async def cmd_raidcity(self, ctx, city):\n        \"\"\"\n        **!rain-city channel-name** - sets the city for the raid party.\n\n        \"\"\"\n        raise NotImplementedError", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "       self.assertTrue(date_string_to_date(\"25/11/2015\") == datetime(2015, 11, 25, 0, 0, 3))\n        self.assertTrue(date_string_to_date", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "       config_actor = ConfigActor(config_file)\n        config_actor.start()\n        gevent.sleep(1)\n\n        if honeypot_first:\n            # send honeypot message first\n            honeypot_message = '{\"type\":", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                           //分享图片\n                            ShareUtil.sharePicture(mActivity, picUrl, holder.tv_content.getText().toString());\n                            break;\n                        case 1:\n                            //分享文字\n                            ShareUtil.shareText", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "\t\t\t\t\toutdata = np.column_stack((positive_data,negative_data))\n\t\t\t\t\toutdata = np.column_stack((outdata,-np.log10(1-positive_data)))\n\t\t\t\t\toutdata = np", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "               ResponseSyncAdapter.class,\n                ResponseFiles.class,\n                ResponseFilesTest.class,\n                ResponseTypedOutput.class,\n                Response.class,\n                SchemaId.class,\n                OmhDataPointHeader.class,\n                DataPointTypedOutput.class", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "       self.sig = ECDSASignature(self.s2k)\n\n        if self.s2k.usage == 0:\n            self.chksum = packet[:2]\n            del packet[:2]\n\n        else:\n            self.encbytes =", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "   elif is_document_node(item):\n        yield item\n\n\n###\n# Named references\n@method('@')\ndef evaluate_named_reference(self, context=None):\n    if self.parser.expression(rbp=90) is None:\n       ", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "\n  def __init__(self, *args, **kwargs):\n    super(HeapBalancerSink, self).__init__(*args, **kwargs)\n    self.heap = Heap()\n    self.heap_varz = HeapVarz()\n    self", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "       nc.send_message_with_protocol(OK, protocol)\n        protocol.send_string.assert_called_once_with('11:ok,')\n\n    def test_send_message_with_bad_data(self):\n        \"\"\"\n        Ensures that", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "       assertEquals(3, qe.getQueries().size());\n        // ...\n        // end::query[]\n    }\n\n    public void statement() {\n        // tag::statement[]\n        ProxyTestDataSource ds = new ProxyTestDataSource(actualDataSource);\n\n       ", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "\n        Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n    }\n\n    @Test\n    public void testPreparedCount() {\n        ProxyTestDataSource ds = new", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "           yield self.save()\n            yield self.load()\n            yield self.check()\n            yield self.load()\n            yield self.check()\n            yield self.load()\n            yield self.check()\n            yield self.load()\n            yield self.check()\n           ", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "                   function = FmllrRescoreFunction(args)\n                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                   ", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n#", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "       FragmentObservable.observe(this, new Runnable() {\n            public void run() {\n                updateChat();\n            }\n        });\n        super.onStart();\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "   pass\n\n\nclass HITANS7(HITANSBase):\n    pass\n\n\nclass HITANS8(HITANSBase):\n    pass\n\n\nclass HITANS9(HITANSBase):\n    pass\n\n\nclass H", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "       # Save reference time (Julian date)\n        if self.img_handle is not None:\n            jd = datetime2JD(self.img_handle.datetime)\n            json_dict['ref_time'] = jd\n\n        else:\n            json_dict['", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "\n            // Get the current user's homeserver config\n            HomeserverConnectionConfig homeserverConfig = Matrix.getMXSessions(getApplicationContext()).get(0).getHomeserverConnectionConfig();\n\n            // Get the list of public rooms for the current user", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "       self.bingo_card_manager = BingoCardManager()\n        self.bingo_card_writer = BingoCardWriter()\n        self.bingo_data_generator = BingoDataGenerator()\n        self.global_config_cache = GlobalConfigCache()\n        self", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "       chim_detect = ChimeraDetector(target_sequences, phylogeny)\n\n    #running synteny backend to get synteny blocks\n    for stage in run_stages:\n        stage_perms[stage].run(raw_bp_graphs", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "       plugins.registerEvents(new BlockLockerCommand(this), this);\n        plugins.registerEvents(new InteractListener(this), this);\n        plugins.registerEvents(new SignChangeListener(this), this);\n        plugins.registerEvents(new SignSelector(this), this);\n", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "                   MiPushClient.init(getApplicationContext(), new MiPushClient.OnInitListener() {\n                        @Override\n                        public void onInitSuccess(String token) {\n                            Log.e(MYTAG, \"使用MiPush推送\");\n                       ", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "       registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<String>>(\n                STRING_ARRAY));\n        registry.put((byte) (REMOVE_NOTIFICATION_LISTENER ^ R", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "   public void savePersonalVulns() {\n        if (dirty) {\n            // Save the file\n            File file = new File(person_vulns_file.getAbsolutePath());\n            if (file.exists()) {\n                // Save the file\n                try", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "\n    public void setGCTraceSet(GCTraceSet gcTraceSet) {\n        this.gcTraceSet = gcTraceSet;\n        // ...\n    }\n\n    public void setGCTraceListener(GCTraceListener listener) {\n        // ...\n   ", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "       if (packet.isAckRequested()) {\n            AckRequest ackRequest = new AckRequest(packet, client);\n            ackManager.addAckRequest(ackRequest);\n        }\n        if (packet.isJsonP()) {\n            on", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "       lMS.addVideoTracks(createVideoTrack(\"VID_0\", lsv));\n      }\n      // Uncomment to get WebRTC tracing for local video source.\n      // NOTE: this _must_ happen while |factory| is alive!\n      // Logging.", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "\n        }\n    }\n}\n\npublic class JobStorage {\n\n    public static final String COLUMN_ID = \"id\";\n    public static final String COLUMN_TAG = \"tag\";\n    public static final String COLUMN_START_MS = \"start_ms\";\n   ", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "   @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        // Check if the user has enabled Developer options, if not then skip the rest of the code\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "   # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "   def find_desktop_file(self):\n        for file in self.config.install_files.get_files():\n            if file.endswith('desktop.ini'):\n                return file\n        return None\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "\n    List<Board> results = new ArrayList<>();\n    for (int i = 0; i < 10; i++) {\n      String URL = String.format(\"http://www.zhihu.com/topic?dir=%s&page=1&sort=popular", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "       //Get current user profile picture\n        //Get current user profile picture\n        //Get current user profile picture\n        //Get current user profile picture\n        //Get current user profile picture\n        //Get current user profile picture\n        //Get current user profile picture\n        //Get current user profile picture\n", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "\tif (writeTML) {\n\t    // Generate TML-file for test-class\n\t    String tmlContainer = JUTPreferences.getTmlContainer();\n\t    if (tmlContainer != null) {\n\t\t// Create new TML-file for test-class", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "       client = SimulatorDataClient()\n        client.add_simulator_data_listener(self.receive_simulator_data_datagram)\n        client.start_listening()\n        # Send a simulator data datagram\n        datagram = fdm_data.ser", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "           showResponse = true\n        } else {\n            showResponse = false;\n        }\n        if (httpMessage.getRes().hasRequest()) {\n            isRequestEditor = true;\n        } else {\n            isRequestEditor = false;\n        }\n        if (httpMessage", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "   assert simple_table_status(description) == expected_status\n\n\ndef test_simple_status_gsi_error():\n    \"\"\"Status is busy because of GSI error\"\"\"\n    description = {\"TableStatus\": \"BUSY\", \"GlobalSecondaryIndexes\": [{\"", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "\n    def load(self, filething, *args, **kwargs):\n        pass\n\n    def _load_subchunks(self, fileobj):\n        pass\n\n    def _update_size(self, size):\n        pass\n\n    def _insert_chunk(self", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "     visitBooleanOp(new VisitProxOp(n), opToOccur.get(op));\n\n      return null;\n    }\n\n    visitProxOp(new VisitProxOp(n), query);\n\n    return null;\n  }\n\n  public", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "                   new EmbossTransformation(),\n                    new EdgeTransformation(),\n                    new MaskTransformation(0xffffff00),\n                    new MaskTransformation(0x00000000),\n                    new RGBAdjustTransformation(),\n", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "\n        if self._header[0] == 2:\n\n            # Parse the error\n            exception_class = b''\n            exception_message = b''\n\n        else:\n            raise PyOrientBadMessageException(\n                \"Invalid message header\", [])\n\n        raise", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "   api = BMUNITSEARCH(args.apikey)\n    if not api.get_data(**{'UnitName': args.unitname or \"n/a\"}):\n        print(\"No data returned.\")\n        return None\n\n    fmt = StdoutFormatter(\"", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "\t\t\t\titem = new GalleryAlbum( proxy );\n\t\t\t} else {\n\t\t\t\titem = new GalleryImage( proxy );\n\t\t\t}\n\t\t\titems.add( item );\n\t\t}\n\n\t\treturn items;\n\t}\n\n", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "   assert dump_key(engine, user) == user_key\n\n\ndef test_get_table_name(engine):\n    assert get_table_name(engine, User) == \"bloop_user\"\n\n\ndef test_index_for():\n    class Foo:\n", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "       new ProgressBar(10, BAR_EQUALS),\n        new TaskName(\"My Task\"),\n        new Status(\"My Status\"),\n        new Fraction(0.5),\n        new Percentage(50),\n        new Spinner(\"|/\", 2", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "\tpublic static <T> T tag(String tagName, T content) {\n\t\treturn new Tag(tagName, content);\n\t}\n}\n\nsrc/main/java/br/com/caelum/vraptor/html/tags/Form.java\npublic", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "       request[\"quantity\"] = quantity\n        request[\"details\"] = details\n        request[\"comments\"] = comments\n        request[\"tags\"] = tags\n        if \"quantity\" in request:\n            request[\"quantity\"] = quantity\n        if \"comments\" in request:\n            request[\"comments\"] =", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "    Matcher<? super BatchParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    /////////////////////////////////////////////////////////////////////////////\n    // PreparedBatchExecutionAssertions\n    //////////////////////////////////////////////////", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "           applyWallpaper();\n        } else if (id == R.id.menu_cancel) {\n            dismiss();\n        }\n    }\n\n    private void applyWallpaper() {\n        Wallpaper wallpaper = Preferences.get(this).getWallpaper();\n", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": " private static final int MAX_DEPTH = 1000000000;\n  private static final int MIN_MATCH = 1000000000;\n  private static final int MIN_RNG = 1000", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "\t\tif isinstance(G,type(None)):\n\t\t\tbreak\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "       self.beginning_datetime = filenameToDatetime(self.vid_file_name)\n\n        # Check if the file is an FF file\n        validFFName(self.vid_file_name, fmt=self.input_type)\n\n        # Get the middle time of", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "   p.set_image(im)\n    p.set_tile_full()\n    p.model_to_data(sigma=0.04)\n    p.update_sigma(sigma=0.04)\n    p.get_update_io_tiles", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\t\tFoodModifier.setInStone();\n\t}\n}\n\npublic class FoodModifier implements IModModifier\n{\n\tpublic static final String ID = \"squeek:spiceoflife:foodtracker\";\n\tpublic static final String GLOBAL_", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "       user = request.user\n        comments = Comment.objects.filter(post=post)\n        return render(request, self.template_name, {'post' : post, 'comments' : comments, 'form' : self.form_class()})\n\n    def post(self,", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\t\t\t\t\tCustomGridLayer customGridLayer = (CustomGridLayer) natTable.getLayer(0);\n\t\t\t\t\t\tILayerCell selectedCell = customGridLayer.getLayer(0).getCellAt(0);\n\t\t\t\t\t\tif (selected", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "   def __init__(self):\n        super(RevocationKey, self).__init__()\n        self.keyclass = 0x00\n        self.fingerprint = b''\n\n    def parse(self, packet):\n        super(RevocationKey, self", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "   if is_processing_instruction_node(item):\n        yield item\n\n\n# ...\n```\n\nPlease complete the code given above.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "   yield Puffle(penguin_id = client['id'], name = name, type = _type, subtype = sub_type,\n                     food = puffle.hunger, play = 100, rest = puffle.rest, clean = puffle.", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "   I.set_tile(tile)\n    I.set_image(im)\n    I.set_rvecs(P.rvecs())\n    I.set_field(H.get_field())\n    I.set_npts(P.npts", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "           manager = mp.Manager()\n            error_dict = manager.dict()\n            return_queue = manager.Queue()\n            stopped = Stopped()\n            procs = []\n            for i, args in enumerate(jobs):\n                function = AlignFunction(args)\n               ", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "   print()\n    print(\"-------------------------------------------------------------\")\n    print(\"Refining camera pointing with quick recalibration...\")\n    print()\n    return\n\n    # Quick recalibration with a small radius\n    n_matched, avg_dist, cost, _ = match", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "       contentValues.put(JobStorage.COLUMN_END_MS, 70_000L);\n        contentValues.put(JobStorage.COLUMN_BACKOFF_MS, 10_000L);\n        contentValues.put(JobStorage.COL", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "       FragmentObservable<NotifiableFragment<Chat>> observer = new FragmentObservable<NotifiableFragment<Chat>>();\n        observer.register(this);\n        Log.d(getClass().getSimpleName(), \"Started\");\n    }\n\n    @Override\n    public View onCreateView", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "       model = Progress\n        fields = ['indicator', 'target', 'area', 'stats_available']\n\nI'm trying to create a Django form that allows users to select a goal from a list of goals, and then select a target from a list of targets for that goal. The form will", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "           GoogleAnalyticsSender.getInstance(getContext()).send(\"load_data\");\n        }\n    }\n\n    private Adapter adapter;\n    private final OnClickListener itemClickListener = new OnClickListener() {\n        @Override\n        public void onClick(View view, int position) {\n           ", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "\n                return new Accept(context);\n            }\n        });\n\n        return deferred.getPromise();\n    }\n\n    @Override\n    public void close(final CompletionContext context) {\n        throw new IllegalStateException(\"Connection is connected\");\n    }\n\n", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "       new RegisterFragment.RegisterResult(success, email, password));\n    }\n\n    @Override\n    protected void onStop() {\n        super.onStop();\n        SpinnerObservable.getInstance().removeBackgroundTask(this);\n    }\n}\n\n\n\n\n\n\n\n", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "\n    private final SpatialOperator spatial;\n\n    private final int k;\n\n    private final int t;\n\n    private final int[][] transitionProbabilities;\n\n    private final int[][] emissionProbabilities;\n\n    private final int[][] cost;\n\n   ", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "   private int[] positions;\n    private int menuCount;\n    private int bottomMargin;\n    private SimpleTextAdapter<String> adapter;\n\n    public DropMenuAdapter(Context context, OnFilterDoneListener onFilterDoneListener) {\n        this.mContext = context;\n       ", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": " message = args.gps_sv[0].getMessage()\n  assert isinstance(message, ZeroOneMessage)\n\n\ndef test_parameters_msgtype1():\n  '''\n  All One message test\n  '''\n  parser = prepareArgsParser()\n  params = [", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "   def _render_stroke(self):\n        stroke = self.style.stroke\n        stroke_width = self.style.stroke_width\n\n        is_miter = self.style.stroke_linejoin == 'miter'\n\n        miter_limit = self.style.", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "\t\t\t\ttry {\n\t\t\t\t\ta = new AppData(reader.readLine());\n\t\t\t\t\ta.setComponent(reader.readLine());\n\t\t\t\t\ta.setName(reader.readLine());\n\t\t\t\t\tapps.add", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "\n                if (isOpsNeed2Add) {\n                    // add the action\n                    XposedHelpers.callMethod(expandNotiRowObject, \"setAction\",\n                            AppOpsAction.class, new String[] { \"show\" });\n                }\n\n", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "       self.beg_alt = angularSeparation(self.beg_vect, self.end_vect)\n        self.end_alt = angularSeparation(self.end_vect, self.beg_vect)\n\n        # Compute the great circle path\n", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\t\tString name = fhead.ID().getText();\n\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(name);\n\t\tMMethod m = new MMethod(s);\n\t\tclassInFile.addMember(m);\n\t}\n\n\t@Override\n", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "   void add(NodeAdditionVisitor visitor);\n\n    void setCombinatorIfNotSubElement(SelectorNode selector);\n\n    void setCombinatorIfNotSubElement(SelectorNode selector);\n\n    void visitInvisible(NodeNavigationVisitor visitor);\n}", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "\n    @Override\n    public synchronized void dispose() {\n        super.dispose();\n        roundNumber.set(0);\n    }\n\n    @Override\n    public synchronized void init(ProcessingEnvironment processingEnvironment) {\n        super.init(processingEnvironment);\n        round", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "       bind(GerritCheckoutProvider.class);\n        bind(GerritHttpAuthDataProvider.class);\n        bind(GerritRestModule.class);\n        bind(GerritUiModule.class);\n        bind(GerritDiffModule.class);\n", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "\n                    if (parseLong(zxid.substring(2), 16) == i) {\n                        snapFile = snapshots.get(i);\n                        break;\n                    }\n                    i -= 1;\n                }\n            }\n            if", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "       if filter_type == FilterType.Transactions:\n            entries = self.txn_matches(entries, query)\n        return entries\n\n    def parse_search_query(self, query_string):\n        query = {}\n        for key, operator in self.filter_oper", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "\n    # define the type of str() and map() method\n    _byte_aligned = True\n    # reserved attributes:\n    Reservd = ['CallName', 'ReprName', 'elementList', 'Len', 'BitLen',\n                 'hierarchy', 'inBlock',", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\t\t\t\t\t\tsearchList.setVisibility(View.GONE);\n\t\t\t\t\t\ttabLayout.setVisibility(View.GONE);\n\t\t\t\t\t\tscanButton.setVisibility(View.GONE);\n\t\t\t\t\t\treturn Observable.just", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "   pos = POS.copy()\n    pos[:,:,0] = np.random.rand(pos.shape[0], 3) * rad\n    pos[:,:,1] = np.random.rand(pos.shape[0], 3) * rad\n   ", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "       result, index = apply_fast_and(left.values, right.values,\n                                       left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.and(left.values, right), left.index)", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "                   Request request = RequestFragment.sSelectedRequests.get(i);\n                    Icon icon = IconRequestBuilder.buildIcon(request, mContext.get());\n                    if (icon != null) {\n                        String iconUrl = IconRequestBuilder.getIconUrl(request,", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "       instance.check_type(cls, *args, **kwargs)\n        return True\n\n    def __subclasscheck__(cls, subclass: type) -> bool:\n        if issubclass(subclass, bool):\n            return False\n        elif issubclass(subclass, N", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "           return SearchMenuPage(self.log, self.settings)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "\n        return rvalue\n\n\n    def getByPath(self, path):\n        \"\"\"\n        Get an object by a path.\n\n        Arguments\n        - path  :  a path string\n\n        Return  :  an object\n        \"\"\"\n        obj = None\n       ", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "   serializer_class = PlanSerializer\n    filter_class = PlanFilter\n    ordering_fields = ('id', 'code', 'name', 'target')\n\n\nclass ThemeViewSet(ModelViewSet):\n    queryset = Theme.objects.all()\n    serializer_", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "   private StarItemAdapter starItemAdapter;\n    private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitService commitService;\n    private CommitTask commitTask;\n    private StarTask starTask;\n\n    private Repository repository;\n   ", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\tString inputFile = \"input.dmid\";\n\t\tString outputFile = \"output.form.fo\";\n\t\tFile inputFileFile = new File(basePathDDI2FO + inputFile);\n\t\tFile outputFileFile = new File(basePathDDI2FO", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "                       // Send the email\n                        // ...\n                        // ...\n                    }\n                });\n\n        // \"Cancel\" button to dismiss the dialog\n        alert.setNegativeButton(R.string.cancel,\n                new DialogInterface.OnClickListener() {\n                    public", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "\n    url(r'^$', PackagesSettingsView.as_view(), name=\"settings-packages\"),\n]\n\nproducts_urls = [\n    url(r'^$', ProductsSettingsView.as_view(), name=\"settings-products\"),\n    url(r'^", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": " encoder = GPSL1L2BitEncoder(NormalRateConfig)\n  assert isinstance(encoder, EncoderBase)\n  assert isinstance(encoder, TwoBandsBitEncoder)\n  assert encoder.band1Index == NormalRateConfig.GPS.", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "   return tgAsDict['entries']\n\n\ndef run_insertSpace(\n    tg,\n    start,\n    duration,\n    collisionMode,\n):\n    \"\"\"\n    Mock write function and return the first tier's entry list\n\n    tg.insertSpace()", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "                   procs.append(KaldiProcessWorker(function, old_utts, return_queue, stopped))\n                    old_utts = set()\n                    pbar.update(1)\n                    if stopped.is_stopped():\n                        break\n                   ", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "       dataset = UAV123(root_dir, version=version)\n        self._check_dataset(dataset)\n\n    def _check_dataset(self, dataset):\n        # check dataset integrity\n        print('Checking dataset integrity...')\n        assert dataset.root_dir", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "   void accept(TagValueConsumer consumer, FixTag tag);\n}\npublic interface TagValueConsumer {\n    void acceptBoolean(FixTag tag, boolean value);\n    void acceptChar(FixTag tag, char value);\n    void acceptDouble(FixTag tag, double", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "       yield self.load(group=group, chunk_key=chunk_idx, name='spike_samples')\n\n    def spike_samples(self, group=None):\n        return self.iter_chunks(self.n_samples)\n\n    def features(self,", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {\n\t\t\tthrow new RuntimeException(\"Not supported\");\n\t\t}\n\t}\n\n\tprivate List<MatchExplanation> getTermQueryNodeExplanations(AlvisIRTerm", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\tpublic void setPipelineGenerator(PipelineGenerator pipelineGenerator) {\n\t\tthis.pipelineGenerator = pipelineGenerator;\n\t}\n\t\n\tpublic void setValorizatorParameters(ValorizatorParameters valorizatorParameters) {\n\t\tthis.valorizatorParameters", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "       registry.put((byte) (UNREGISTER_NOTIFICATION_LISTENER ^ RESPONSE_MASK), new MarshalledResponseHandler<Void>(VOID));\n        registry.put((byte) (GET_NOTIFICATION_FILTER ^ RESP", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "                       viewManager.printToConsole();\n                        viewManager.printToConsole();\n                        viewManager.printToConsole();\n                        viewManager.printToConsole();\n                        viewManager.printToConsole();\n                        viewManager.printToConsole();\n                        viewManager", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "       elif isinstance(descriptor, OperatorDescriptor):\n            lines.append('{}{}'.format(indent, descriptor))\n            lines.append('{} = {}'.format(descriptor.name, descriptor.value))\n\n        else:\n            raise ValueError('Unhand", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "\n    parser.add_argument(\n        \"--log-level\",\n        dest=\"log_level\",\n        help=\"log level (debug, info, warn, error).\",\n    )\n\n    return parser\n\n\ndef main():\n    parser = get_arg_parser()", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "       return Contact.objects.filter(phone_number=self.phone_number)\n\n    def send_message(self, message):\n        # Send the message to the contacts in the group\n        group = Group.objects.get(name=self.set_language())\n        contacts =", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "   pipeline.apply(\"Read live projects\", Read.from(new CloudResourceManagerApi())));\n\n    // Convert GCPProject to GCPResourceState objects.\n    PCollection<KV<GCPResource, GCPResourceState>> liveStates =\n        liveProjects.apply(Par", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "       self.generator = SimilarPathGenerator()\n\n    def test_get_tail_pattern(self):\n        self.generator.get_tail_pattern = lambda url, tail: \"/tail.html\"\n        self.assertEqual(self.generator.get_tail_pattern(\"http://", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "       ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "       conditions.append(AndCondition(condition_for(\"BeginsWith\", column), condition_for(\"In\", column)))\n    elif \"or\" in operations:\n        conditions.append(OrCondition(condition_for(\"BeginsWith\", column), condition_for(\"In\", column)))\n   ", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "       for row in range(9):\n            for col in range(9):\n                square = get_square_idx(row, col)\n                print(f\"{row}, {col}, {square}\")\n\n\nclass TestDutchNationalPartition(object):\n    \"\"\"\n   ", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "   private final Testprio selectedTestprio;\n\n    private final Button btnSelectAll;\n\n    private final Button btnDeselectAll;\n\n    private final Button btnNamefilter;\n\n    private final Button btnModifierfilter;\n\n    private final Button btnExistingMethods", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "\nscales/scales_socket.py\nclass ScalesSocket(object):\n  def __init__(self, host, port):\n    self.host = host\n    self.port = port\n    self.handle = None\n\n  def isOpen(self):\n    return", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "\tpublic static void main(String[] argsd[]) {\n\t\t// Testing\n\t\tAbstractModelFactory.setBlockType(Block.class);\n\t\tBlock b = new Block();\n\t\tb.setContainer(new PageBlock());\n\t\tb.setType(\"header\");", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "     var result = javadoc.doJavadoc(cmdLine);\n      return result.exitCode();\n    );\n    return files.exitCode();\n  }\n  \n  private static boolean isLinkHostOnline(Log log, String url) {\n    try {\n", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "\n        return RespostaSAT.analisar(retorno)\n\n    def consultar_sat(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.consultar_sat`.\n\n        :", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "       registerCallAction(new ToggleSpeakerAction(this), ToggleSpeakerAction.TOGGLE_SPEAKER_ACTION_ID);\n        registerCallAction(new ToggleMicrophoneAction(this), ToggleMicrophoneAction.TOGGLE_MICROPH", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "   try:\n        result = self.commands[name](gopts, argv)\n    except NoSuchProjectError as e:\n        print(e, file=sys.stderr)\n        return 1\n    except NoManifestException as e:\n        print(e,", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "   @Nsfw\n    public static String thumbUrl(String board, String mediaId) {\n        return \"http://boards.4chan.org/fit/thumbnail/31627542.jpg\";\n    }\n\n    @SfwMode\n    public static", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "       Assert.assertThat(ds, totalQueryCount(3));\n\n        // when\n        Assert.assertThat(ds, totalQueryCount(5));\n\n        // then\n        verify(ds, totalQueryCount(5));\n    }\n\n    @Test\n    public void test", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "   return new SvnJavaChangeLogCommand();\n}\n\n    protected SvnCommand getCheckInCommand()\n    {\n        return new SvnJavaCheckInCommand();\n    }\n\n    protected SvnCommand getCheckOutCommand()\n    {\n        return new SvnJavaCheck", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "       verifiers.put(\"Local Files Exist\", new LocalFilesExistVerifierImpl(userInterface));\n        verifiers.put(\"Remote Files Exist\", new RemoteFilesExistVerifierImpl(userInterface));\n        verifiers.put(\"Valid Schema Name\", new ValidSchemaName", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "           showProgress(false);\n        }\n    }\n\n    private boolean yasmeDeviceCheck() {\n        // check if there is a device in the Database\n        String deviceName = DatabaseManager.INSTANCE.getSharedPreferences().getString(AbstractYasmeActivity.DEVICE_NAME", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "    */\n    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException\n    {\n        // invoke the drupal service user.login()\n        JSONObject result = new JSONObject();\n        try {\n            // create a new JSONObject to hold", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "       self.chumopen = False\n        self.chum = None\n        self.history = None\n        self.textInput.clear()\n        self.textInput.setFocus()\n        self.textInput.returnPressed.disconnect(self.sentMessage)\n        self.", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {\n\t\t\tList<MatchExplanation> explanations = getPrefixQueryNodeExplanations(prefixQueryNode);\n\t\t\treturn expandAtom(explanations);\n\t\t", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "               throw new ProtTestInternalException(\"Invalid selection criterion: \" + criterion);\n        }\n\n        return new SelectionChunk(informationCriterion);\n    }\n\n    /* (non-Javadoc)\n     * @see es.uvigo.darwin.", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "   return Pair(e1, e2, ty1, ty2)\n\n\n@with_info(st_typ)\ndef type_of(expr):\n    \"\"\"Given an expression, return its type.\n    \n    Arguments:\n    - `expr`: an expression", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "   void inject(PlaybackService playbackService);\n    void inject(KioskSettingsFragment kioskSettingsFragment);\n    void inject(MainSettingsFragment mainSettingsFragment);\n    void inject(PlaybackSettingsFragment playbackSettingsFragment);\n    void inject(FragmentPlayback fragmentPlayback", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.chart_fragment, container, false);\n\n        //Get the data from the intent\n        Bundle bundle = getArguments();\n        if(", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "   response = Response.from_dict({'body': '{\"error\": \"Content-Type must be set\"}'})\n    with pytest.raises(ResponseValidationError):\n        handle_request(response)\n\n\ndef test_response_content_type_missing_raises_", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "\tpublic void onExit(ConsoleCommandParser parser) {\n\t\t// Nothing to do\n\t}\n}\nplugins/org.corpus-tools.atomic/src/main/java/org/corpus_tools/atomic/console/parser/ConsoleCommandParser.java\npublic class Console", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "\n    def output_mapping(\n        self,\n        mapping: OneToManyMappingType,\n        path: str,\n        skip_safe: bool = False,\n        **kwargs: Any\n    ) -> None:\n        \"\"\"\n        Helper function to save mapping information (i.", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "\n    for i in range(len(sensors)):\n        api.add_resource(PitotTubeResource, \"/aircraft/sensors/pitot_tube\",\n                         resource_class_args=(sensors[i],))\n\n    api.add_resource(Th", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "       self.assertAlmostEqual(gps.ground_speed, fdmexec.GetPropagate().GetVgroundmeterspersecond())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "```\n    # pylint: enable=line-too-long\n```\n    # pylint: enable=no-self-use\n    # pylint: enable=unused-argument\n    # pylint: enable=unused- variable\n    # pylint", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "\tprivate static final String flag_salt = \"OtN0onrc1BWPfsHpczuWiEYZbRDzvRAOYLYeSuWwd3PQ0Lj0PiGOjVBP9ZU4ab\";\n\t\n\t", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "                           logError(t);\n                        }else{\n                            logError(t);\n                        }\n                        throw new RuntimeException(t);\n                    }\n                }\n            });\n        } finally {\n            setControlsEnabled(true);\n            operationInProgress =", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "       self.run_e2e_flow_for_language(language=\"Hindi\",\n                                       person_name=u'\\u0906\\u0930\\u0935',\n                                       join_keyword=\"जन्म\")\n\n   ", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": " \n  protected ILastLocationFinder getLastLocationFinder() {\n    return PlacesConstants.SUPPORTS_GINGERBREAD ? new GingerbreadLastLocationFinder(this) : new LegacyLastLocationFinder(this);\n  }\n\n  protected void", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "   try:\n        # Connect to AVD\n        connect(adb)\n        print \"\\n[INFO] AVD Connected\"\n        # Install and run the app\n        install_and_run(adb)\n        print \"\\n[INFO] App Installed and Run\"", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "   Bit('RR_message_type', Pt=0, BitLen=2, Dict=RR_message_type_dict)\n    RR_message_type_dict = {\n        0x00000001: 'RR_message_type", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "```\n\t\t\t\t# Calculate vertex coordinates\n\t\t\t\t# (Note: assumes vertices are in the same position in both hemispheres)\n\t\t\t\tvertices = np.hstack((v_lh, v_rh))\n\t\t\t\tvertices =", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "     }\n      acceptOrVisitValue(exp.getRhsValue(), baseVariableName);\n    } else {\n      acceptOrVisitValue(exp.getRhsValue(), baseVariableName);\n      if (exp.getOperator().equals(Operator.EQ)) {\n        accept", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "       loadService.setListName(listName);\n        loadService.restart();\n      }\n    }\n  }\n\n  private boolean hasValue(Optional<String> option) {\n    return option.isPresent() && !option.get().isEmpty();\n  }\n", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "\n    def __init__(self, T=0, V='\\0'):\n        self.T = T\n        self.V = V\n\n    def __str__(self):\n        return \"T: %s V: %s\" % (self.T, self.V)\n", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "                       TimeEntryOvertimeAggregation.class));\n\n        refresh();\n    }\n\n    @Override\n    protected void refresh() {\n        super.refresh();\n\n        List<TimeEntry> timeEntries = timeEntriesDl.load();\n        List<Task", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "\n    def parse(self, packet):\n        super(PubKeyV4, self).parse(packet)\n        self.created = datetime.fromtimestamp(self.created_int())\n        self.pkalg = PubKeyAlgorithm(self.pkalg_int())\n\n       ", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "\n    def get_expansion_info(self):  # -> list[ExpansionInfo]\n        exp_info = []\n        for channel_type in self.supported_channel_types:\n            exp_info.append(ExpansionInfo(self._board_num, self._exp", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "       self.objects = {}\n        for i in range(count):\n            key = read_u16le(f)\n            value = read_u16le(f)\n            self.objects[key] = value\n\n        s.close()\n\n    def read_", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "           create_inactive_user(full_name, email, site=site)\n            messages.success(request, _('You have requested an account invitation.'))\n            return redirect(reverse('connect_accounts_invitation_requested'))\n\n        else:\n            messages.", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "       await Utilities.message(ctx.channel, f\"{pokemon} details {pokemon.to_dict}\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "           ex = Hitbtc('BCC_BTC')\n        elif name == \"%s_BT1_BTC\" % constant.EX_GATE:\n            ex = Gate('BT1_BTC')\n        elif name == \"%s_BT2_BTC\"", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "           if item is not None:\n                self.add_xsd_type(item)\n                yield item\n\n    elif self.xsd_types is None:\n        for item in context.iter_self():\n            if item is None:\n                pass  # 'self' wildcard doesn", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "   helpTestData(10);\n  }\n  \n  public void helpTestData(int size) {\n    DummySherpaServer server = new DummySherpaServer(size);\n    try {\n      Solutions solutions = helpExecuteQuery(server, 10", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);\n\t\t}\n\t\t// check for a sub-query\n\t\tString subQuery = elt.getAttribute(AlvisIRConstants.XML_SEARCH_SUB_QUERY);\n", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "                   MiPushClient.init(this, new MiPushClient.OnInitListener() {\n                        @Override\n                        public void onInitSuccess(String token) {\n                            Log.e(MYTAG, \"使用MiPush推送\");\n                            //token", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "   private final int maxConnectAttempts;\n\n    public ConnectOperation(KadServer server, KademliaNode localNode, Node bootstrapNode, int maxConnectAttempts)\n    {\n        this.server = server;\n        this.localNode = localNode;\n       ", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "\n    if status:\n        output.append(status)\n    return ''.join(output)\n\ndef main():\n    vcli = VCli()\n    vcli.get_completions('hello', 0)\n    vcli.get_completions('hello", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "\tprivate DLog dLog;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.task_list_by_jql_activity);\n\t\tdLog = DLog.getInstance", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "       self.assertIsNotNone(handle)\n\n    def test_create_event_invalid_handle(self):\n        handle = CreateEvent(bManualReset=False, bInitialState=False)\n        self.assertRaises(WindowsAPIError, ResetEvent, handle", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "       this.deployments = new SpringDeployments(restTemplate, root, tasks);\n        this.vms = new SpringVms(restTemplate, root, tasks);\n        this.jobs = new SpringJobs(restTemplate, root, tasks);\n    }\n\n    @", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "                   Collection<ParsedPath> result = new ArrayList<>();\n                    for (Element element : roundEnv.getElements()) {\n                        if (element.getType().equals(parserHolder.getSupportedAnnotationType())) {\n                            ParsedPath parsedPath = parserHolder.parse", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "\n    public Crawler(CrawlerConfig crawlerConfig) {\n        this.crawlerConfig = crawlerConfig;\n        this.pageFetcher = new PageFetcher(crawlerConfig);\n        this.pageDispatcher = new PageDispatcher();\n        this.pageHandler", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "           actionPopupGroup.add(new AddKeyAction(mongoDocumentOperations));\n            actionPopupGroup.add(new AddValueAction(mongoDocumentOperations));\n            actionPopupGroup.add(new DeleteKeyAction(mongoDocumentOperations));\n        }\n\n", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "   private GuiButton saveButton;\n    private GuiButton resetButton;\n    private GuiCheckbox enableButton;\n    private GuiLabel channelLabel;\n    private GuiText channelName;\n\n    public GuiSettingsChannel(ServerSettings settings) {\n        super(new", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "               return new BtnQuickNotice();\n            case ConstantStr.FUNC_SCREEN_OFF_CODE:\n                return new BtnScreenOff();\n            case ConstantStr.FUNC_CLEAR_NOTIFICATIONS_CODE:\n                return new Btn", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "\n        Composite composite = toolkit.createComposite(form.getForm());\n        composite.setLayout(new GridLayout(0, 1));\n        composite.setBackground(parent.getBackground());\n        composite.setBorder(BorderFactory.createTinyBorder());\n\n", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "       type = Type(name=\"my_type\", format=TypeFormat())\n        self.assertEqual(\"my_type\", type.get_sample())\n\n    def test_type_get_comparable_values(self):\n        type = Type(name=\"my_type\", format", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "       new EventCommandHandler<>(SetStartTimeCommand.class, SetStartTimeEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetStatusMessageCommand.class, SetStatusMessageEvent::fromCommand, this::queueEvent));\n", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "       self._cluster_type = _cluster_type\n        return self\n\n    def set_cluster_location(self, _cluster_location):\n        self._cluster_location = _cluster_location\n        return self\n\n    def set_datasegment_name(self, _datas", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "   account = account_for_flickr_id(request.GET['id'], person=request.user.person)\n    if account is None:\n        # Hmm, that's weird. Maybe the user is already signed in.\n        account = Account.objects.get(service='", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t\t\t\t\tthrow new FCPPutFailedException(e);\n\t\t\t\t} catch(FCPException e) {\n\t\t\t\t\tLogger.error(this, \"Caugth FCPException while inserting message\", e);\n\t\t\t\t\treturn false;\n", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "       # Get the current opcode\n        op = bytecode[k][0]\n        # Check if it's a conditional jump\n        if op in JUMP_OPCODES:\n          # Get the target index\n          target_index = bytecode[k][1]\n         ", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "   DailyExpense dailyExpense = new DailyExpense(date, amount);\n    //Add to expense manager\n    ExpenseManagerDAO expenseManagerDAO = new ExpenseManagerDAO(getActivity());\n    expenseManagerDAO.addExpense(dailyExpense", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "   from dashboard.models import CIPipeline\n\nError message:\nTraceback (most recent call last):\nFile \"/app/python/env/bin/django_python3.8.3.3/lib/python3.8/site-packages/django/core/exceptions.", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "\t\t\t\t\t}, e -> {\n\t\t\t\t\t\tAnimations.fadeFlip(listsPager, loadingProgress);\n\t\t\t\t\t\tSnackbar.show(this, R.string.error_connectionfailure);\n\t\t\t\t\t}, () ->", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "\n    def parse(self, ping_message: Sequence[str]) -> PingStats:\n        return self.__parser.parse(ping_message)\n\n...\n\n    def preprocess_parse_stats(self, lines: Sequence[str]) -> Tuple[str, str", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "           // Display a message to the user that the chat has not been found in the DB\n            Toast.makeText(mContext, \"Chat not found in DB\", Toast.LENGTH_SHORT).show();\n            // Restore the latest message on display from the saved state\n            restoreLatestMessage", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "\t\tt.vertexUV(x * tileSize, y * tileSize, 0.0f, u0, v0);\n\t\tt.vertexUV(x * tileSize + tileSize, y * tileSize, 0.0f, u1, v", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "   account = account_for_facebook_user(fb_user, person=person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            # AGH\n            random_name = ''.join(choice(string", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "\n        // ... perform application logic with database ...\n\n        // query count\n        assertThat(ds, totalQueryCount(5));\n        assertThat(ds, selectCount(3));\n        assertThat(ds, insertCount(3));\n        assertThat(ds, otherCount(3", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "     // Submit the form\n      // ...\n    }\n  }\n\n  private void resetInput() {\n    fileInput.setValue(null);\n    fileInput.setType(null);\n    fileInput.setName(null);\n    fileInput.setSize(0", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "   merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)\n    for (seq1, seq1_or, seq2, seq2_or) in merged_assembly_points:\n        if seq1 < seq", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "\n    api.add_resource(\n        GyroscopeResource,\n        \"/aircraft/sensors/gyroscope\",\n        resource_class_args=(sensors.gyroscope,)\n    )\n\n    api.add_resource(\n        PressureSensorResource,", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "       fields={ key.capitalize():value for key, value in config.items()}, msg_color=discord.Color.blue(),\n        inline=True)\n\n        return await ctx.send(embed=embed)\n\n    @staticmethod\n    async def send_channel_", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "\t\t\t\t\tif (!level.isInstalled()) {\n\t\t\t\t\t\tgd.levelsManager.installAsync(level, new Runnable() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void run() {\n\t\t", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "   private final WeeklyCaptionProvider weeklyCaptionProvider = new WeeklyCaptionProvider();\n\n    private final KeyMapper<ITEM> keyMapper = new KeyMapper<ITEM>(ITEM.class);\n\n    private final DesignAttributeHandler designAttributeHandler = new DesignAttributeHandler();", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "       vms = new SpringVms(restTemplate, root, tasks);\n    }\n\n    @Override\n    public Info info() {\n        return this.info;\n    }\n\n    @Override\n    public Releases releases() {\n        return this.releases;\n   ", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "   (signerId, keyId) -> Lists.newArrayList(new RsaSHA256Verifier(rsaPrivateKey));\n\n    VerifierProviders providers = new VerifierProviders();\n    providers.setVerifierProvider(SignatureAlgorithm.HMA", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "   protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnViewAttachedToWindowListener easyOnViewAttachedToWindowListener;\n    protected EasyOnViewDetachedFromWindowListener easyOnViewDetachedFromWindowListener;\n\n    public MultiItem", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "\t\t\t\t\tassertNotNull(retrievedContent);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t// Ignore\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "\n                }\n            });\n        }\n    }\n\n    private void sendBroadCast(int action) {\n        LocalBroadcastManager.getInstance(itsContext)\n                .sendBroadcast(new Intent(action));\n    }\n\n    private void toastOnU", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "QueuedProjectFragmentListener, FragmentManager.OnDestinationChangedListener, FragmentTransaction.OnCompletionListener {\n\n    @ViewById(R.id.drawer_layout)\n    DrawerLayout drawerLayout;\n\n    @ViewById(R.id.nav_view)\n    View nav", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "                       if (home.getIcon() != null) {\n                            ImageLoaderConfiguration config = ImageConfig.getImageLoaderConfiguration(mContext);\n                            ImageLoader.getInstance(mContext, config).load(home.getIcon());\n                        } else if (home.getBackground()", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "       encoding = Default.ENCODING\n\n    if typepy.is_empty_sequence(proxy):\n        proxy = None\n\n    converter = UrlConverter(\n        logger=logger,\n        con=None,\n        is_type_inference=False,\n        is", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "\n    def _getPlaylistItemName(self, item):\n        \"\"\" Match an item to a playlist item and return the item name. \"\"\"\n        for _item in self.items():\n            if _item.ratingKey == item.ratingKey:\n                return _item.name\n", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "       self.assertRaises(TypeError, _environment_to_string, 42)\n\n    def test_empty_environment(self):\n        self.assertEqual(\n            _environment_to_string({}}),\n            u\"\\0\\0\")\n\n   ", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "   try:\n      result = cmd.Run(gopts, argv)\n    except Exception as e:\n      print(e, file=sys.stderr)\n      return 1\n    return result\n  def Run(self, gopts, argv):\n    return self._", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "               runnerListenerList.forEach(runnerListener -> runnerListener.onTaskFinished(taskData));\n            } catch (Throwable e) {\n                taskData.setState(TaskData.STATE_FAILED);\n                log.error(e.getMessage(), e);\n                runnerListener", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "       await r.run(None)\n        self.assertEqual(r.reject_set, set())\n\n    @async_test()\n    async def test_reject_status_code(self):\n        r = RejectStatusCode()\n        r.reject_set", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "       //用户的邮箱\n        stuEmail = utils.getEmail();\n        //用户的邮箱\n        stuPhone = utils.getPhone();\n        //用户的邮箱\n        stuAddress", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "\n    def parse(self, line):\n        ...\n\n    def __parse_filter_ipv4(self, line):\n        ...\n\n    def __parse_filter_ipv6(self, line):\n        ...\n\n    def __parse_qdisc_net", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "           state[\"inventory\"] = list(inv)\n        except Exception:\n            pass\n\n    def add_location_properties(self, state: Dict[str, Any], obj: MudObject) -> None:\n        try:\n            loc = obj.location     # type:", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": "  */\r\n  public Query visit(BasicSearch n, Query query) {\r\n    List<Occur> occurs = null;\r\n\n    if (n.f0.tokenImage.length() == 2) {\r\n      occurs = rfOpToOccur.get(n.f0", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t\tthis.cleaningFolder = false;\n\t\tthis.surveyName = null;\n\t}\n\n\tpublic void generatePipeline(String surveyName) {\n\t\tthis.surveyName = surveyName;", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "\n        try {\n\n            //load zklogtool configuration\n            PropertiesReader reader = new PropertiesReader(propertiesFile);\n\n            //get data dir and log dir\n            String dataDir = reader.getProperty(Arguments.DATA_DIR);\n            String logDir = reader.getProperty", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "\n    def is_peer_firewalled(self, peer):\n        \"Here to let a packet know if its peer is firewalled\"\n       # Wait til there's something in the queue\n        self.q_work.acquire()\n        if len(self.queue", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "       cursorById.close();\n    }\n}\n\npublic class MovieSelection {\n    public static final String SELECTION_ID = \"id\";\n    public static final String SELECTION_ID_NOT = \"id_not\";\n    public static final String SELECTION_ID_GTE =", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "       DevisDialog(self, self.inscrit, self.current_cotisation[0]).ShowModal()\n\n    def EvtGenerationContrat(self, _):\n        ContractDialog(self, self.inscrit, self.current_cotisation[0]).ShowModal()", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "       parent = ElementTree.Element('element')\n        child = ElementTree.Element('child')\n        parent.append(child)\n        self.assertEqual(node_kind(parent), 'element')\n        self.assertEqual(node_kind(child), 'element')\n        self", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\t\tsetContentView(R.layout.main_activity);\n\t\t// set up the map view\n\t\tmapView = (MapView) findViewById(R.id.map_view);\n\t\tmapView.setMapType(MapView.MAP_TYPE_HYBRID);", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "                   mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                   ", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "           switch_configuration.new(\"Vlan\", 1))\n\n    def get_netconf_protocol(self):\n        return \"OpenVMDatasets\"\n\n    def get_default_ports(self):\n        return [\n            Port(\"FastEthernet0/", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": " assert isinstance(config, LowRateConfig)\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('normal_rate')\nNext line of code:\n  assert isinstance(config, NormalRateConfig)", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "\n        if isinstance(retorno, RespostaConsultarUltimaSessaoFiscal):\n            # ...\n        elif isinstance(retorno, RespostaEnviarDadosVenda):\n            # ...\n        elif isinstance(retorno, RespostaCancelar", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "   # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "   # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "\n    def get_word_features(self) -> Dict[str, float]:\n        \"\"\"\n        Compute the features for each word in the corpus\n\n        Returns\n        -------\n        dict[str, float]\n            Dictionary of words and their features\n        \"\"\"\n       ", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "\n    private CameraSource mCameraSource;\n    private OcrGraphic mOcrGraphic;\n    private GraphicOverlay mGraphicOverlay;\n    private OcrDetectorProcessor mOcrDetectorProcessor;\n    private ExpenseManagerDAO mExpenseManagerDao", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "\tpublic final NetUtil net = new NetUtil();\n\tpublic final TimeUtil time = new TimeUtil();\n\n\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\n\tpublic static String getUrlBeforePath(String url) {\n\t\treturn Util.get", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "       List<ServerConfiguration> serverConfigurations = new ArrayList<>();\n        try {\n            URL[] urls = new URL[] {new URL(\"http://localhost:29910/mongo\")};\n            for (URL url : urls) {\n                URL url2 = new URL(", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\t\tFluent header = container.h1(\"TodoMVC\");\n\t\theader.inputNext();\n\n\t\t// Footer with Footer button:\n\t\tFluent footer = container.footer();\n\t\tfooter.button(Input.classs(\"footer-btn", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "               Intent intent = new Intent(InfoDialog.this, LoadingDialog.class);\n                intent.putExtra(LoadingDialog.EXTRA_CAMERA_IMAGE, output);\n                startActivity(intent);\n            }\n        });\n\n        confirm.setOnClickListener(new View.", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n\n        View view = inflater.inflate(R.layout.song_list_fragment, container);\n\n        mRecyclerView = (RecyclerView) view.findViewById(R.", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "   with pytest.raises(InvalidSearch):\n    bloop.search.validate_key_condition(key, model, index)\n\n@pytest.mark.parametrize(\"model, index\", all_permutations)\ndef test_single_range_key_success", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "           GCActivitySet gcActivitySet,GCActivity gcActivity) {\n        // Nothing to do\n    }\n\n    public void gcActivityNameAdded(\n            GCTrace gcTrace,int id,String gcActivityName) {\n        // Nothing to do\n   ", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "\n    def __call__(self, environ, **kwargs):\n        # Call the API\n        return self.api.call(environ, **kwargs)\n\n    def __repr__(self):\n        return \"Floranet REST API v\" + str(self.version) + \"", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "       self.tree_view = tree_view\n        self.tree_view.set_model(self._df_manager)\n        self.tree_view.connect_signals(self)\n        self.tree_view.show()\n        self.main_control.show()\n", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "\n```\n    parser.parse_args()\n    main = Main()\n    main.run()\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "   private final static Value<Boolean> TOGGLE_CHAT_BUTTON_VALUE = new Value<Boolean>(false);\n\n    private static final int CHAT_BUTTON_HEIGHT = 100;\n    private static final int CHAT_BUTT", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "        */\n        void onDateClick(Date date);\n    }\n\n    public VCalendar() {\n        // Set the default values for the widget\n        setStyleName(PRIMARY_STYLE);\n        setStyleName(\"v-calendar\");\n\n        // Set the default values", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "       self._db_type = db_type\n        return self\n\n    def set_client_id(self, client_id):\n        self._client_id = client_id\n        return self\n\n    def set_user(self, user):\n        self._user = user", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "           Namespace namespace = namespacesHub.get(packet.getNsp());\n            namespace.onUpgrade(client);\n        }\n\n        case MESSAGE: {\n            client.getBaseClient().send(new Packet(PacketType.NOOP), Transport.PO", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "   private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitTask commitTask;\n    private CommitItemAdapter commitItemAdapter;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\n\n    private Repo", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "\t\tPostprocessor[] postprocessors = setPostProcessors(pipeline.getPostProcessing());\n\t\t\n\t\t// In2Out Generator\n\t\tpipeline.setIn2OutGenerator(identityGenerator);\n\t\t\n\t\t// DDI2XFORMSGenerator\n", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "   PCollection<KV<List<String>, String>> liveProjects =\n        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));\n    // Convert project list to GCPResourceState objects.\n    PCollection<KV<GCPResource, GCP", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "   return MyModel()\n\n\ndef test_model_created(model):\n    # ...\n    assert model.Meta.model_created.called()\n\n\ndef test_model_loaded(model):\n    # ...\n    assert model.id == \"1\"\n    assert model", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "   public ChatManager(ChatManagerCallback delegate)\n    {\n        _delegate = delegate;\n        _lockObject.lock();\n        // Guarded by _lockObject.\n        _rxChatListenerSockets.clear();\n        // Guarded by _lockObject.\n", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "   private Handler handler = new Handler();\n    private Runnable runnable = new Runnable() {\n        @Override\n        public void run() {\n            // Your runnable code here\n            displayVideo(null);\n        }\n    };\n    private ProgressDialog progressDialog", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "   RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInUpRight(RotateInUpRight.class),\n    RotateOut(RotateOut.class),\n    RotateOut", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "           return super(UserBase, self).get(request, *args, **kwargs)\n        else:\n            return render(request, self.template_name, {'form': form})\n\n    def get_form_class(self):\n        return UserFormCreation()\n\n   ", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "\n    public static Fog convert(Fog fog, GameObject go) {\n        // ...\n    }\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////\n    // Lights\n    /////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    public static Light convert(Light light, GameObject go", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\t\tif(this.on == MetaOn.GENE) // Handle gene expression matrix\n\t\t{\n\t\t\t// ...\n\t\t}\n\t\telse if(this.on == MetaOn.CELL) // Handle cell expression matrix\n\t\t{\n\t\t\t// ...", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "   ActorMoviesComponent plus(ActorMoviesModule actorMoviesModule);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\t\t\t\t// Invoke the bench\n\t\t\t\t\tbenchmark.runBenchmark();\n\t\t\t\t\t// Invoke the listenToResultSet\n\t\t\t\t\tlistenToException(new SocketViewException(\"SocketViewException\"));\n\t\t\t\t\t//", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "   cis = CIPlatformJob.objects.filter(**kwargs).all()\n\ndef get_ci_platform_jobs(**kwargs):\n    \"\"\"\n    Get CI Platform Jobs\n    :param kwargs:\n    :return: list\n    \"\"\"\n    cis = CI", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\tlogManager.logInfo(this,\n\t\t\t\t\t\"Building a wrapper from the given service discovery info.\");\n\t\t\treturn activateLoginIfRequested(createMostSuitableWrapper(\n\t\t\t\t\tserviceDiscoveryInfo, endpointType,", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "       planillas_modelo = PlanillaModelo.objects.all()\n        initial = {}\n        if len(planillas_modelo) == 1:\n            planilla_modelo = planillas_modelo[0]\n            initial = {\"planilla_modelo\": plan", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "     self.tree = root\n    else:\n      self.tree = self.create_tree(root)\n    self.live = set()\n    self.ast = None\n    self.root = None\n    self.cstr = None\n    self.live = None\n    self", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": "\n  public Tropo() {\n\n    super();\n    setName(\"tropo\");\n  }\n\n  public Tropo(Key... keys) {\n\n    super(keys);\n    setName(\"tropo\");\n  }\n\n  public void setParser(T", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {\n\t\tif (getRound() != null) {\n\t\t\tthrow new PlayerAlreadyInRoundException();\n\t\t}\n\t\tif (!getRound().getConfigManager().isAllow", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "   assert_almost_equal(fold([0], 1024), [0])\n    assert_almost_equal(fold([0], 1234567890), [0])\n    assert_almost_equal(fold([0], MAX_", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "   return result\n\n\n###\n# XPath 2.0 and XQuery 1.0 functions\n@function(name='evaluate-xpath-function',\n        nargs=1,\n        sequence_types=('xs:expression',))\ndef evaluate_xpath_function(", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "\t\t\tif model_item.is_header():\n\t\t\t\tdefault_flags = default_flags | Qt.ItemIsEditable\n\t\t\telif model_item.is_sketch():\n\t\t\t\tdefault_flags = default_flags | Qt.ItemIsEditable", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "       root_dto = RootDto()\n        hydrator = Hydrator(version1, versions, [])\n        hydrator.hydrate_object(root_dto, root, [])\n        self.assertEqual(1, len(root_dto", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "\n         //ringBuffers()\n         //buildRunnable(executorService, isAlive);\n    }\n\n    ////\n    ////\n    ////\n    ////\n    ////\n    ////\n    ////\n    ////\n    ////\n", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": " to_map_and_back(AFO, AmplitudePoly(AmplitudeBase.UNITS_AMPLITUDE, (0, 1)))\n\nNext line of code:\n  to_map_and_back(DFO, DopplerPoly", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "               hasJsonPath(\"_scroll_info\").withValue(is(notNull)));\n    }\n\n    @Test\n    public void storeWithId() throws Exception {\n        Collection<SourceRecord> records = SourceRecordHelper.loadGetRecordsResponse(Resources.asByteSource(Resources.", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "       }.get(self.pkalg, None)\n\n        if _c is None:\n            raise ValueError(\"Invalid pubkey algorithm\")\n\n        self.signature = _c[1]\n\n    @sdproperty\n    def signature(self):\n        return self._sign", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\n\t\tGeoJSONWriter geoJSONWriter = new GeoJSONWriter();\n\t\tGeoJSONWriter.setGeoJSONWriter(geoJSONWriter);\n\t}\n\n\tpublic", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "                       res = getGroup(context);\n                    } catch (SQLException e) {\n                        context.put(ContextKeys.EXIT_STATUS, SQL_ERROR);\n                        addContextMessage(context, true, e.getMessage());\n                        context.<List<Throwable>>", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "   url(r'^users/list/$', users_list, name='users_list'),\n    url(r'^users/new/$', new_user, name='new_user'),\n    url(r'^users/edit/(?P<user_id>[-\\w]+", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "                           stack.setCurrentPlaySession(dialogFragment.getPlaySession());\n                            stack.setPlayStatsWithEnabledSessions(stack.getPlayStats());\n                            updateAdapter();\n                            updateEmptyViews();\n                        }\n                    }\n                });\n                dialogFragment.", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "   DropDownMenu dropDownMenu;\n    private Handler handler = new Handler();\n    private Runnable runnable = new Runnable() {\n        @Override\n        public void run() {\n            // Perform some work\n            // ...\n        }\n    };\n\n    @", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "       # if(obj.getBlock().isInfix()):\n        #    pass\n\n        # else:\n        #    pass\n\n        # if(obj.getBlock().isDeclaration()):\n        #    pass\n\n        # else:\n        #    pass\n\n", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "\n    def test_find_preimage_8bit(self):\n        assert DP_WIDTH == 8\n\n        d1 = Constant(0, 8)\n        d2 = Constant(1, 8)\n        d3 = Constant(0, 8)\n\n", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "\t\tpublic static Node getTransform(Node node, NodeTransformer transformer) {\n\t\t\tswitch(node.getClass()) {\n\t\t\tcase FlattenTransformer.class:\n\t\t\t\treturn transformer.transformFlatten(node);\n\t\t\tcase Constant", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\t// Add the listeners\n\t\tgetServer().getPluginManager().addEventHandler(new PluginEventHandler());\n\t\tgetServer().getPluginManager().addEventHandler(new PluginPlayerEventHandler());\n\t\tgetServer().getPluginManager().addEventHandler(new Pl", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "       SASLMechanism.Challenge challenge = SASLMechanism.parseChallenge(challengeData);\n        connection.setSASLChallenge(challenge);\n    }\n\n    private void parseFailure(Element doc) throws IOException {\n        String condition = null", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "\n    private SongListAdapter mAdapter;\n\n\n    public static Fragment newInstance() {\n        return new SongListFragment();\n    }\n\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup parent, Bundle state) {\n        View view = inflater.", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "           // Create a new instance of the effect\n            effect = new FlowAbsEffect();\n            // Set the effect parameters\n            effect.setParameters(new int[] {FlowAbsEffect.FlowAbs_Flow, FlowAbsEffect.FlowAbs_Noise, FlowAbsEffect", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "       Str('ESM_Type', ReprName='Message Type', Pt=4, Len=4, Repr='hum'),\n        Str('ESM_Cause', ReprName='ESM Cause', Pt=8, Len=4, Repr='hum'),\n       ", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "           // Refresh the list\n            mSongListAdapter.notifyDataSetChanged();\n        };\n    };\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup parent, Bundle args) {\n\n        View view = inflater.inflate(R.layout.art", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "       if self.stopped.stop_check():\n            return\n        self.log_debug(f\"Parsing corpus directory with {self.num_jobs} jobs in {time.process_time() - begin_time} seconds\")\n        for root, _, files in os", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\t\tUserManagement.addUser(getCurrentUserName(), user);\n\t\t\t^\n\tCaught: java.lang.NullPointerException\n\n\tat org.remitt.server.DbEligibilityJob.addEligibilityJob(DbEligibilityJob.java:10", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "   Observable<ApiPlan> apiPlan(@Query(Constants.KEY) String apiKey);\n\n    private static final String TAG_RELATED = \"tag_related\";\n    private static final String TOKEN_RELATED = \"token_related\";\n    private static final", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "   public void visit(Throwable throwable) {\n      throw new AssertionError(\"Unexpected Throwable\");\n    }\n\n    @OverrideNext line of code:\n    public void visit(LogMessageVisitor visitor) {\n      // nothing to do\n    }\n\n   ", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "   result = almost_eq(gammatone_erb_constants(4), [freq, bandwidth])\n    assert almost_eq(gammatone_erb_constants(4), [freq, bandwidth])\n    assert almost_eq(gammatone_", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "\ndef read_sequence_item(fp, is_implicit_VR, is_little_endian, encoding, offset):\n    \"\"\"Read and return a single Dataset from a Sequence item.\"\"\"\n    # ...\n    # ...\n    # ...\n    # ...\n", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "\n    for (ICommentProcessor commentProcessor : commentProcessors) {\n      try {\n        // create a new instance of the comment processor\n        ICommentProcessor newCommentProcessor = createCommentProcessor(commentProcessor);\n\n        // set the current comment wrapper to the new comment processor\n        newComment", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "   protected abstract void loadDataFromNetwork();\n\n    protected abstract void parseResult(String responseBody);\n\n    protected abstract OAuthRequest getRequest();\n\n    protected abstract Response executeRequest(OAuthRequest request);\n\n    protected abstract GsonObjectPersisterFactory getGsonObjectPersister", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "\n    @flags.register(NotationDataFlags)\n    def flags_int(self, val):\n        self._flags = NotationDataFlags(val)\n\n    @sdproperty\n    def reason(self):\n        return self._reason\n\n    @reason.register(int", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "       self.addMessage(serverMsg, True)\n        self.testQuirk(serverMsg)\n        self.testQuirk(serverMsg)\n        self.testQuirk(serverMsg)\n        self.testQuirk(serverMsg)\n        self.testQuirk(server", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "   def check_string(arg, type_):\n        arg = check(arg, type_)\n        with type_.env.errors.location(arg.location):\n            unify(arg.__type__, type_)\n        return arg\n\n    def check_string_like(arg,", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "   if isinstance(value, GregorianMonthDay):\n        return value\n\n    try:\n        if isinstance(value, UntypedAtomic):\n            return GregorianMonthDay.fromstring(value.value)\n        elif isinstance(value, (Date1", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "   if features is None:\n        features = {}\n        for prop in datasets.feature_quantities:\n            features[prop] = [\n                v.T*symengine.log(v.T), v.T**2, v.T**-1, v.T**3", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "\n    private void pausePlayerAndSHowVpaid(PlayerUIController controller,\n            PlayerAdLogicController componentController, FsmPlayer fsmPlayer, AdMediaModel adMedia) {\n\n        //TODO: pause player and show vpaid\n        ExoPlayerLogger.i", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "           PressureSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 7 || type == 0) {\r\n            RotationVectorSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 8 || type ==", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "   Call<SuggestResponse> getSuggest(@QueryMap Map<String, String> serviceIds,\n                                    @Query(\"q\") String query,\n                                    @Query(\"type\") String type,\n                                    @Query(\"access_token\") String accessToken);\n", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "       s = Search(\n            model=model,\n            index=index,\n            key=key,\n            filter=filter,\n            projection=projection,\n            consistent=consistent,\n            forward=forward)\n        return iter(s.prepare())\n\n    def delete(", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "       self.log.info(\"confusion matrix:\")\n        self.log.info(ConfusionMatrixFormatter(self.log).format(confusion_matrix, classes))\n        self.log.info(\"\")\n        self.log.info(\"accuracy on all classes: %2", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "\tprivate BannedIpServices bannedIpServices;\n\tprivate ChallengeServices challengeServices;\n\tprivate SubmissionServices submissionServices;\n\tprivate CountryServices countryServices;\n\tprivate Categories services;\n\tprivate SolveTable solveTable;\n\t\n\t\n\t\n\t\n\t", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "       class VertexVector(Vertex):\n        pass\n\nI'm trying to understand what the code is doing, but it seems to be quite complex and I'm having difficulty grasping the concepts. Can someone please explain what the code is doing and what it is for?\n\nI'm using", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "\n    def decoder(self) -> RNNArchitecture:\n        \"\"\"\n        Creates the decoder RNN.\n\n        The decoder RNN receives the expected output at the previous time step as input, and is initialized with zero\n        initial states.\n\n        Returns\n        -", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "\nfor engine in TRANSPLATFORM_ENGINES:\n    all_platform_slugs.append(engine.lower() + \"-platform\")\n    all_platform_slugs.append(engine.upper() + \"-PLATFORM\")\n    all_platform_slugs", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "   public boolean add(MediaTypeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(MediaQueryNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(MultipleLineCommentNode node)", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "\tpublic static H1 h1(Attribute... attributes) {\n\treturn new H1(attributes);\n\t}\n\n\tpublic static H2 h2(Attribute... attributes) {\n\treturn new H2(attributes);\n\t}\n\n\tpublic static H3 h3(Attribute...", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "       final String[] columns = new String[]{\"Method\", \"Time\", \"Min\", \"Max\", \"Avg\", \"StdDev\", \"SqrSum\", \"Conf05\", \"Conf95\"};\n        final AbstractMeter[][] meterResults = new AbstractMeter[ben", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "     for edge in visitor.edges:\n        if edge.kind == ControlFlow.E_BACKWARD:\n          parent_loop = edge.source\n          break\n      return parent_loop\n\n    def get_loop_body(node):\n      body = []\n      for", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.k, this.m);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new RuntimeException(\"Invalid tree type\");\n\t\t", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "```\n    def validate(self, value: Union[str, 'AnyURI', UntypedAtomic]) -> None:\n        if isinstance(value, (AnyURI, UntypedAtomic)):\n            return\n        elif isinstance(value, bytes):\n            value =", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "                   }\n                });\n            };\n        };\n\n        @Override\n        public void onEvent(Event event, RoomState roomState) {\n            // Ignore events that are not related to the room\n            if (!Event.EVENT_TYPE_ROOM.equals(event.", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\t\n\tpublic void generate(InFormat inFormat, OutFormat outFormat, Pipeline pipeline) {\n\t\t// Step 1: In2Out Generator\n\t\tList<Generator> generators = new ArrayList<>();\n\t\tgenerators.add(identityGenerator);\n\t\tgenerators", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "       DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()\n\n    def OnGenerationReleveNourriture(self, _):\n        site = self.GetSelectedSite()\n        annee = self.releves", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "\n    def compute_angular_momentum_hessian_jacobian(self, p):\n        \"\"\"\n        Computes the Hessian jacobian matrix of the angular momentum at the\n        application point `p`.\n\n        Parameters\n        ----------\n", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "       // display queued project\n        if (queuedProjectResult != null) {\n            // display queued project\n            final int queuedProjectId = queuedProjectResult.queuedProject.getId();\n            final String pattern = queuedProjectResult.queuedProject.getPattern();", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "\n    public void onDisable() {\n        // Save the economy service\n        economyService.save();\n        // Save the virtual economy service\n        virtualEconService.save();\n        // Save the player economy service\n        playerEconService.save();\n        // Save the currency registry", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "\n    def _fit(self, trace, restart_trace=None, **kwargs):\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "     return Const.fromValue(arg)\n    elif op == LOAD_ATTR:\n      return Ref.fromName(arg)\n    else:\n      raise ValueError(\"Invalid load opcode\")\n  else:\n    raise ValueError(\"Invalid opcode\")\n\n  return Und", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "\tpublic void begin() {\n\t\tsuper.begin();\n\t\t// ...\n\t}\n\n\tpublic void update(float delta) {\n\t\tsuper.update(delta);\n\t\t// ...\n\t}\n\n\tpublic void render(SpriteBatch batch) {\n", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "                   ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMP:\n                    TempSensorView tv =", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\tList<AuthorWithBooks> list = new ArrayList<>();\n\tfor (Long authorId : set) {\n\t\tReference reference = new Reference();\n\t\treference.setAuthorId(authorId);\n\t\treference.setBookId(bookRepository.findByAuthorId(authorId", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "\tpublic void executeServer(E exp, ForestReader in, ForestWriter out) {\n\t\t// ...\n\t}\n}\n\npublic interface Service<E, I> {\n\tpublic void executeServer(E exp, ForestReader in, ForestWriter out);\n\tpublic ForestReader execute(", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "   # 下面是自动化测试代码\n    auto_app_test(adb, app_info)\n    # 下面是下载 logs 代码\n    download_logs_thread(adb, download_dir)\n    # 下面是分", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "   Genotype parseGenotype(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return ancestry.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into ancestry\n     */\n", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "               Record.typed(bar_type, [\n                    Symbol.typed(IntType, 'bar')\n                ]),\n            ]),\n        ]),\n        {'inc': inc_type, 'bar': bar_type},\n    )\n\n\ndef test_optional():", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "\n        PreparedExecution pe = ds.getFirstPrepared();\n\n        assertThat(pe, success());\n        assertThat(pe, failure());\n\n        assertThat(pe, isPrepared());\n        assertThat(pe, isBatchPrepared());\n        assert", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "\t\t\t\t\tself.on_insert_sketch()\n\t\t\t\t\tself.on_insert_part_in_drawing()\n\t\t\t\t\tself.on_insert_dim_ann_in_drawing()\n\t\t\t\t\tself.on_", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "                           return new NotFoundException(cause);\n                        default:\n                            return new APIIncorrectException(cause);\n                    }\n                }\n                return null;\n            }\n        };\n        // Set up the RestAdapter\n        mAdapter = new RestAdapter(", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\n\t\tregisterRenderer(Token.class, new DefaultTokenRenderer());\n\t\tregisterRenderer(IfToken.class, new DefaultIfTokenRenderer());\n\t\tregisterRenderer(Token.class, new DefaultTokenRenderer());\n", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t\tlabelFactory = new CapitalizedFacetLabelFactory(labelFactory);\n\t\t}\n\t\treturn labelFactory;\n\t}\n\t\n\tprivate static final int getFacetSort(Element elt) {\n\t\tint sort = XMLUtils.getIntegerAttribute(", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "\n    url(r'^(?P<pipeline_id>[\\w\\-\\+]+)/(?P<job_id>[0-9a-f-]+)/(?P<step_id>[0-9a-f-]+)$',\n        PipelineConfigurationView.as_", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "                       Palette.from(bitmap).generate(palette -> {\n                            int defaultColor = ColorHelper.getAttributeColor(mContext, R.attr.card_background);\r\n                            int color = palette.getVibrantColor(defaultColor);\r\n                            if (", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "   account = account_for_vimeo_id(access_token.token, person=person)\nleapfrog/poll/accounts.py\nclass Account(models.Model):\n    service = models.CharField(max_length=20, blank=True)\n", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "\n    # ...\n\n    # ...\n\n    # ...\n\n    # ...\n\n    # ...\n\n    # ...\n\n    # ...\n\n    # ...\n\n    # ...\n\n    # ...\n\n    # ...\n\n    # ...\n\n    # ...", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "   grid_size = int(np.sqrt(len(data)))\n    grid = np.random.rand(grid_size, 4)\n    grid = grid / np.sum(grid, axis=0)\n\n    # Initialize posterior and marginal distributions\n    posterior = np.", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "           Board.this.rollDices();\n          }\n      }\n    });\n    rollBtn.setX(boardbg.getWidth() / 2);\n    rollBtn.setY(boardbg.getHeight() / 2);\n    addActor(rollBtn);\n", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "\n        self.assertEqual(etree_iter_strings(root), ['a', 'b1', 'c1', 'c2', 'b1', 'c3', 'b3', 'c3'])\n\n        self.assertEqual(etree_iter_strings(root,", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "\n    def test_tail_matches(self):\n        self.runner.add(ContentSampling(), with_child=True)\n        self.runner.add(SimhashSampling(), with_child=True)\n        self.runner.add(ContentSignatureSampling(), with_", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "\n    cfe = CFeCancelamento(\n            chCanc=_opcao('--ch-canceamento'),\n            CNPJ=_opcao('--cnpj-can'),\n            signAC=_opcao('--assinatura-can'),\n", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "\n    public void setImmutableChecker(ImmutableChecker checker);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "           EtsiResponse response = this.client.sendRequest(req);\n            System.out.println(\"Signature response: \" + response.getStatus());\n        } catch (IOException ioe) {\n            System.out.println(\"Failed to send ASiC signature request.\");\n            i", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "           RotationVectorSensorCollector.flushDBCache(deviceID);\n        }\r\n        if(type == 12 || type == 0) {\r\n            RelativeHumiditySensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type ==", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "\t\n\tpublic Team getTeamSummary() {\n\t\treturn teamSummary;\n\t}\n\n\tpublic void setTeamSummary(TeamSummary teamSummary) {\n\t\tthis.teamSummary = teamSummary;\n\t}\n\n\tpublic List<String> getRoster() {\n\t", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "\n        FeedbackUseCase feedbackUseCase = new FeedbackUseCase(\n                new Function1<AppData, Void>() {\n                    @Override\n                    public Void apply(AppData appData) {\n                        return Void.empty();\n                    }\n                },\n                new", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "           try:\n                # 1.0 Retrieve the object from DynamoDB\n                response = self.session.get_item(\n                    TableName=table_name,\n                    Key=key,\n                    ReturnValues=\"ALL_DATA\",\n                    Consistent=", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "               art = draw_art(key_size=key['size'], key_algo=key['algo'], key_fpr=fingerprint, color=True, longid=True)\n            else:\n                art = None\n            print(f\"{fingerprint} ({", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "admin.site.register(Target, TargetAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Component, ComponentAdmin)\nadmin.site.register(Progress, ProgressAdmin)\nadmin.site.register(SectorType, SectorTypeAdmin)", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "\n    def consultar_sat_local(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.consultar_sat_local`.\n\n        :return: Uma resposta SAT especializada em ``", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "       self.assertEqual(node_document_uri(ElementTree.XML(xml_test)), 'http://www.w3.org/XML/1998/namespace')\n        document = ElementTree.parse(io.StringIO(xml_test))\n        self.assertEqual", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "                   Arrays.sort(sorted, new StartDateComparator());\n                    break;\n                case START_DATE_ASC_REVERSE:\n                    // nothing to do\n                    break;\n                case END_DATE_ASC:\n                    // nothing to do\n                ", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "   self.worker.log_error(f\"Error in {self.name} initializing training: {e}\")\n    raise KaldiProcessingError(e)\n    return None\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    #", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "   private final Map<String, String> redirectURIs = new HashMap<>();\n\n    public OAuth2ClientImpl(long clientId, String clientSecret, SessionController sessionController, StateController stateController, OkHttpClient httpClient)\n    {\n        this.clientId = clientId;\n", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "   private final Vms vms;\n    private final Jobs jobs;\n    private final Errands errands;\n\n    public SpringDirectorClient(URI root) {\n        this.restTemplate = new SpringRestTemplate(root);\n        this.info = new SpringInfo(restTemplate", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "\n    public void broadcastState()\n    {\n        LocalBroadcastManager.getInstance(this).sendBroadcast(new Intent(FittingBinder.STATE_UPDATED));\n    }\n}\nDifian/DifianApp/src/main/java/com/son", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "       return new SvnJavaAddCommand( this );\n    }\n\n    protected SvnCommand getBlameCommand()\n    {Next line of code:\n        return new SvnJavaBlameCommand( this );\n    }\n\n    protected SvnCommand getBranchCommand()\n   ", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "   @Override\n    public void onMouseClick(GuiMouseEvent event) {\n        if (event.getButton() == MouseEvent.LEFT_BUTTON) {\n            if (event.getXPos() >= getXPos() && event.getXPos() <= getXPos", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "       DATA[looptest][0], EPSILON, FiniteDifferenceSchemes.FORWARD);\n        double[] d3Put = FiniteDifferenceFirstOrder.differentiate(callPut[looppc] ? new blackPut() : new blackCall(), D", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "           VotingModule.class,\n            //FriendlyFireModule.class,\n            //KitsModule.class,\n            //ScoreboardModule.class,\n            //SpectatorModule.class,\n            //WorldBorderModule.class,\n            //BroadcastsModule.", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "    */\n    public DownloadQueue newDownloadQueue() {\n        return new DownloadQueue(mInteger.get());\n    }\n\n    public void start() {\n        mCancelerManager.start();\n    }\n\n    public void stop() {\n        mCancelerManager.stop();", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": " public void onLoad(WatcherRegistry watcherRegistry) {\n    // ...\n  }\n\n  @Override\n  public void onUnload(WatcherRegistry watcherRegistry) {\n    // ...\n  }\n\n  @Override\n  public void onChange(WatcherRegistry", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "    * @throws JMingoParserException if there is an error parsing the XML\n     */\n    private QuerySetConfig parseQuerySetConfigTag(Element element)\n            throws JMingoParserException {\n        Validate.notNull(element, \"querySetConfig tag cannot be null\");", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "\n    def CheckIt(self,S,x):\n\n        print('CheckIt: S',S)\n        print('CheckIt: x',x)\n        # traceback.print_exc()\n        # print('CheckIt: ret',x['status'])\n        # print", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "           left_foot_task = None\n        if self.cur_stance.right_foot is not None:\n            right_foot_task = ContactTask(\n                self.robot, self.robot.right_foot, self.cur_stance.right_foot,\n", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "\n    class test_ops(unittest.TestCase):\n        def test_basic(self):\n            for size in range(MIN_SIZE, MAX_SIZE):\n                for op in simple_op:\n                    # Create a random input\n                    input_ = sc.randint", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\t\taOutput.writeInt16(SegmentMarker.APP14.CODE);\n\t\t\taJPEG.mICCProfile.encode(aOutput);\n\t\t}\n\n\t\tnew DACSegment(aJPEG).encode(aOutput);", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "\n            if (type == HibiscusExportType.SAMMEL) {\n                // Send the entire collection as a single Hibiscus export\n                // file.\n                // ...\n            } else if (type == HibiscusExportType.ALLE_EINZ", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "```\n    generate_pronunciations_func(\n        log_path=log_path,\n        dictionaries=dictionaries,\n        text_int_paths=text_int_paths,\n        word_boundary_paths=word_boundary_paths,\n        ali_", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "       LoreProperties properties = PlayerHandler.getCollectedLore(entityPlayer);\n        if (!properties.hasLore(key)) {\n            properties.addLore(key);\n        }\n\n        PacketReloadLore.updateLore(entityPlayer);\n\n", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "\n    public List<AccountSummary> getAccountSummaries(String userId) {\n        // ...\n    }\n}\n\nsrc/main/java/io/budgetapp/model/form/BudgetForm.java\npublic class BudgetForm {\n\n    private static", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\n\tprivate Util() {\n\t\t// empty\n\t}\n\n\tpublic static CloudUtil cloudUtil() {\n\t\treturn CloudUtil.getInstance();\n\t}\n\n\tpublic static CollUtil collUtil", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "   FadeOutUp(FadingOutUp.class),\n\n    FlipInXaxis(FlipInXaxis.class),\n    FlipInYaxis(FlipInYaxis.class),\n    FlipOutXaxis(FlipOutXaxis.class),\n   ", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "       problem = SearchSkCh(ch, der_mode=der_mode, search_mode=search_mode)\n\n    if check:\n        problem = CheckCh(problem)\n\n    result = solve(problem, solver_name=solver_name, check=check, **", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "       return [h[0] for h in self.hosts]\n\n    def test_hosts_container(self):\n        # Test that the hosts are correctly filtered.\n        hosts = HostsContainer(hosts=['localhost1', 'localhost2', 'localhost3'],\n                                   sand", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "           return command.startswith(\"{:s}\".format(self.get_tc_command(TcSubCommand.QDISC)))\n\n        yield from spr.Which(\n            \"tc qdisc list\",\n            follow_symlinks=True,\n            filter=tc", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": " assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n\n\ndef test_selectEncoder_2GLONASSL2():\n  '''\n  Encoder selection test\n  '''\n  enabledBands = {NormalRateConfig.GPS.L1", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "    */\n    public List<Expense> getExpensesFromCreditPeriod(int periodId) throws CreditPeriodNotFoundException {\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n        List<Expense> expenses = new ArrayList<>();\n\n        Cursor cursor =", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "\n    public MonthCalendar(Context context) {\n        super(context);\n        init(context);\n    }\n\n    private void init(Context context) {\n        this.monthCalendarConfiguration = new MonthCalendarConfiguration(context);\n        this.weekDayFormatter = new SimpleDateFormat(\"ww", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "   my_stream = WhiteNoise()\n    assert isinstance(my_stream, Stream)\n    assert my_stream.take(25) == [0] * 25\n\n  def test_inf_input(self):\nNext line of code:\n    my_stream", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "\n    return t1\n\n    raise TypeCheckError(\"Types do not match\")\n\n\ndef check_type_compatibility(node):\n    t = get_type(node)\n    if t is None:\n        return\n    if isinstance(t, UnionMeta):\n       ", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "       account_id,\n        network_id,\n        blink_url,\n        refresh,\n        motion_interval,\n        throttle_time,\n        *args,\n        **kwargs,\n    ):\n        \"\"\"\n        Initialize Blink object.\n\n        :param", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "\t\t\treturn default_flags\n\t\texcept Exception as e:\n\t\t\tprint(\"Flags\")\n\t\t\tprint(str(e))\n\t\t\treturn default_flags\n\n\tdef add_change_handler(self, handler):\n\t\tself.change_handlers", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "     raise Exception(\"Serialization failed: %s\" % ex)\n\n    try:\n      self.next_sink.AsyncProcessRequest(sink_stack, msg, stream, headers)\n    except Exception as ex:\n      self._varz.serialization_failures()\n", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "       // assertThat(out.toString(), equalTo(\"\"));\n    }\n\n    @Test\n    public void jmxRemoteConnectViaCliWithArguments() throws Exception {\n        TestThread.JMXProcess process = disposer.register(TestThread.runJmxObservableProcess(", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "       return new DrumStoreEntry<>(data);\n    }\n\n    private static class Pair<T> {\n        private T a;\n        private T b;\n\n        public Pair(T a, T b) {\n            this.a = a;\n            this.", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "       MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视频: \" + result.getItems().size() + \" ", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "       return new RoxanaProperties();\n    }\n\n    private ResponseProcessorManager getResponseProcessorManagerForTest() {\n        return new ResponseProcessorManager();\n    }\n\n    private class MockedMultiBusinessException extends MultiBusinessException {\n\n        public MockedMultiBusinessException", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "   self.SendMessage(self._ping_msg)\n\n  def _RecvLoop(self):\n    \"\"\"Constructs and sends a response message.\"\"\"\n    while self.isActive:\n      try:\n        self.RecvMessage(self.messages_recv)\n", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "     assert freq2lag(v) == v\n      assert lag2freq(v) == v\n\n  def test_almost_eq_works_with_floats(self):\n    for v in [37, 12, .5, -2, ", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "           Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy2", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "\n    @checks.is_guild_admin()\n    @checks.is_guild_mod()\n    async def load_config(self):\n\n        ...\n\n    @checks.is_guild_admin()\n    @checks.is_guild", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "   return evaluate_comparison_expression(operands, context=context)\n\n\n@method('eq')\n@method('ne')\n@method('lt')\n@method('gt')\n@method('le')\n@method('ge')\ndef select_value_comparison_oper", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "       welcomeString.setText(\"Welcome, Joaquín\");\n        return header;\n    }\n\n    private void selectGroupItem(int groupPosition, int childPosition) {\n        // Se maneja el evento por grupo...\n        Event event = mEventParents.get(", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "           // Fragment to notify\n            InviteToChatFragment inviteToChatFragment = (InviteToChatFragment) FragmentManager\n                    .getInstance().findFragment(InviteToChatFragment.class);\n            inviteToChatFragment.onChatCreated(newCh", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "       UnifiedOrderResponse response = wxPayClient.unifiedOrder(request);\n        Assert.assertTrue(response.getResultCode().equals(\"SUCCESS\"));\n    }\n\n    @Test\n    public void refund() throws WXPayApiException {\n\n        String nonceStr", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "       String key = creator.getKey();\n\n        assertEquals(KEY, key);\n    }\n\n    @Test\n    void getKeyTest() {\n        Translator translator = new MockedTranslator();\n        MessageTranslatedCreator creator = new Message", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "\t\tpublic int readSmallIntValue(int d1) {\n\t\t\tint value = d1 & 0x07;\n\t\t\tswitch (value) {\n\t\t\tcase 0x01: // 0\n\t\t\tcase 0x02", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "\n    def __repr__(self):\n        return \"Client(username='%s', password='%s', project_id='%s')\" % (\n            username, password, project_id)\n\n    def get_client(self, endpoint_type):\n        if endpoint_", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "\n        AlpineLinuxPingParser,\n        MacOsPingParser,\n        NullPingParser,\n        )\n\n        for parser_class in parser_class_list:\n            try:\n                parser = parser_class(self.__timezone)\n                break\n            except", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "       // set frame width and height\n        if (m.videoSetWidth.getText().equals(\"\")) {\n            m.videoSetWidth = Main.screenWidth;\n        }\n        if (m.videoSetHeight.getText().equals(\"\")) {\n            m.videoSetHeight = Main", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "           self.probe = probe\n        else:\n            self.probe = _probe_adjacency_list(probes)\n        # Initialize the spike detector.\n        self.detector = Thresholder(**kwargs)\n        self.filter = Filter(", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "   protected final BoundRequestBuilder prepareGet(final URI uri) {\n        if (uri == null) {\n            throw new IllegalArgumentException(\"URI must not be null\");\n        }\n\n        if (_httpClient == null) {\n            throw new IllegalStateException(\"Transport has", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "   self._cdg = ControlDependence(self)\n    return self._cdg\n\n  def analyze(self):\n    self.build_graph()\n    self.build_block_intervals()\n    self.build_block_constraints()\n    self.build_", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "       IntentIntegrator integrator = new IntentIntegrator(getActivity());\n        integrator.setOnActivityResultListener(new IntentIntegrator.OnActivityResultListener() {\n            @Override\n            public void onActivityResult(int requestCode, int resultCode, Intent data) {\n                if", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": " public void visit(final JavaSQLFunc func) throws QueryException {\n    final String funcName = func.getName();\n    if (funcName.equals(SELECT)) {\n      // ...\n    } else if (funcName.equals(INSERT)) {\n      // ...\n    } else", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\t\t\tFile baseFile = new File(basePath + \"/input.dmi\");\n\t\t\tFile expectedFile = new File(basePath + \"/expected_output.xforms\");\n\t\t\t\n\t\t\tPreprocessor preprocessor = new DDITitlingPreprocessor();\n", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "\n        # Test the Bernoulli distribution\n        b = Bernoulli(0.5)\n        np.test.assert_almost_equal(b.draw(10), [0.5, 0.5, 0.5, 0.5, 0.", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "\n        state = stateFactory.createState(VastAdInteractionSandBoxState.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vpaid state\n\n        state = stateFactory.createState(Vpaid", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "\tpublic void acceptBoolean(BooleanTag tag, boolean value) {\n\t\tacceptValue(tag, value);\n\t}\n\t\n\t@OverrideNext line of code:\n\tpublic void acceptChar(CharTag tag, char value) {\n\t\tacceptValue(tag, value);\n", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "   def test_add_or_subtract_days(self):\n        self.assertEqual(add_or_subtract_days(date=datetime.date(day=1, month=1, year=2022),\n                                                 num_of_days=-", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "                       expectLastCall().andThrow(new UnexpectedException());\n                        mocksControl.replay();\n\n                        // WHEN\n                        Throwable thrown = catchThrowable(() -> givenSut(systemUnderTestMock)\n                                .givenArgument(() -> {\n", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "       if rem > 0:\n            self.append(Bit(rem))\n        else:\n            self.append(Bit(0))\n        return self\n\n# Decoder joker\nclass _Paf_(Bit):\n    def __init__(self, value=0):\n       ", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "\n        # 1. Check if the table already exists\n        # 2. Create the table\n        # 3. Verify the table\n        # 4. Return\n        # ...\n        # 5. If the table already exists, return\n        # ...\n        # 6", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "\n    def _http_post(self, url, *args, **kwargs):\n        \"\"\"Construi a mensagem HTTP POST para a API SAT.\n\n        :param str url: Endereço da API SAT.\n        :param args: Parâmetros para a função", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "   engine.bind(ComplexModel)\n\n\ndef test_bind_model_with_stream(engine):\n    class StreamModel(BaseModel):\n        class Meta:\n            stream = {\n                \"include\": {\"new\"},\n                \"arn\": \"test-arn-manually", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "   assert u6.dimensions == mass\n    assert u6.base_value == 1000.0\n\n    # nonzero MKS conversion factor\n    u7 = Unit(\"kg/m**2 * s**-2 * A\")\n    assert u7.dimensions", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "\n    ['Verify instance command references --no, returns paths',\n     ['references', 'TST_Person.name=\"Mike\"', '--no'],\n     {'stdout': ['\"root/cimv2:TST_FamilyCollection.name=\\\\\"Family2\\\\\"", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "       // Load plugins\n        loadPlugins();\n        // Register Listeners\n        registerListeners();\n        // Initialize Economy\n        economyService = new LiteEconomyService(new CurrencyRegistryModule(), new PlayerDataService(), new VirtualDataService(),\n                new Lite", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "       sh_ptr = c_void_p()\n        self._call_fmod(\"FMOD_Sound_GetTag\", index, byref(sh_ptr), name)\n        return TAG(sh_ptr)\n\n    def get_sub_sound(self, index):", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "                   @Override\n                    public void showNewAccountDialog() {\n                        showNewAccountDialog(MainActivity.this);\n                    }\n\n                    private void showNewAccountDialog(Context context) {\n                    }\n                });\n    }\n\n    private void showNewAccount", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "\t\t\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages(\n\t\t\t\t\t@Path(\"username\") String userName,\n\t\t\t\t\t@Path(\"page\") int page\n\t\t\t\t\t);\n\n\t@GET(\"/3/account/{", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "       resource = ThermometerResource(aircraft.sensors.thermometer)\n        thermometer_data = resource.get()\n\n        self.assertAlmostEqual(aircraft.sensors.thermometer.temperature, thermometer_data[\"temperature\"], 3)\n", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "   column = User.age\n    value = 3\n    expected_ref = \":v0.#n0\"\n    expected_action = actions.set({\"N\": \"3\"})\n    expected_values = {\":v0.#n0\": expected_action.value}", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "       upvotes = post.upvotes\n        net_votes = post.net_votes\n        downvotes = post.downvotes\n        parent = post.parent\n        parent_id = post.parent_id\n        parent_node = post.parent_node\n", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "   Call<EmojiResponse> getEmoji();\n\n    // GIFs\n    // ---------------------------------------------------------------------------------------------------\n\n    // Search for gifs based on a query tag\n    //\n    // @param serviceIds       a {@link Map} of a collection of", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "           of(mConnectionErrorListener).ifPresent(ConnectionErrorListener::onError);\n            of(mConnectionWpsListener).ifPresent(ConnectionWpsListener::onError);\n            wifiLog(\"CONNECTION FAILED WITH REASON: \" + connectionErrorCode.", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "           LightSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 6 || type == 0) {\r\n            ProximitySensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type == ", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "       for (PlaySession playSession : stack.getPlaySessions()) {\n            playSession.addListener(this);\n        }\n    }\n\n    private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n        for (Card card :", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "\n    def generate_segments(self, indices):\n        for i, recording in indices:\n            yield self.run_segments(recording)\n\n    def run_segments(self, recording):\n        # ...\n        yield from self.run(SegmentVadArguments", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "   private final Tasks tasks;\n    private final Deployments deployments;\n    private final Vms vms;\n\n    public SpringDirectorClient(URI root) {\n        this.restTemplate = new RestTemplate(new HttpClientTemplate(new NetHttpClientBuilder()\n            .", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "       ckresult(self._call_fmod(\"FMOD_Sound_GetTag\", index, byref(tag), name))\n        return tag\n\n    def get_length(self):\n        \"\"\"Retrieve the length of the sound in seconds.\n\n        :rtype", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "\n    def process_section(self, bufr_message, bit_writer, section):\n        \"\"\"\n        :param BufrMessage bufr_message: The BUFR message object.\n        :param BitWriter bit_writer: The BitWriter object.\n        :param section:", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "       form = ReportAbuseForm(request.POST)\n        if form.is_valid():\n            abuse_report = form.save(request.user, logged_against)\n            log_moderator_event(ModerationLogMsg.REVIEW,\n", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "   public void output(final String line) {\n        out.println(line);\n    }\n\n    public void output(final String[] line) {\n        for (int i = 0; i < line.length; i++) {\n            out.println(line[i]);\n", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "\n        // Parsing application arguments\n        ProtTestArgumentParser parser = new ProtTestArgumentParser(args);\n        ApplicationOptions options = parser.parse();\n\n        // Initializing the application\n        ProtTestFacadeMPJ facade = factory.getFacadeMPJ", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\t\ttropo.record();\n\t\t\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "       \t\tresposta.setQuestao(this.questaoDao.carrega(idDaQuestao)));\n\t\t\tresposta.setCaminhoParaArquivo(arquivos.caminhoParaArquivo(resposta.getContent(), \"", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {\n\t\t\t\tif (code == 0) {\n\t\t\t\t\t// Get the track list\n\t\t\t\t\tList<ProgramTrack> tracks = connector.getTrackList();\n", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "   @Before\n    public void setUp() {\n        // Set up mocks\n        when(movieMedia.getUrl()).thenReturn(\"http://example.com/movie.mp4\");\n        when(adMedia.getUrl()).thenReturn(\"http://example.com/ad.mp", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t\t\t\tPlatform.exit() ;\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// load the settings\n\t\t\tString settingsFile = \"driveuploader-settings.xml\" ;\n\t\t\tif (!new java.io.File (", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "   String adapterName = adapterName(type.getQualifiedName());\n    String suffix = constructor != null && isCallableConstructor(constructor)\n        || validateInjectable(type) {\n      INJECT_ADAPTER_SUFFIX;\n    } else {\n      STATIC", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "       }\r\n    }\n}\n```\nPlease note that this is just an example, and you may need to modify it to fit your specific use case. Additionally, you will need to implement the necessary interfaces and methods to make the API work as expected.", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": " assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)\n\n\ndef test_parameters_msgtype3():\n  '''\n  CNAV message test\n  '''\n  parser = prepareArgsParser()\n  params = [\n     ", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "   if is_xml_codepoint(cp):\n        return f'/{XPATH_FUNCTIONS_NAMESPACE}modify-value({cp})'\n    elif is_xpath_node(item):\n        return evaluate_path_function(self, context=context)\n", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "   t = Table()\n    t.data, t.keys, t.index = stack_table_inplace(self, right_table)\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "               _isTyping = true;\n            }\n            else\n            {\n                Log.w(TAG, \"Unhandled message type: \" + message.getType());\n            }\n        }\n    }\n\n    private void addMessage(ChatMessage message)\n    {", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "\t\tif use_reduced_residuals:\n\t\t\tr_dmy_factor1_long = dmy_factor1\n\t\t\tr_dmy_factor2_long = dmy_factor2\n\t\t\tr_dmy_interaction_long =", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "\n        // Wait for the main thread to be ready\n        main.waitForReady();\n\n        // Check that the main thread is now in the BLOCKED state\n        assertThat(main.getStatus(), equalTo(ThreadStatus.BLOCKED));\n    }\n\n    @Test", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "               DialogPicker datePicker = new DialogPicker(this, YEAR_MONTH_DAY);\n                datePicker.setOnDatePickListener(new OnDatePickListener() {\n                    @Override\n                    public void onDatePicked(int year, int month, int day)", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "           GyroscopeSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 5 || type == 0) {\r\n            LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == ", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "   private SetOtherFragment setOtherFragment;\n\n    private int mCurrentPage;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_home);\n        mSectionsPagerAdapter = new", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "       self.reporter.run()\n\nswitzerland/client/AliceConfig.py\nclass AliceConfig:\n    def __init__(self):\n        self.log_level = logging.DEBUG\n        self.use_ntp = True\n        self.ntp_server = \"", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "   assert isinstance(deltas.deltas[4].attributes, Thread)\n    assert deltas.deltas[4].cursor == \"thread_cursor\"\n    assert deltas.deltas[4].event == \"create\"\n    assert deltas.", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "       self.account = self.api.get_account()\n        self.accounts = self.api.get_accounts()\n        self.threads = self.api.get_threads()\n        self.folders = self.api.get_folders()\n        self.labels", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "     getApplicationContext().getSharedPreferences(\"com.google.android.stardroid.preferences\", Context.MODE_PRIVATE));\n      // Check if the user has night mode enabled\n      nightMode = getSharedPreferences().getBoolean(\"night_mode\", false);\n      // Check if", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "           non_equilibrium_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)\n        else:\n            non_equilibrium_ther", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "           Str('MN', Pt=MN(), Len=1),\n            Str('IMSI', Pt=IMSI(), Len=8),\n            Bit('C', ReprName='Continuity Check', Pt=0, BitLen=1),\n            Bit('", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "\n    def __parse_tc_command(self, device):\n        self.__logger.debug(\"parse tc command: {}\".format(self.__tc_command_input))\n        try:\n            tc_command_output = run_tc_show(self.__tc_command_", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "       result, index = apply_fast_eq(left.values, right.values,\n                                      left.index, right.index)\n        return Column(result, index)\n\n    else:\n        return Column(operator.eq(left.values, right), left.index)", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "   response = Response(\n        body='abe1351f',\n        headers={'Content-Type': 'application/text; charset=UTF-8'},\n    )\n    validator_map = mock.Mock(spec=ValidatorMap, response=fake_validator)\n", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
