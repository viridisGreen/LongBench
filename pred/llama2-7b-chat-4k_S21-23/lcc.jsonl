{"pred": "\t\t\t\tfor ( int j = 0; j < m_Participants[i].Gumps.Count; ++j )\n\t\t\t\t{\n\t\t\t\t\tGump g = m_Participants[i].Gumps[j];\n\t\t\t\t", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tZ_.add_edge(e_v, e_u, **data.copy())\n\t\t\t\n\t\t\tP.put( (-w, e, A, Y_, Z_) )\n\t\t\tsolutions.append(A)\n\t\t\t\n\t\t", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "       a = Sndfile(ofilename, 'r')\n        # Now, read some frames, go back, and compare buffers\n        # (check whence == 1 == SEEK_CUR)\n        a.read_frames(1024)\n        a.", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "   page = VideoPage(self.browser)\n    page.open_video_page(\"video_id\")\n    print(\"Video ID:\", page.video_id())\n    print(\"Video Title:\", page.video_title())\n    print(\"Speaker Name:\", page.spe", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value\n\t\t\t\t\twriter.addAttribute(\"name\", styleValue.getName());\n\t\t\t\t\twriter.addAttribute(\"value\", styleValue.getValue());\n\t\t\t\t}\n\t\t\t}", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "       for a in self.answers:\n            ret += a + \" \"\n        return ret\n    def is_correct(self, answer):\n        return answer in self.answers\nclass _AnswerData(_QAData):\n    def __init__(self, answer):\n        self", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   mob.Prompt = new SR_NewRunePrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 3:\n                    mob", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "           for (X509Certificate cert : chain) {\n                s.print(\"  \" + cert);\n            }\n            s.println(\"...\");\n        }\n    }\n}\n/*\n * ServerKeyExchange ... SERVER --> CLIENT\n *\n * The server", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "           sp = new JESpace (name, path);\n            spaceRegistrar.put (name, sp);\n        }\n        return sp;\n    }\n    public static void register (JESpace sp) {\n        spaceRegistrar.put (sp.getName(), sp);", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic void consumeAlchemize() {\n\t\t\towner.remove(Alchemize.class);\n\t\t}\n\t};\n", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "       request = self.read_request_body(environ)\n        soap_ns = environ.get('SOAP_NS')\n        soap_uri = environ.get('SOAP_URI')\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "       mark = \"setRepeated('%s');\" % status_id\n        self.webview.execute_javascript(mark)\n    def unmark_status_as_repeated(self, status_id):\n        mark = \"unsetRepeated('%s');", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "   def run_subprocess(self, logger, action, status_id, *args, **kwargs):\n    ...\n    def run_subprocess(self, logger, action, status_id, *args, **kwargs):\n        try:\n            # Check if the subprocess worker is", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tAssert.IsFalse (a.Union (b).IsSubsetOf (a), \"!IsSubset\");\n\t\t\tAssert.IsFalse (b.Union (a).IsSubsetOf (b), \"!IsSubset\");\n\t\t}\n\t}\n}", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "       return self.trust_managers[0].getAcceptedIssuers()\n    def getRejectedIssuers(self):\n        return self.trust_managers[0].getRejectedIssuers()\n\n    def init(self,", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       DomainInfo info = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", info);\n    }\n    private User getUser(HttpServletRequest request)\n    {\n        String username = request.getUserPrincipal().getName();\n        User user = new User();", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "```\n    def __setup_player_thread(self) -> None:\n        self.__player_thread = threading.Thread(\n            target=self.__player_run,\n            args=(self,))\n        self.__player_thread.start()\n```\nThe code is a part", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1 && store.GetValue (iter, columnBool2) == false) {\n\t\t\t\t\tjumpID = (int) store.GetValue (iter, 0);\n\t\t\t\t\t//usnelect \"all\" checkboxes\n\t", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                argValues[i] = null:\n            } else {\n                argValues[", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t\tpublic static class Firm\n\t\t\t{\n\t\t\t\tpublic UUID id;\n\t\t\t\tpublic ConfigurationSection conf;\n\t\t\t\tpublic Firm(UUID id, Configuration", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new BooleanFieldEditor(AUTO_SAVE,\n\t\t\t\t\t\t\"Auto save", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "\n                m_Owner.Caster.SendAsciiMessage(\"Target selected\");\n            }\n        }\n    }\n}\n\nI have tried to complete the code but I am unable to understand the syntax and structure of the code. Can someone please explain me the code and help me complete it?", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "       self.expunge_all()\n\n    def _finalize_loaded_all(self, states):\n        self.expunge_all()\n\n    def _begin(self):\n        self.transaction = None\n        self.bind = None\n        self.bind_table =", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) { \n\t\t\tfinal String name = field.getField().getName().toString();\n\t\t\tList<IField> named = name2Field.get(name);\n\t\t\tif (named==null) { \n\t\t\t", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   like `r'/foo/*'` in conjunction with using the decorator.\n    \"\"\"\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        if self.request.path.endsnot with(\"/\"):\n           ", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t\t\n\t\tprotected internal override void RenderContent (HtmlTextWriter writer)\n\t\t{\n\t\t\tbase.RenderContent (writer);\n\t\t}\n\t\t\n\t\tprotected internal override void OnPreRender (", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   wd = WigleDownloader(user=arg.user, password=arg.password, coordfile=arg.coordfile, outpath=arg.outpath)\n    wd.run()\n\nThe code above is a Wigle Downloader class, which is a simple", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod >= 156 && mod <= 160)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.Possible", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "       android_builds(build, builds)\n    else:\n        builds = [ {'os': 'os_android', 'os_pretty': 'Android',\n                   'arch': 'x86', 'arch_pretty': 'Android x86'} ]\n    # Check", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (stateBeansList==null || stateBeansList.isEmpty()) {\n\t\t\tstateBeansList = StatusBL.loadByObjectID(objectID);\n\t\t}\n\t\tif (stateBeansList==null || stateBeansList.isEmpty()) {\n", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (var argument in argumentSyntaxs) {\n                var reference = argument.Parent.Parent as LabeledStatementSyntax;\n                if (reference != null && reference.Parent.GetType() == typeof (SwitchCaseStatementSyntax)) {\n                    var parameter = reference.Parent.Parent.Parent", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       split_test = self.get_item_from_modulestore(self.split_test_usage_key, verify_is_draft=True)\n        self.assertEqual(0, split_test.user_partition_id)\n        # Change to second group configuration.", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           // Output the CIDFontTyte2 dictionary\n            PdfStream stream = new PdfStream(GetCIDFontType2(piref, subset, metrics));\n            stream.FlateCompress();\n            writer.Write(stream);\n            // Output the font base dictionary\n", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\t// place the cell at its proper depth\n\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tcgn.x = (int)(xScale * (cell.getDepth() + 0.5))", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       task = Util.asyncTask(new Util.FutureTaskListener<Bitmap>() {\n          @Override public void onSuccess(Bitmap result) {\n            Log.w(TAG, \"loaded page \" + model.getSprite());\n            bitmapReference = new SoftReference<>(result);", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n               ", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "   prerequisite = NavigateToSibling('Manage Policies')\n    def step(self):\n        self.prerequisite_view.policy.item_select('Manage Policies')\n\\end{code}\n\nI'm trying to create", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequences, sequenceTitles);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralPose pose) {", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "               base.Render(writer);\n            }\n        }\n    }\n}\n```\n\nPlease note that this is a C# code and it is not JavaScript. It is a C# class that implements the `IScriptControl` interface and it is used to render a button with various properties such", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return getClass().getSimpleName() + \"[\" + getId() + \"]\";\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "   i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'admin',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn',", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "   self.assertEqual(p.owns[0], o)\n    self.assertEqual(o.owner, p)\n\nThis code is a test class for the MongoDB engine, specifically for the delta testing feature. It tests the ability to track changes to documents and their relationships.\n\nThe", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "                   display(line(x=widget_x, y=widget_y, sel_dim=sel_dim))\n            else:\n                print('Please specify a valid 1D-variable')\n                return\n        else:\n            x = self.dataset[x]\n            y", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               if (rootFolder != null)\n                {\n                    toScan.Add(path);\n                }\n            }\n            foreach (var path in toScan)\n            {\n                var watcher = _fileSystemWatchers[path];\n                if (watcher != null)\n", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E get(K key, E defaultValue) {\n\t\tI result = internalMap.get(key);\n\t\treturn (result == null || defaultValue == null) ? defaultValue : read(key", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       resbrains = pdt.searchResults(query)\n        if len(resbrains) == 1:\n            contobj = resbrains[0].getObject()\t    \n            if contobj.isDiscussable() and canreply(contobj):", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\tset { m_ID = value; }\n\t\t}\n\t\tpublic TileType Type\n\t\t{\n\t\t\tget { return m_Type; }\n\t\t\tset { m_Type = value; }\n\t\t}\n\t\tpublic byte m_", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   // get the parcel voice channel\n                    //m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": Parcel \\\"{1}\\\" ({2}): avatar \\\"{3}\\\": retrieving parcel voice channel...", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\tDialogResult=DialogResult.Cancel\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriods.Update(PayPeriodCur);\n\t\t\tDialogResult=DialogResult.OK;\n\t\t}\n\t\tprivate void butCancel_Click(object", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)\n        # Convert averaging/integrating period to timedeltas.\n        column_headings['Av or Int period'] = _calc_integration_period(\n            column_", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   return authz.is_authorized('group_or_org_member_create', context, data_dict)\ndef _group_or_org_member_update(context, data_dict):\n    user = context['user']\n    return authz.is_authorized('", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tNode childNode = node.getChild(example.getLabel());\n\t\t\t\t// assigning outcome and confidences\n\t\t\t\toutcomes[parentIndex] = childNode.getPartitionId() + 1;\n\t\t\t\tconfidences[parent", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           return new[] { new SearchResults() { Segment = segments[0], Matches = 0, ErrorCode = ErrorCode.InvalidOperation } };\n        }\n        #endregion // Methods\n    }\n}\n// End of file\n//--------------------------------\n// Copyright (c", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           ch = string.charAt(offset);\n            codePoint = Character.getCodePointAt(string, offset);\n            if (codePoint >= '\\u0100' && codePoint <= '\\u0700') {\n               return offset + 1\n                    + Character", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "   ValidationResults results = ValidationResults.SUCCESS;\n    if (existingRequired) {\n      // check if the study form name exists\n      StudyFormDAO studyFormDAO = new StudyFormDAOImpl();\n      List<StudyForm> studyForms = studyForm", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Mod != ModData.Manifest", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tfor(int i = 0; i < beans.length : i++)\n\t\t{\n\t\t\tcoll.add(beans[i].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n}\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "   xbmc.executebuiltin(\"Notification(\"+localtxt9+\",\"+localtxt10+\", 5000, %s)\" % (image))\n    xbmc.sleep(1000)\n    xbmc.restart()\n   ", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": " if not 'grouping' in pD:\n    return S_ERROR( \"Missing grouping!\" )\n  grouping = pD[ 'grouping' ]\n  #Get plotname\n  if not 'typeName' in pD:\n    return S_ERROR( \"Missing", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tforeach (var b in builders)\n\t\t\t\tb.SetRallyPoints(bot.World, bot.LocalRandom);\n\t\t}\n\t\tvoid AddNewProductionBuilding(string buildingType)\n\t\t{\n\t\t\tif (Info.Build", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       return plan.getPlan();\n    }\n    public static void main(String[] args) {\n        try {\n            PlannerTestAideDeCamp aid = new PlannerTestAideDeCamp(new URL(\"http://localhost:10000/voltdb", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(300, 200);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\tthis.comboBox1.Validated += new System.EventHandler(this.", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = parity;\n\t\t\tdcb.DataBits = data_bits;\n\t\t\tdcb.StopBits = bits;\n\t\t\tdcb.Hand", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "       page = self.get_page(self.user.get_profile().get_url(),\n                             login_as=admin)\n        self.assertEquals(page.context['cobrand'],\n                          cobrand)\n    def test_user_with_cobrand", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   args = parser.parse_args()\n    if args.keep_tempdir:\n        _keep_tempdir = True\n    else:\n        _keep_tempdir = False\n    TestMethods.test_check_tempdir()\n    TestMethods.test_check_nol", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\tself.list = [self.newAPList[i] for i in range(len(self.newAPList))]\n\t\t\tself.oldlist = newList\n\t\t\tself.listLength = len(self.list)\n\t\t\tself.oldInterfaceState", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               float barsX = 0, barsY = 0, barsW = 0, barsH = 0\n                for (int k = 0; k < fCode.Length; k += 9) {\n                    barsX += fontX;\n                    barsY += font", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return results;\n  }\n}\n}\n\n", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "       y_points = np.arange(-90, +90, 1.2345)\n        x_points, y_points = np.meshgrid(x_points, y_points)\n        # Extract a smallish nearest-neighbour interpolation.", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           Clipboard.Clear();\n            Clipboard.SetText(currPacket.ToShortString());\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket = GetCurrentPacket();", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "   elif color == 'yellow':\n        print '\\033[1;32;40m'\n    else:\n        print 'default'\n    print\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.signal import f_regression\nfrom", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "\n        public virtual void Remove(TK key)\n        {\n            if (ReferenceEquals(key, null)) {\n                return RemoveNull();\n            }\n            int value;\n            if (!_refSet.TryGetValue(key, out value)) {\n                throw new ArgumentException", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.treeView1.TreeNodeStyle = System.Windows.Forms.TreeNodeStyle.DropDown;\n            this.treeView1.NodeMouseClick += new System.EventHandler(this.treeView1_NodeMouseClick);\n            this.treeView1.NodeMouseDoubleClick", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "           func = self.functionTypeFor(dll)\n            func.errcheck = wrapper.glCheckError\n            func.argNames = wrapper.glArgNames(argTypes)\n            func.DLL = dll\n            func.extension = extension\n            func.deprecated = deprecated\n", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           for (int i = 0; i < emptyStreams.size(); i++) {\n                if (emptyStreams.get(i)) {\n                    writeSingleFile(baos, files.get(i));\n                }\n            }\n            header.write(baos.", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                   alphaLevel = (int) (alphaLevel * (inRamp = !inRamp));\n                    repaint();\n                }\n                try\n                {\n                    Thread.sleep(rampDelay);\n                }\n                catch (InterruptedException e)\n                {\n", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_be_removable_and_should_not", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "               if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, can", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "       f.write('\t\t\t(default = 1.0)\\n')\n        f.write('F) 0\t\t\t# Sersic index (default = 4)\\n')\n        f.write('G) 0\t\t\t# Bar index (default = ", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "                   i += (((b & 0x04) << 5));\n                    i &= 0xFF;\n                    break;\n            }\n            lo[0] = i;\n        }\n    };\n    public static void main(String[] args) {\n", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "       return self.course_key.url_path\n    def _create_course(self):\n        \"\"\"\n        Create the course in the studio.\n        \"\"\"\n        # Create the course\n        response = self.session.post(\n            STUDIO_BASE_URL + '/", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length>1) {\n\t\t\tchance=Float.parseFloat(splitNumber[1]);\n\t\t}\n\t\tint result = (int)(chance*100);\n\t\treturn result;\n\t}\n\t\n\tpublic static", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "   if response['status'] == 200:\n        # Download both cert files from the api host\n        types = ['key', 'cert']\n        for cert_type in types:\n            try:\n                # If we can't open the file it's not there, so", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.lblPrivacy.AutoSize = true;\n            this.lblPrivacy.Location = new System.Drawing.Point(6, 33);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "       for plugname, plug in self.loaded_plugins:\n            try:\n                plugruncount += 1\n                plug.run(self)\n            except KeyboardInterrupt:\n                raise\n            except (OSError, IOError) as e:\n                if e.", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "if __name__ == \"__main__\":\n    from MaKaC.webinterface import urlHandlers\n    from MaKaC.common.fossilize import IFossil\n    from MaKaC.common.Conversion import Conversion\n    from MaKaC", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                           parent.alertError(parent, \"Error importing message: \" + e.getMessage());\n                            setVisible(true);\n                            return false;\n                        }\n                        return true;\n                    }\n                };\n                messageBrowser.setMessageWriter(messageWriter);\n", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t\t\t\tlayer = ((Scriptable) value).getIntValue(0);\n\t\t\t\t\tif (layer == -1) {\n\t\t\t\t\t\tthrow new Exception(\"Invalid value for layer\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       if (currentSession != null && !currentSession.equals(Session.getActiveSession())) {\n            // Get the user's profile picture and name\n            GraphAPI api = new GraphAPI(getApplicationContext());\n            try {\n                // Get the user's profile picture\n                URL", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions)\n\t\t\tsum += emotion.strength;\n\t\tfor (Emotion emotion : emotions)\n\t\t\temotion.strength = (int) (sum * 100 / (emotions.length", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "                   'property1': 2, 'property2': 3}\n            }],\n            self.build.stages_to_list())\n    def test_to_dict(self):\n        \"\"\"Test converting BuildJob to dictionary.\"\"\"\n        # read and parse sample file\n", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   LatRad = phi1/a\n    LongRad = (LongOrigin + x/a)*_rad2deg\n    if NorthernHemisphere:\n        Lat = phi1 - 90\n    else:\n        Lat = phi1 + 90\n    return", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "       form = ReportUserForm(request.POST)\n        if form.is_valid():\n            messages.error(request, \"Reported user!\")\n            return HttpResponseRedirect(reverse('profile'))\n    else:\n        form = ReportUserForm()\n    return render_to_", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   label = \"Add new product series\"\n    field_names = [\n        \"name\",\n        \"product\",\n        \"series\",\n        \"approved\",\n        \"bug_status\",\n        \"bug_target_list\",\n        \"bug_target_status\",\n       ", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\tform.Controls.OfType<Button>().Where(b => b.Name.EndsWith(\"_Button\"))\n\t\t\t\t\t.Do(b => b.Name = b.Name.Replace(\"_Button\", \"Button\")));\n\t\t\t}\n\t", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>= 8;\n            }\n        }\n        return arr;\n    }\n    public String toStringWithoutUnit()\n    {\n        if (value == null)\n        {\n            return \"\";\n        }\n        else\n        {\n            return value.toString", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "   def compile_tag_regex(positional_tags):\n        if not positional_tags:\n            return positional_tags\n        else:\n            new_positional_tags_list = []\n            positional_tags = positional_tags[0]\n            for flag,", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "               return new object[0];\n            }\n        }\n    }\n}\n\nI am trying to implement the GenericParameter class from the CorApi2.Metadata namespace. The class has a number of properties and methods that are not implemented, and I am trying to implement them.\n\nThe", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "packet = OBD_PID00(data=['PID20', 'PID1F', 'PID1E', 'PID1D', 'PID1C', 'PID1B', 'PID1A', 'PID19', 'PID", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tif ready_pipe == -1:\n\t\t\tready_pipe = self.get_ready_pipe()\n\t\telse:\n\t\t\tself.set_ready_pipe(ready_pipe)\n\t\tself.emit('ready', ready_pipe)\n\tdef get", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "\t\t\t\t\n\t\t\t\tindex = this.AddCraft(typeof(MassDispelScroll), 1044383, 1073465, 45.0, 95.0, typeof(BlankScroll), 10", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "       if exc is None:\n            exc = sys.exc_info()[1]\n        self.app.do_teardown_request(exc)\n        rv = _request_ctx_stack.pop()\n        assert rv is self, 'Popped wrong request", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   response = _pubsub_consumer(session, cluster_id, needs_columns=needs_columns)\n    if topic_name:\n        response = response.filter(PubSubTopic.name==topic_name)\n    return response\n# ###################################################################################################", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n}\n}\n```\nPlease note that this code is generated from the Puzzle ITC Mobiliar Business Generator", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "   axis_proj = _axis_in_detector(ray_trafo.geometry)\n    rot_dir = _rotation_direction_in_detector(ray_trafo.geometry)\n    # ...\n    # Compute angles\n    phi = np.arctan(", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "       if self.isEnabled():\n            regx = re.sub('//1', self.option, regx).replace('&', '&amp;')\n            logger.log(u\"Proxified RE: \" + regx, logger.DEBUG)\n        return regx\n   ", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\tswitch (fmt) {\n\t\t\t\tcase Thread.CurrentThread.CurrentCulture:\n\t\t\t\t\treturn font_size_names [unit.ToString (fmt)];\n\t\t\t\tcase CultureInfo.CreateCulture (\"en-US\"):\n\t\t\t\t\t", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\t\tvar sub = (JObject)obj.Properties[0].Value;\n\t\t\t\tAssert.That(sub.Properties.Count, Is.EqualTo(2));\n\t\t\t\tAssert.That(sub.Properties[0].Key, Is.EqualTo(\"The", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "               for (int w = 0; w < width * 2 - 1.5 * (h * 2 + 0.5) / (height * 2 + 0.5) * 2 * Math.sin(Math.PI * (w * 2 + 0", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   iso = isoelastics.Isoelastics(ds)\n    assert np.allclose(iso.get(col1=\"deform\", col2=\"deform\"), [0.00000e+00,\n                                                                  0.0", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "\n        final LocalTripleStore t1 = new LocalTripleStore(new File(\"t1.trstore\"));\n        final LocalTripleStore t2 = new LocalTripleStore(new File(\"t2.trstore\"));\n        //        final Options options = new Options();\n        //", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "       assert alert.lowest_spot_price(history, 'us-east-1b') == 0.105200, \"Lowest spot price for us_east-1b should be 0.105200\"\n        assert alert.lowest", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\tString downloadedJarFile = performDownload();\n\t\t\tif (downloadedJarFile != null) {\n\t\t\t\treturn performInstallerLaunch(downloadedJarFile);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tSDL.SDL_GL_DeleteContext(context);\n\t\t\tcontext = IntPtr.Zero;\n\t\t\twindow.Dispose();\n\t\t}\n\t}\n}\n\";\n\nNote that this code is not complete, and does not include things like error", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "       projected onto the *y* axis (using the :py:func:`~.XYFit.x_data_cov_mat` and\n        :py:func:`~.XYFit.y_data_cov_mat` properties).\n        :rtype: numpy.nd", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n    }\n    private static final String TO_STRING_REPR = \"CmsLinkInfo\";\n    private static final String[] TO_STRING", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "                 adminUser = getEucalyptusAdmin();\n                }\n              } catch (AuthException e) {\n                // ignore, transfer ownership to eucalyptus admin\n                owningAccount = getEucalyptusAccount();\n                adminUser = getEu", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           get { return _selectedFolderChangedEventHandlerId; }\n        }\n        public void SelectFolder(FolderTreeNode node)\n        {\n\t\t\tif (node == _selectedTreeNode)\n\t\t\t\treturn;\n\t\t\t// update selection\n\t\t\t_selected", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       ImportVmTemplateCommand command = spy(new ImportVmTemplateCommand(createParameters()){\n            @Override\n            public VDSGroup getVdsGroup() {\n                return null;\n            }\n        });\n        Backend backend = mock(Backend.class);\n       ", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.XOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\tw10.YOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\t// Container child table1.Gtk.Table+TableChild\n\t", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "       self.set('MY_KEY', 'MY_VALUE')\n        self.push('ANOTHER_KEY', 'ANOTHER_VALUE')\n        # You can fetch it back; this will also set an entry in  the\n        # sqlite database for each hash references that can be pulled", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic void SetField(string name, FieldAttributes attribs, Type type)\n\t\t{\n\t\t\tFieldBuilder fb = new FieldBuilder(this, name, attribs, type);\n\t", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "     return new Builder(prototype);\n    }\n    public class Builder {\n      private SendInvitationRequest _builder;\n      \n      internal Builder(SendInvitationRequest prototype) {\nNext line of code:\n        _builder = prototype;\n      }\n      \n      public", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "                   vertices[x] = getVertex(getVertIndex(i, x));\n                else\n                    vertices[x] = vertices[x].add(getVertex(getVertIndex(i, x)));\n            }\n        }\n    }\n    protected void writeObject(ObjectOutput", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       if (!showDateData.equals(\"\")) {\n            // hide date created and date last modified\n            String[] dateCols = {COLUMN_NAME_DATECREATED, COLUMN_NAME_DATMODIFIED};\n            for (int i = 0; i < dateCol", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\twhile (true)\n\t\t\t{\n\t\t\t\tyield return new WaitForSeconds (0.01f);\n\t\t\t\tif (inputField.text.Length == 0)\n\t\t\t\t{\n\t\t\t\t\ttextRect.size", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       Height = GetBestHeight();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    // Override OnResize to handle the button's size\n    protected override void OnResize(ResizeEventArgs e)\n    {\n", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                   lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (!string.IsNullOrEmpty(lastUser))\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            // send emails to each user\n            foreach (string user in Users", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\t\tdirections |= ScrollDirection.Down\n\t\t\t\t\t\t", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           // Handle addition to/removal from TVerificationResultCollection\n            VerificationResultCollection.Auto_Add_Or_AddOrRemove(this, VerificationResult, ValidationControlsData.ValidationControl);\n        }\n    }\n}\n}\n\\end{code}\n\nThis", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, buffer.Length);\n                // Adding blob/byte[] to args.\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}\n```\nThis code is part of the Phosphorus Five library, which is a", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "   def get_requirements(self, payload):\n        \"\"\"Get requirements for a given payload.\n        return: list of requirements for the given payload\n        rtype: list of PayloadRequirement\n        \"\"\"\n        pass\n    def get_missing_requirements(self, payload):", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return Enabled && CustomImageSelectionStrategy.HasCustomRange(CustomRange); }\n\t\t}\n\t\t#endregion\n\t\t#endregion\n\t\tpublic void OnClipboardChanged(object sender, ClipboardChangedEventArgs e)\n\t\t{\n", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget {\n\t\t\t\treturn dataDir:\n\t\t\t}\n\t\t\tset {\n\t\t\t\t// Ignore\n\t\t\t}\n\t\t}\n\t\tpublic string ConfDirectory {\nNext line of code:\n\t\t\tget {\n\t", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "           switch (bugAnnotation.getType()) {\n            case BugAnnotation.Type.ANALYSIS_ERROR:\n                // ...\n                break;\n            }\n        }\n    }\n}\n*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\tpublic class Beverages : Food\n\t{\n\t\t[Constructable]\n\t\tpublic Beverages() : this( 1 )\n\t\t{\n\t\t}\n\t\t[Constructable]\n\t\tpublic Beverages( int amount ) : base( amount", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                       if (eFarm.X > Me.Position.X)\n                        {\n                            E.Cast(eFarm.X, eFarm.Y);\n                        }\n                    }\n                }\n            }\n        }\n        private void JungleClear()", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, anchor);\n\t}\n}\n}\n\nPlease help me complete the code.", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "       fb = self._retr_file(filename)\n        try:\n            year, month, day = re.findall(r\"\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d\", fb)[0].split('-')\n        except:\n", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "       self.assertTrue(\n            field_def['producer'] == field_model_def['producer']\n        )\n        self.assertTrue(\n            field_def['rules'] == field_model_def['rules']\n        )\n        self.assertTrue(\n           ", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                   new[] {new object[] {\"E1\", 10L}});\n                // test SODA\n                env.UndeployAll();\n            }\n        }\n        internal class InfraHashBTreeWidening : RegressionExecution\n        {\n            private readonly bool named", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "       return self\n\n    def __div__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n        c = self.copy()\n        return c.__idiv__(other)\n    \n    def __idiv", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "   view = self.pool['ir.ui.view'].browse(cr, uid, id_or_xml_id, context=context)\n    if view is None:\n        raise ValueError(\"No such view %s\" % id_or_xml_id)\n    return", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           value = createHTMLView(c, text);\n            c.setClientProperty(BasicHTML.propertyKey, value);\n        }\n        if (oldValue != null) {\n            oldValue.removeFromParent();\n        }\n    }\n    static String getHTMLText(J", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = create(filename, contents=content)\n    assert not s.name_is_non_test\n    assert not s.name_is_manual\n    assert not s.name_is_visual\n    assert s.name_is_testharness\n    assert not s.", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tvar hbmLoader = new HbmLoader(new[] {new HbmSqlReference(namedQueryReference)});\n\t\t\t\tmapping.SqlLoader = hbmLoader.GetLoader();\n\t\t\t}\n\t\t}\n\t\tpublic void Loader(string[]", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tfor ( int i = 0; i < m_Members.Count; ++i )\n\t\t\t{\n\t\t\t\tPlayerState pl = m_Members[i", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "       invocationQueue.removeFirst();\n    }\n    private void moveForward() {\n        assert !graphQueue.isEmpty();\n        assert !invocationQueue.isEmpty();\n        assert currentGraph().graph() != null;\n        assert currentInvocation().graph() != null;\n        assert", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "   def get_pr_metadata(self, pr):\n        # Get PR metadata from CFME_REPO\n        # ...\n        # ...\n        # ...\n        # Get PR metadata from GH_TOKEN\n        # ...\n        # ...\n        # ...\n        #", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    ValueNode phi = getCachedPhi(value, value.getType());\n                    for (int i = 0; i < states.size(); i++) {\n                        states.get(i).readCache.put(key, phi", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "       if (mCallback != null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n}\n\nPlease help me complete the code.\n\nNote: I have provided the code", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendGump(new EodonGump(from as PlayerMobile));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfrom.SendGump(new InternalGump(from as PlayerMobile, this));\n\t\t\t", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "   'BibrecBib1x',\n    'BibrecBib2x',\n    'BibrecBib3x',\n    'BibrecBib4x',\n    'BibrecBib5x',\n    'BibrecBib6x", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "   def get_random_password(self):\n        return 'random_password'\n    def get_random_email(self):\n        return 'random_email'\n    def get_random_jid(self):\n        return 'random_jid'\n    def get_random", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "         - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath, 'to_binary')\n    def percent_translated(self):\n        \"\"\"\n        Convenience method that return the percentage of translated", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      gLogger.error( \"Failed to determine waiting problematics for transformation\", res['Message'] )\n      return res\n    elif not res['Value']:\n        res = self.transClient.setTransformationParameter( transID, 'Status',", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\tif(uri.getPath() != null && uri.getPath().length > 0)\n\t\t\t\tthrow new CommentException(l10n(\"invalidFormPath\"));\n\t\t\tif(uri.getQuery() != null && uri.getQuery().length > ", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       gsp = yield self.setupGerritStatusPush(sampleStartCB=sampleStartCB,\n                                                 sampleReviewCB=sampleReviewCB,\n                                                 summaryCB=sampleSummaryCB)\n        yield gsp.setServiceParent(self.master)\n        yield", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.name = 'Less'\n    self.assert_(self.category.name == 'Less')\n    new_category = atom.CategoryFromString(self.category", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "           Map<String, AnnotationMirror> r2) {\n            // Ignore the unresolved immutability type variables\n            if (r1.containsKey(IMMUTABILITY_KEY)) {\n                r2.put(IMMUTABILITY_KEY", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "#   MATERIAL_MT_sss_presets.draw(context)\n#   MATERIAL_MT_specials.draw(context)\n#   MATERIAL_UL_matslots.draw(context)\n#   MaterialButtonsPanel.", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           if (_engine.Memory.Map.Cartridge.MapperNo == 16)\n            {\n                var map16 = (Mapper16) _engine.Memory.Map.CurrentMapper;\n                mapper16_latch1 = map16.Latch1;\n", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           JMenu jMnuOpenDocument = new JMenu(\"Open Document\");\n            jMnuOpenDocument.add(new JMenuItem(oActionListener, \"Open...\"));\n            jMnuRoot.add(jMnuOpenDocument);\n        }\n        private void insertMenus(){", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 White Bears]\n\t\t//----------------\n\t\t// Weapon Shop\n\t\t//----------------\n\t\t// Page 1\n\t\tAdd(\"Weapon Shop", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\treturn Frame.H;\n\t\t}\n\t\tpublic override void OnSizeChanged (Android.Views.LayoutChangeEvent e, int f)\n\t\t{\n\t\t\tbase.OnSizeChanged (e, f);\n\t\t\tSizeHeightToFitWithMin (", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "       return self.announcement.title\n    def get_latest_tweets_url(self):\n        \"\"\"\n        Return the permalink to the latest tweets for this announcement.\n        \"\"\"\n        return reverse('announcements:latest_tweets', kw", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "\nimport os\nimport shlex\nimport sys\nimport sphinx.ext.intersphinx\nimport sphinx.ext.todo\nimport sphinx.ext.ifconfig\nimport sphinx.ext.graphviz\nimport nfotools\n\nos.environ", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "                ORDER BY sdate, stime ''', (i,))\n    rows = cursor.fetchall()\n    print \"rows is: \", rows\n    for row in rows:\n        print \"Row is: sdate:\", row[0], \" stime:\", row[1], \"", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "       print(\"project_id\", project_id)\n        print(\"timestamp\", timestamp)\n        # conn.table('projects').update({'project_id': project_id}, {'last_snapshot': timestamp})\n        # conn.table('projects').insert({'project_id': project", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\tGiveKeyword(\"deian_02\");\n\t\t\t\tMsg(\"Hey, you! Yeah, you with the curious look!<br/>I'm not sure if you noticed, but...<br/>I'm a bit...involved in something...", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "\t\tname\t- aname/ename/gname\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_REVOKED'\n        self.codehead =", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "   def add_host(self, host_data):\n        self.host_data[host_data.uuid] = host_data\n\nI hope this helps! Let me know if you have any questions or if you need further assistance.", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "\n            }\n        }\n    }\n}\n\\end{code}\n\nThis code is from an app that unshortens URLs, but it's not complete and needs some modifications to work properly. Here are some things you might want to consider:\n\n1. The app uses the `", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   if len(primary.keys()) > 0:\n        print(\"primary.xml contains packages:\")\n        for key in primary.keys():\n            pkg = primary.items[key]\n            print(\"\\t\" + build_nevra(pkg.name, pkg.ep", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "           inputs.extend(self.get_finalized_command('build_ext').get_outputs())\n        return inputs\n    # get_inputs ()\n    def run_command (self, command):\n        # Run the given command, and return its outputs\n        return self.get", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tobject propValue = disassembledValues[j];\n\t\t\t\tif (propValue != null)\n\t\t\t\t{\n\t\t", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "\n    # Kludge, execute() don't accept a namedtuple nor an\n    # OrderedDict so convert it explicitly to a dict.\n    d = jobs[sge_jobnumber][1]._asdict()\n    d = dict(zip(d.keys(), d.", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           return View(\"Form\", new DelegateViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [HttpPost]\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")]  \n        public ActionResult SaveEventDelegate(Delegate", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                   var circle = (Circle) obj:\n                    return string.Format(\"({0},{1})\", circle.X, circle.Y);\n                    }\n                    if (obj is Vector)\n                    {\n                        var vector = (Vector) obj:\n                       ", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "   def resetAccount(self):\n        self.account.setAccountData(self.user, {})\n        self.account.setAccountType(self.user, \"free\")\n        self.logInfo(\"Account reset to free\")\n        self.thread.m.reconnecting.", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path.Count > 0)\n\t\t\t{\n\t\t\t\t// If we found a path, search from the closest cell to the path:\n\t\t\t\tvar closestCell = path.FirstOrDefault(c => c.DistanceTo(searchFromLoc)", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "\n    def write_rsync(self):\n        self.logger.info(\"rendering Rsync files\")\n        self.rsync_gen()\n        self.rsync_write_files()\n\n    def rsync_gen(self):\n        # generate rsync files\n       ", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return Event.newBuilder();\n    }\n}\n\nI am trying to complete the code by implementing the `sendError`, `sendWarning`, `sendInfo`, `sendWatch`, `sendDistress`, `sendCritical`, and `sendSevere` methods.\n\nPlease provide", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           while (true)\n            {\n                if (upBranch.Suffix == PpmContext.ZERO)\n                {\n                    goto NoLoop;\n                }\n                PpmContext next = upBranch.Suffix;\n                if (next == context", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Text String VR.\n        /// </summary>\n        public static readonly DicomVr Tvr = new DicomVr(\"TS\", true, false, true, ", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\t\tsessionValuesArray.Add(tFull[3]);\n\t\t\t}\n\t\t\t//now we have the list of tests that have a value\n\t\t\t//now we can delete the test type\n\t\t\t//or we can send a signal to the main window to", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "       o = self.file(b'abcdefghij')\n        insert_bytes(o, 4, 10)\n        self.assertEquals(b'abcdefghij\\x00\\x00\\x0010', self.read(o))\n", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "   <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Mac OS X (", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   ax.plot(cr['combined'][app][VC]['durations'], label=test)\n    ax.plot([csi_95[0], csi_95[1]], [csi_95[0] + csi_95[1], c", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "   def test_GID(self):\n        \"\"\"\n        Check GID switches when current effective UID is non-root.\n        \"\"\"\n        self.skip = \"GID switching not supported\"\n        self.assertTrue(self.mockos.setegidCalls)\n", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t}\n\t\t\t\telse if(bDrawCheck || bDrawCross)\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlColor());\n\t\t\t\telse\n\t\t\t\t\tg.setColor(Color.gray", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": " self.assertEqual(len(failures), 0,\n    \"Test failed: \\n\" + failures)\n\nI am trying to run this code but I am getting an error. The error is:\n\nTraceback (most recent call last):\nFile \"/home/user/", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       mirror.writeElement(kind, (offset - headerSize()) / kind.width.numberOfBytes, value);\n    }\n    @HOSTED_ONLY\n    public void writeObjectCell(ObjectMirror mirror, Object cell, int offset) {\n        assert offset == lengthOffset", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           if (string.IsNullOrEmpty(relativePath)) {\n                return null:\n            }\n            // attempt to resolve assembly reference using a path relative to the project directory\n            string assemblyFile = FileUtils.CombinePaths(Parent.Project.Directory.FullName, \n               ", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "   if len(args) + 1 > len(string):\n        raise ValueError('Format string is too long')\n    for i, arg in enumerate(args):\n        if arg.startswith('{%'):\n            # Handle format specifiers\n            spec = arg[2:]\n           ", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "       Dcopy.dcopy(i16, paramArrayOfDouble12, i19 - 1 + (1 - 1) * i16 + i18, 1, paramArrayOfDouble12, i27 - 1 + (1 - 1) *", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += \"\t* \" + s.name + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t\t\n\t\tpublic void Update() {\n\t\t\tif( _current_transition != null ) {\n\t\t\t\t", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "               });\n            #endregion Lucian\n            #region Nami\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Nami\",\n                    SpellName = \"NamiTidalWave\",\n                    Slot = Spell", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(\"test.user\", \"test.password\"));\n\t}\n}\n\n */", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "       self.assertRaises(subprocess.error, lambda: subprocess.Popen('hello', 'hello'))\n\nI'm not sure what the issue is, but it seems to be related to the fact that the `test_popen_raises_error` function is not defined", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tPropertiesService.Initialize(PropertiesName, ConfigDirectory);\n\t\t\tResourceService.Initialize(ConfigDirectory);\n\t\t\tAddInTree.Start();\n\t\t\tMessageService.Start();\n\t\t\tLoggingService.Start();\n\t\t\tEventService.", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "       self.Dialog.setWindowTitle(\"Pyslsv UI\")\n        self.Dialog.show()\n        self.Dialog.raise()\n        self.Dialog.activate()\n        self.console_error_option.setCheckState(QtWidgets.QAbstractButton.Off)", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "               showNoTafMessage( stationId );\n            } else {\n                // We have the TAF data\n                showTaf( wxs );\n            }\n            return true;\n        }\n    }\n    private void showTaf( Cursor wxs ) {\n        //", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tstring continents = \"from Continent\";\n\t\t\t\tint results = s.CreateQuery(continents).List().Count;\n\t\t\t\tQueryStatistics continentStats = stats.GetQueryStatistics(continents);\n\t\t\t\tAssert.Is", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "           }\n            return (ushort)uiCRCITTSum;\n        }\n        public void reflect(ulong crc, int order)\n        {\n            // \n            // Reflect the CRC value back to the beginning of the sequence\n            //\n            // This is", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn 10;\n\t}\n\tpublic void shoot(Vec3 vec) {\n\t\tthrowableEntity = new Bullet(level, this);\n\t\tthrowableEntity.shoot(vec);\n\t\tif (shootSound == null) {\n\t\t\t", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           return new IHyperlinkDetector[] { \n                    new CeylonJavaBackendHyperlinkDetector(), \n                    new CeylonJavascriptBackendHyperlinkDetector(), \n                    new CeylonNativeHeaderHyperlinkDetector() };\n", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "   self.aspectWidget = Object3Aspatial(self)\n\nThis code creates a widget with a group box that contains a drawing mode selection widget and an aspect selection widget. The drawing mode selection widget has three radio buttons for selecting the drawing mode, and the aspect selection widget has a grid layout with", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set location\n\t\t\t\t\t{\n\t\t\t\t\t\ttoSet = new Point2D( m_Mobile.Location );\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\tshouldSend = true;\n", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                    for (Object valueChoice : valueChoices)\n                     {\n                      Object convertedObj = selectConverter.convert(valueChoice);\n                      if (convertedObj.equals(value))\n                      {\n                         chosenObj = valueChoice\n                         // ...\n                     ", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\tif (acceptableChange[i][j])\n\t\t\t\tsb.append(\" \"+i+\"->\"+j+\"\\t\"+fractionWithAmount[i][j][0]+\"\\t\");\n\t\t\telse\n\t\t\t\tsb.append(\" \"+i+\"->", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "                           foreach (KeyValuePair<int, int> unpricedLine in unpricedLines)\n                            {\n                                //get the index of the purchase order and line that contained the unpriced product\n                                int orderIndex = unpricedLine.Key;\n                                int", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t\t[MonoTODO]\n\t\tpublic void WriteObject (Object obj)\n\t\t{\n\t\t\tthrow new Not", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       final Subject mockCurrentSubject = EasyMock.createMock(Subject.class);\n        //expect(mockSecurityManager.getDatabase()).andReturn(mockDatabase).times(3);\n        //expect(mockDatabase.getCurrentSubject()).andReturn(mockCurrentSubject).times(3);", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn Vector2.Transform (v, Matrix.CreateTranslation (viewport.ToVector2 () - v));\n\t\t}\n\t\tpublic static Vector2 RelativeTo (this Vector2 v, Vector2 reference)\n\t\t{\n\t\t\treturn v - reference;", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "xdre = XDREnum('xdr', 1)\nendpoint_key_1 = endpoint_key(vlan=1, mac_hi=0x21212121, mac_lo=0x31313131)\nendpoint_", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic void Send(string[] messages)\n\t\t{\n\t\t    Send(messages, true);", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           switch (type) {\n                case Step:\n                    logDataSet(list);\n                    break;\n                case Activity:\n                    logDataSet(list);\n                    break;\n            }\n            mRequestMap.remove(requestId);\n        }\n    }\n   ", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " PrintLongLine('                               %s%d<ReturnType%s>,' %\n                (parent_class, exec_count, exec_type_str))\n  if bind_count:\n    PrintLongLine('                               %s a%d,' % (suffix, bind", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   \"\"\"\n    response = HttpResponse(mimetype='application/json')\n    response['Content-Disposition'] = (\n        u'attachment; filename=\"{0}.json\"'.format(filename)\n    )\n    json_data = [\n        range_item_dict(", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                       VarNode(\"score\"), null/* c */, Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(serviceGraphPattern);\n            }\n        }\n        //\n        // Test the optimization.\n        //\n        final ASTSearchOptimizer optim", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "       if request.method == \"POST\":\n            form = UserForm(request.POST)\n            self.save_form(form)\n            if form.cleaned_data[\"password\"]:\n                self._handle_set_is_active()\n            else:\n                self.get", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    #region IAssemblyReference Members\n    IAssembly IAssemblyReference.ResolvedAssembly {\n      get { return this.ResolvedAssembly; }\n    }\n    AssemblyIdentity IAssemblyReference.Unified", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "           // Perform the TFQMR iteration\n            for (int iter = 0; iter < 1000000000; iter++)\n            {\n                // Calculate the residual vector\n                r.Set(matrix, input);\n                // Compute the odd", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\tApfloat median = sortedNumbers[right];\n\t\t\treturn new Apfloat[] {median};\n\t\t} else {\n\t\t\tApfloat median1 = sortedNumbers[left];\n\t\t\tApfloat median2 = median1.add(sortedNumbers[right]).", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "   while v != -1:\n        if sample_count[v, j] > 0:\n            L[v] = j\n            A[v, j] = right\n            sample_count[v, j] -= 1\n        v = parent[v]\n        if", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "       for item in self.items:\n            try:\n                # Hack until we decide the final id to use\n                if 'uuid' in item:\n                    item['ocean-unique-id'] = item['uuid']\n                else:\n                    # twitter comes from logst", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tvar bots = slot.Value.Bots;\n\t\t\t\t\t\t\t\t\t\tif (bots != null)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tforeach", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "       return frame_header + padding_bytes + self.data\n    def __repr__(self):\n        return '<DataFrame stream_id: {} flags: {}\\\n         data: \"{}\", padding_high: {} padding_low: {} total_padding: {}>'.format(\n           ", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           var b = cluster.RectangularBoundary.BoundingBox;\n            if (b.XMin() != b.XMax() || b.YMin() != b.YMax()) {\n                Console.WriteLine(\"Cluster \" + cluster.Id + \" has non-rectangular bound", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\nvoid btKinematicCharacterController::setRoll(double roll)\n{\n\tm_roll = roll;\n}\nvoid btKinematicCharacterController::setPitch(double pitch)\n{\n\tm_pitch = pitch;\n}\nvoid btK", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       for (ExpressionTree exp : initializers) {\n            if (canBeLeaked(exp)) {\n                checker.report(Result.failure(\"unique.leaked\"), exp);\n            }\n        }\n        return super.visitNewArray(node, p);\n   ", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound != null)\n\t\t\t{\n\t\t\t\tNBTTagCompound nbttagcompound1 = nbttagcompound.getCompoundTag(\"display\");\n\t\t\t\tif (nbttagcompound1 !=", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\t_returnType = new ClassItem(typeAttribute.Value, Context);\n\t\t\t}\n\t\t}\n\t\t//--------------------------------------------------------------------\n\t\t// Private methods\n\t\t//--------------------------------------------------------------------\n\t\tprivate void CreateMethods()\n\t\t{", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\tmyTrackBar.Width = 200;\n\t\t\t\tmyTrackBar.Height = 250;\n\t\t\t\tmyTrackBar.AutoSize = false;\n\t", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\twhen(classType.isClass()).thenReturn(false);\n\t\t\tdoReturn(Collections.singleton(annotationType)).when(lookup).findAll();\n\t\t\tCollection<? extends ImmutableClassType> result = instrumentation.addInstrumentationPoints(agentConfiguration,", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (isImplicit() != other.isImplicit())\n\t\t\treturn false;\n\t\tif (postdominators == null) {\n\t\t\tif (other.postdominators != null)\n\t\t\t\treturn false\n\t\t\t}\n\t\t}", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           int min2 = wideRExtent[end][r.rightChild];\n            int min = (min1 > min2 ? min1 : min2);\n            if (min > narrowL) { // can this right constituent stretch far enough to reach the left constituent?\n              continue", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "\n        'rsync', '--exclude-from', 'path/to/file',\n        'src', 'dst'\n            ],\n            shell=False, env=None,\n            stdout=PIPE, stderr=PIPE, stdin=PIPE,\n            preexec", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tvar state = process.GetOrCreateData<ProcessState>();\n\t\t\tstate.IgnoreThreadsChangedEvent = false;\n\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n\tprivate String writeMaterial( final Appearance appearance )\n\t{\n\t\tString materialName = _appearanceMap.get( appearance );", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( (proxyThat instanceof Contact) &&\n\t\t\t\tequalContact( (Contact)proxyThat ) ) {\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}\n\tprivate boolean equalContact(final Contact that) {\n\t\tif ( this.", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "   if n == n_steps:\n      print((\"FINAL TIME STEP : %s\" %n))\n      print((\"Number of rejected timesteps wall: %s\" %LSolv.num_rejections_wall))\n      print((\"Number of rejected", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "       if cdata is None:\n            # This is an instance of Subtensor, so we can remove it\n            return [node.inputs[0]]\n    elif isinstance(node.op, AdvancedSubtensor1):\n        # Check if the indices are equivalent to `arange(0", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "form = EditCommunityForm(request.user, community)\nThe error message I got is:\n\"EditCommunityForm\" is not a valid form class.\nPlease fix the error and try again.\n\nI have tried changing the name of the form class to match the name of the form\n", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "                   return fn(*arg, **kw)\n        return wrap\n    def before_execute(self, query):\n        \"\"\"Receive the :class:`.Query` object before it is executed.\n        This event is intended to allow changes to the query given::\n            @event.listens_", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "           self.runtime.add_block_as_child_node(self.get_icon_class(), xml_object)\n        return xml_object\n    def get_icon_class(self):\n        # HACK: This shouldn't be hard-coded to two types\n        #", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "       for change in data_model_changes:\n            global_changes.append(to_global(change.key))\n        return global_changes\n    def get_adapter(self, data, bg_value):\n        return get_adapter(data, bg_value)\n    def register", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\telse if (Class != null && Field != null)\n\t\t\t{\n\t\t\t\tStaticCompiler.IssueMessage(Message.MapXmlError, \"not implemented: cannot use 'class' and 'field' attributes for ldtoken\");\n\t\t\t\treturn false", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);\n\t\t\tthis.objYLabel.TabIndex = 13;\n\t\t\tthis.objYLabel.Text = \"Description...\";\n\t\t\t//", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       c = self.get(\"mail/freshcvs.5\")\n        self.assertEqual(c.who, \"etrepum\")\n        self.assertEqual(set(c.files), set([\"Twisted/doc/examples/cocoaDemo\"]))\n        self.", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       if (termData == null) {\n            termData = new ArrayListValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n        for (String fieldName : csvData.keySet()) {\n            String value = csvData", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(isPassiveFlower()) {\n\t\t\t// Handle wand interaction\n\t\t\t// ...\n\t\t}\n\t\treturn super.onWanded(player, wand);\n\t}\n\t@Override\n\tpublic void onNeighborBlockChange(World world", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           float nbNeighbors = 0;\n            for (Node neighb : component.getNeighbors()) {\n                if (nbNeighbors < 2)\n                    nbNeighbors++;\n            }\n            nbNeighbors = n", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "   if not are_equal:\n        raise Exception(\"Inconsistent moreinfo data\")\n    else:\n        logger.info(\"moreinfo data is consistent\")\n    return are_equal\ndef estimate_time(recid):\n    # 1) retrieving the fulltext file\n   ", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\te.Cancel = true;\n\t\t\tDispose();\n\t\t}\n\t\t#endregion\n\t\tprivate void updateListViews(string computerName)\n\t\t{\n\t\t\t//updateListViews();\n\t\t\t//updateTreeViews();\n\t\t", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   for (java.util.Date date : exceptionDates) {\n      exDateList.add(toDatable(date, event.getStartHour()));\n    }\n    return new ExDate(exDateList);\n  }\n  private static Datable<?> toDatable", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.EventName = SourceEventName.Trim();\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = gameObject.AddComponent<dfEventBinding>();\n\t\ttargetEventBinding.hideFlags = HideFlags.HideAnd", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "           ISwitchManager switchManager = (ISwitchManager) ServiceHelper.getInstance(ISwitchManager.class,\n                    containerName, this);\n            String spanPortName = getSpanPortName(jsonData);\n            switchManager.addSpanPort(spanPortName, jsonData", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\tsuper.x = width;\n\t\t\tsuper.y = height;\n\t\t\tsuper.id = id;\n\t\t\tsuper.path = path;\n\t\t\tsuper.width = width;\n\t\t\tsuper.height = height;\n\t\t\tsuper", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n    }\n}\n\nI have a feeling that this code is incomplete and needs to be completed. Can someone please help me with this?\n\nNote: I have tried to provide as much context as possible, but if there is any specific part of the", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "lam = LinkAnnoManagement()\n    \"\"\"\n    def __init__(self):\n        self.project_uuid = '0'\n        self.source_id = 'manual'\n    def add_skos_hierarachy(self, parent_uri, child_uri):", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           buffer.Append(\"    .shrinkfit   = \")\n                .Append(StringUtil.ToHexString(ShrinkFit)).Append(\"\\n\");\n            buffer.Append(\"    .mergecells = \")\n                .Append(StringUtil.ToHexString(Mer", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// Half-width kana.\n\t\t\t\tvalue = (ch - 0xFF60) * 2;\n\t\t\t\tvalue = ((int) (cjkToJis [value])) |\n\t\t\t\t\t\t(((int) (", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "```\n    obj.mnemonic = \"ST_W\"\n    obj.operands = [env.D[b], env.cst(off1.int(-1),10)]\n    obj.type = type_data_processing\n```\nThe code given above is a part", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tJRPropertiesMap properties = new JRPropertiesMap();\n\t\t\tstream = connection.getInputStream(url);\n\t\t\tproperties.loadStream(stream);\n\t\t\treturn properties;\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n\t", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "           return this == CREATIVE;\n        }\n    }\n}\n\nPlease provide the code you want to complete.", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tCommonSecurityDescriptor csd = new CommonSecurityDescriptor\n\t\t\t\t(false, false, ControlFlags.None, null, null, null, null);\n\t\t\tcsd.DiscretionaryAcl = new DiscretionaryAcl (true, true, 0", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "   def run(self):\n        self.stop()\n        for result in self.queue.get_queue(), None:\n            self.put(LookupResult(fresult, releases, error))\n        self.start()\n        while not self.stopped():\n            self.id", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       // check for missing RPCs\n        foreach (var rpc in RPCList)\n        {\n            if (RPCList.Find(r => r.Name == rpc) == null)\n            {\n                Debug.LogError(CurrentLang.IncorrectRPCList", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "rootLayout.setOnKeyListener(new View.OnKeyListener() {\n            @Override\n            public boolean onKeyDown(View v, int keyCode) {\n                if (keyCode == android.view.KeyEvent.KEY_DOWN_ARROW) {\n                    // Handle", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "           return psit_G.transform(self.symmetry.op_scc[s], op_cc)\n\n        # Check for symmetry of grid\n        if self.gamma:\n            return psit_G.transform(self.symmetry.op_scc[s", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n        utkastRequest.setPatientEfternamn(Strings.repeat(\"a\", 255));\n        Response response = utkastController.createUtkast(intygsTyp", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach(ILNode child in block.Body) {\n\t\t\t\t\tif (child is ILBlock) {\n\t\t\t\t\t\tILBasicBlock childAsBB = child as ILBasicBlock;\n\t\t\t\t\t\tif (prevChildAsBB != null", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll) {\n\t\treturn;\n\t    }\n\t    IsRagdoll = ragdoll;\n\t    if (delay > 0f) {\n\t\tmWaitForRagdoll = true;\n\t\tWorldClock", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   def __init__(self, config={}):\n        super().__init__(config)\n        self.name = \"Fracture Layer\"\n        self.top = ClassFactory( [InterpolatedNodeSet] )\n        self.fix_region_id()\n        self.", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       out[outOff + 0] = (byte)(num >> 24);\n        out[outOff + 1] = (byte)(num >> 16);\n        out[outOff + 2] = (byte)(num >> 8);\n        out[outOff", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           super( source, new SimpleRegexValueGetter( objectVariables,\n                source.get( 0 ), null ) );\n        }\n    }\n}", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "       elif key == 'VALEUR':\n            slice_json['valeur'] = transform_values_holder_xml_json_to_json(value[0])\n        else:\n            slice_json[key] = value\n    if comments:\n        slice_json['comment", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "         }\n        }\n      });\n    }\n    catch(Exception e1) {\n      e1.printStackTrace();\n    }\n  }\n  public final void remove(final InternalFrame frame) {\n    try {\n      Integer n = buttonsNr.get(frame.", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "   getNearestLC('J0001000', 2/60.0/60.0)\n\nPlease help me complete this code.\n\nI have tried to understand the code but I am unable to understand the purpose of some of the functions and classes.\n", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   for (int y = 0; y < p.getRasterHeight(); y += toolDiameterInPx/2)\n    {\n      for (int x = leftToRight ? 0 : p.getRasterWidth() - 1; \n        (leftTo", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                   db.update(Db.Table1.TABLE_NAME, new String[] {Db.Table1.GROUP_NAME + \" = \" + newId}, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "               else if (m_meth == AllocMethod.CoTaskMem)\n                {\n                    // ...\n                }\n            }\n        }\n        #endregion\n    }\n}\n\nYour task is to complete the code by implementing the `WinVerifyTrust` function", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "```\n# Local time zone for this installation. All choices can be found <http://en.wikipedia.org/wiki/List_of_tz_zones_by_name>\nTIME_ZONE = 'America/Chicago'\n```\nThe above code defines various settings for Django, including", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tvar ps = produceable[itemName];\n\t\t\tif (ps != null)\n\t\t\t{\n\t\t\t\tps.Cancel(numberToCancel);\n\t\t\t}\n\t\t}\n\t\tprotected void BeginProduction(ProductionItem item)\n", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "       infoText += \" file\" if numberOfFiles==1 else \"files\"\n        infoText += \"<br>\"\n        infoText +=  str(numberOfHiddenFiles) \n        infoText += \" hidden file\" if numberOfHiddenFiles==1 else \"hidden files\"\n        infoText", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       for line in code.split('\\n'):\n            line = re_m4.sub(lambda x,y: y+x, line)\n            yield line\n        self.outputs[0].write(join(self.inputs[0].get_path(), 'output.pc", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "       planning_executor_result = self.executeActionPlan(actionplan)\n        print \"This came back from PlanningExecutor:\"\n        print planning_executor_result\n        self._dynamic_knowledge = planning_executor_result.dynamic_knowledge.data\n        if planning", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t- 2 * chemical[ 0 ][ idx - reactorExtent - 2 ] + 2 * chemical[ 0 ][ idx - reactorExtent - 1 ]\n\t\t\t\t\t\t\t\t\t- 2 * chemical", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP format pattern is required\");\n                }\n                columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampLocale));\n                break;\n           ", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\treturn base.ReceberAutoIncremento(qs, entity);\n\t\t}\n\t\t\n\t\t\n\t}\n}\n</code>\n\nPlease note that this is a generated code and you may need to modify it to fit your specific requirements.\n\nThis code", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic void Initialize(IProxyInitializer<MyClass> p)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic void Cleanup(IProxyC", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "       self.cli_load_config([\"ntp authentication-key 32 md5 1111\"])\n        self.ntp_auth_conf['key_id'] = 32\n        self.ntp_auth_conf['auth_pwd'] = '1", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           check_node(component.location, editing_user, None, editing_user, None, after_create, editing_user)\n            check_node(sibling.location, editing_user, None, editing_user, None, after_create, editing_user)\n        #", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "       digest.update((byte) (TEXT_CODE & 0xff));\n        ensureCharBuffRemaining(length);\n        charBuff.put(ch, start, length);\n        updateWithCharBuf();\n    }\n    public void processingInstruction(String target", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "   return aetypes.Range(dict['min'], dict['max'])\ndef mkcomparison(dict):\n    return aetypes.Comparison(dict['type'], dict['value'])\ndef mkenum(dict):\n    return aetypes.Enum(dict['name'], dict", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           Type type = null;\n            // First, try to get the type from the action's parameter descriptor.\n            if (api.ActionDescriptor.ParameterDescriptors.Any(p => p.Name == \"requestBody\"))\n            {\n                // If the action has a request body", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "               value = entry.get_active_text()\n            self.on_edit_cell(record, column.name, value, False)\n            return True\n        else:\n            return False\n    def on_edit_cell(self, record, fieldname, value, edit):\n", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanFactory.registerBeanDefinition(beanName, new MutablePropertyValues(beanProperties));\n        }\n        return beanProperties;\n    }\n    // The bean name to use for the global-properties bean\n    private static final String BEAN_NAME_GLOBAL_PROPERTI", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "           for line in f:\n                if line.strip():\n                    raise ValueError(\"htpasswd file contains blank lines\")\n        finally:\n            if f:\n                f.close()\n    if f is None:\n        # No preexisting file to remove blank lines from\n", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           [In, MarshalAs(UnmanagedType.IUnknown)] object pUnkState,\n            [In, MarshalAs(UnmanagedType.Error)] int hrStatus,\n            [In, MarshalAs(UnmanagedType.LPStruct)] ConstPropVariant pvValue\n", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       checkNotNull( spm.lookup( principal ) );\n        ensureReadAccess( aclKey );\n        return null;\n    }\n}\n\nThe code above is a REST controller for the Principal API, which is responsible for managing principals (users, roles, and groups)", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "       for child in element.findall('.'):\n            if not self.verify_element(child):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag of the element.\n        This verifies that the tag of the element", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   if node.parentNode is not None:\n        node.parentNode.removeChild(node)\n    newOwnerDocument.appendChild(clone)\n    node = clone\n    return node\ndef _get_StringIO():\n    return StringIO()\ndef _get_ElementsByTagName_", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t/**\n\t*\n", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(TlvTypeCodes.KeyLocatorDigest, endOffset)) {\n\t\t\t\tdecodeKeyLocator\n\t\t\t\t  (TlvTypeCodes.KeyLocatorDigest, keyLocator, decoder);\n", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.updateCooldown(delta);\n        }\n    }\n    @Override\n    public void draw(Game", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       GameEngine.model().getGame().getRegistrationByColor( colorValue );\n        // search for team\n        // ===============\n        // search for team\n        // ===============\n        // search for team\n        // ===============\n        // search for team\n", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "       raise RuntimeError(\"Bad response from server: %s\" % r.data)\n    filename = get_filename(r.headers)\n    with open(filename, \"wb\") as f:\n        f.write(r.data)\n    if progress:\n        print(\"Down", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tmergedOrder = response.MergedOrder;\n\t\t\t\tfailureReason = response.ErrorMessage;\n\t\t\t}\n\t\t\tcatch (", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   with model:\n        model.objective_direction = direction\n        for i in range(len(grid)):\n            with model:\n                for rxn in reactions:\n                    point = grid.at[i, rxn.id]\n                    rxn.", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "   return self.get_queryset().filter(pootle_path=pootle_path, user=user)\n    def get_for_translation(self, pootle_path, user):\n        \"\"\"Returns units that are part of the `pootle_path", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "           ],\n        ),\n        migrations.CreateModel(\n            name='Subject',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                ('name', models.CharField", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "   def get_table_entry(self, dpid):\n        return self.pox_switch.get_table_entry(dpid)\n    def get_flow_table_entry(self, flow_key):\n        return self.pox_switch.get_flow_table", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   m_RecentItems.add(item);\n    if (m_IgnoreChanges)\n      return;\n    readProps();\n    updateMenu();\n    if (m_Listeners != null)\n      for (RecentItemListener<M,T> l : m_List", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (src.Followers.Any(x => x.Defender == target) || src.Followers.Any(x => x.Attacker == target))\n                return true;\n            // Checked for any kind of friendship\n            if (src.Friends.Any(", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "       if (halfTradePeriodDate == null && takeOfferDate != null)\n            halfTradePeriodDate = new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getHalfTradePeriod());\n        return halfTradePeriodDate;\n", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a != null) return a:\n\t\t\treturn LeadingAny(p.down);\n\t\t}\n\t\treturn null;\n\t}\n\t\n\tpublic static Node FindAny(Node p) {\n\t\tNode a = LeadingAny(p);", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tWriteReport(buff);\n\t\t\tmReadDone.WaitOne(1000, false);\n\t\t\treturn mReadBuff;\n\t\t}\n\t\tinternal void OpenWiimoteDeviceHandle(string devicePath)\n\t\t{\n\t\t", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tif (order == SortOrder.DESCENDING)\n\t\t\t{\n\t\t\t\tdirection = -1;\n\t\t\t}\n\t\t}\n\t\tpublic int compare(Object o1, Object o2)\n\t\t{\n\t\t\tMsk", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           //UPGRADE_NOTE: The following line was upgraded from 12.0.16.0 to 12.0.16.1. \"ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "   view = EditComputeChargebackView(rate)\n    view.title.text = 'Compute Chargeback Rate \"{}\"'.format(rate.description)\n    view.add_button.click()\n    view.cancel_button.click()\n    view.save_", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.Lock( offset, length, BufferLocking.WriteOnly );\n\t\t\t\tMemory.Copy( src, dest, length );\n\t\t\t\tshadowBuffer.Unlock();\n\t", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\t\tself.retune(None)\n\t\t\tif self.frontend is None:\n\t\t\t\tmsg = _(\"Tuner not available.\")\n\t\t\t\tif self.session.nav.RecordTimer.isRecording():\n\t\t\t\t\tmsg +=", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           else {\n                TcpAddress.TcpAddressMask filter;\n                filter = new TcpAddress.TcpAddressMask(filterStr);\n                tcpAcceptFilters.add(filter);\n            }\n        }\n    }\n}\n\\end{code}\n\nThis is", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               prior = curr;\n                curr = new byte[bytesPerRow];\n            }\n            return fout.ToArray();\n        }\n        \n        private void ReadPdf() {\n            // Read the PDF file\n            int fileSize = fileLength;\n            if (fileSize", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), None)\n        self.assertFalse(s.has_interface('org.freedesktop.dummy'))\n        s", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "       _file = open(filename, 'w+')\n        _file.write(output)\n        _file.close()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "               \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field \" +\n                \"named \\\"nosuchfield\\\".\",\n                \"nosuchfield: 123\");\n        }\n    }\n}\nnamespace ProtoBuf.Test\n", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic void recreate(int anticipatedSize) {\n\t\t// nothing to do\n\t}\n\t@Override\n\tpublic void recreate(int anticipatedSize, boolean async) {\n\t\t// nothing", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t}\n}\n```\nThis code is an example of how to create a log file for an auction system. It provides a way", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "   attendance_action = self.attendance_action(next_action)\n    return attendance_action\n    def _check_attendance_status(self):\n        for employee in self:\n            employee.attendance_status = employee.attendance_ids \\\n                                         ", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow parentRow = form.grdResults().getRows().get(0);\n\t\tfor (int i = 1 + form.grdResults().getRows().size() - parentRow.getRows().size: i > 0; i > 0)\n", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               c.Dispose();\n                return new Point(pt.x, pt.y);\n            }\n        }\n        internal SystemWindow Sw\n        {\n            get { return sw; }\n        }\n    }\n    public class SystemListViewColumn\n    {\n        readonly string title", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                   toReturn.Add( new StructTypeInfo( \"_\" + Guid.NewGuid().ToString( \"N\" ), managedType, marshalAttribute, arraySize ) );\n                }\n            }\n            return toReturn;\n        }\n        private UnmanagedType? GetMarshal", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\treturn base_type != null && base_type.IsTypeOf (\"System\", \"ValueType\");\n\t\t\t}\n\t\t}\n\t\tpublic override string ToString ()\n\t\t{\n\t\t\treturn attributes.GetAttributes ((uint) TypeAttributes.Name);", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               throw new Exception(\"Could not find model: \" + args.Key);\n            }\n        }\n        #endregion\n    }\n}\n\nPlease help me complete the code by adding the missing implementation for the remaining methods.\n\nNote: The code is written in C# and the R", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "       self.context = OpenSSL.SSL.Context(protocol)\n        self.translator = _translate_stdlib_to_openssl\n        self.util = util\n        self.log = logging.getLogger(__name__)\n        self.HAS_SNI = util", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.checkbuttonWhiteSpaces = new global::MonoDevelop.Components.CheckButton (this);\n\t\t\tthis.checkbuttonWhiteSpaces.Name = \"checkbuttonWhiteSpaces\";\n\t\t\tthis.checkbuttonWhiteSpaces.LabelProp = global::M", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "   notebooks[\"board\"].set_current_page(0)\n    headbook.set_tab_reorderable(True)\n    headbook.set_tab_reorder_size_request(0, 0)\n    headbook.set_tab_reorder_icon", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),\n    \"Open-file-in-new-tab\": QKeySequence(Qt.CTRL + Qt.Key_Shift + Qt.Key_T", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn super.toString();\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   return getModel() != null && getModel().isReadOnly();\n}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(883, 656);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(7", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "       if (sb != null)\n        {\n            return sb.toString().trim();\n        }\n        else\n        {\n            return string.trim();\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512-N-RFC4231-TC1-Legacy\", hmac, data, digest);\n\t\t}\n\t\t[Test]\n\t\tpublic void RFC4231_TC1_Legacy_", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    switch(EnumSwitchUnion.m_d) {\n\t        case option_1:\n\t        \tcurrent_sum += 4 + CDRSerializer.alignment(current_sum, 4); // intVal\n\t        \tsum += 4 + CDRSerializer.alignment", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "       return null:\n      else\n        return java.GetValue(\"JavaHome\").ToString();\n    }\n    private static String GetJreHome(String key)\n    {\n      RegistryKey regKey\n        = Registry.LocalMachine.OpenSubKey(key);\n      if", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "   def _read_user_execute(self):\n        # Read the crontab from the user\n        try:\n            f = open(self.cron_file, 'r')\n            self.existing = f.read()\n            f.close()\n        except IOError", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "# mesh = mesh_modifiers.modify(mesh, modifiers)\n# mesh = mesh_modifiers.modify(mesh, modifiers, True)\n# mesh = mesh_modifiers.modify(mesh, modifiers, False)\n# mesh = mesh_mod", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "\n        }\n    }\n    private void initWriter(String outputFilename)\n    {\n        mWriter = new BufferedWriter(Files.createBufferedWriter(outputFilename, CREATE_IF_ABSENT));\n    }\n}\n\n\n\n\n\n\n\n\n\n", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       for (Edge edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.contains(1));\n        assertEquals(2, neighbors", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "   def parser(self, custom_arg=None):\n        self.args = self.arguments(custom_arg=custom_arg)\n        self.pckts = self.sniffer(self.args.iface, filter_=self.args.filter, num=self.args", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "           this.rptComboBox.Location = new System.Drawing.Point(91, 160);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "       },\n        'main.transcript': {\n            'Meta': {'object_name': 'Transcript'},\n            'assigned_users': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': \"orm['", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               // check for a default type\n                SDOType defaultType = aHelperContext.getDefaultType(targetNamespace, sdoTypeName);\n                if (defaultType != null) {\n                    if (isReturnAllTypes()) {\n                        QName qname = new QName(", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       self.holidays_first_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state': 'validate', 'manager_id': False})\n    def holidays_first_validate_not", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           set { this.Enabled = value; }\n        }\n        #region IGridBase Members\n        void IGridBase.ApplyFilter(IFilterClause filterClause)\n        {\n            GridBaseManager.ApplyFilter(filterClause);\n        }\n        void", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "           return String.Format(\"Mixer Line {0}: {1}\", Name, TypeDescription);\n        }\n    }\n}\n}\n\n", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tvalue10 = new ims.core.admin.domain.objects.CareContext(valueObject.getCareContext().getId(), valueObject.getCareContext().getVersion());\n\t\t}\n\t\tdomainObject.setCareContext(value10);", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "           [\"cargo\", \"build\"],\n            env=env,\n            *opts,\n            **kwargs)\n        build_time = time() - build_start\n        if android:\n            print(\"Building OpenSSL for android...\")\n        else:\n            print(\"Building Ser", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\tif (estP > 0) {\n\t\t\t\t// For positive rules:\n\t\t\t\t// 1. Keep all positives, discard all negatives: p'=p, n'=0\n", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               Stashed.SetStashDiffs(gitStash.Revision, gitStash.Revision, gitStash.Message, gitStash.Items);\n            }\n        }\n        private void LoadGitItemStatuses_Async(IReadOnlyList<GitItemStatus> git", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "   print(st_AssignAddressItem_print_out(out0_to_bm0_addr_assign_item))\n    print(st_AssignAddressItem_print_out(out0_to_bm2_addr_assign_item))\n    print(st_Ass", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       if (this == o) {\n            return true;\n        }\n        if (o instanceof AuthScope) {\n            final AuthScope that = (AuthScope) o;\n            return match(that);\n        }\n        return false\n    }\n    public String toString() {", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                       b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult asyncResult) {\n            return this.EndInvoke(\"AddInt\", asyncResult);\n        }\n    }\n}\n```\nThis code is an example of how to use the", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic static BigDecimal erstelleMengeAusMehrerenSeriennummern(\n\t\t\tList<SeriennrChargennrMitMengeDto> sn", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tEGenericType = (EGenericType", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "load_archive_index(args.index_file)\n\\end{code}\n\nI have a problem with the `load_archive_index` function. The function takes an `index_file` argument and is responsible for loading the archive index from that file. However, the function is not working", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "   self.bits, self.bit_ss, self.bit_es = mosi, self.ss, self.es\n    self.is_acmd = False # Indicates CMD vs. ACMD\n    self.blocklen = 0\n    self.read_buf =", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "       } while (false);\n        // <-, line 200\n        slice_from(\"i\");\n        break;\n      case 2:\n        // (, line 210\n        // <-, line 211\n        slice_from(\"e\");\n       ", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               o = createViewer(channel, cls);\n            } catch (Exception ex) {\n                System.out.println(\"ex: \"+ex);\n            }\n            if (o != null) {\n                channelList.add(cd);\n                channelTableModel.fireTableData", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "   - openssl_certificate_info:\n        path: /etc/ssl/crt/ansible.com.crt\n        privatekey_path: /etc/ssl/private/ansible.com.pem\n        csr_path: /etc/ssl/csr", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tstill_there = s.find (i) != s.end ();\n\t\t\t}\n\t\t\tif (still_there) {\n\t\t\t\t\"\"\", file=f)\n    print(\"\\t\\t\\tboost::function<void(R", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   #   -- 1st check whether a modification is necessary\n    #   -- We help: General regular expressions may not bother with \n    #   -- the 'ForbiddenRange'. Let us be so kind and cut it here.\n    #   number_set = X.get_number", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\t\t\tExpect(29);\n\t\t\tif (t.pos > beg)\n\t\t\t sym.attrPos = new Position(beg, t.pos, col);\n\t\t} else {\n\t\t\tSemErr(\"bad production in attributes\");\n\t\t}\n", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "           edi_doc['date_planned'] = line.date_planned\n            del edi_doc['product_qty']\n            del edi_doc['product_uom_qty']\n            del edi_doc['price_subtotal']\n            del ed", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS + \"https\");\n\t\treturn new ServiceDescription(\"_openhab-server._tcp.local.\",", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               permissions = new ArrayList<>();\n                nameMap.put(name, permissions);\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap\n                .keySet()\n                .stream()\n                .map(\n                        name ->\n                                new Permission", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "       subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))\n        for device in devices:\n            assert device.subsystem == 'input'\n            assert device.asbool('ID_INPUT_MOUSE')\n            assert device.sys_", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   d = Device(deviceToken)\n    u = User(d.app, loginId, password)\n    u.login()\n    print(u.mainmenu())\n    # u.cardUpdate()\n    # u.cardComboUpdate()\n    # u.cardCategoryUpdate", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "# Do the actual work\nif __name__ == \"__main__\":\n    # Parse the command line arguments.\n    arg_list = sys.argv\n    if len(arg_list) < 2:\n        print \"Usage: python uvmeas.py <dataset> [", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           if (Parent is Backpack)\n            {\n                Parent.AddChild(this);\n            }\n        }\n    }\n}\n\nPlease help me complete the code.\n\nNote: I have already written the code for the Key class and the InternalTarget method.\n\nNote", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (String device : devices) {\n            // Check if device is already in the list\n            boolean alreadyInList = false;\n            for (Tuner tuner : tunerList) {\n                if (tuner.getFullName().equals(device)) {\n                   ", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\n    return jobs;\n  }\n  private static boolean isLegacyUpdate(@NonNull Context context)", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     if (split.length != 4) {\n        throw new RuntimeIOException(\"Bad line format in RegexNER mappings: \" + line);\n      }\n      String regex = split[0];\n      String type = split[1];\n      Set<String> overwritableTypes = new", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "       env = SCons.Util.Map({'TEXINPUTS': ['/usr/local/texlive/texmf-dist/latex/']})\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "   print(Coord(10, 10).forward(Projection('+init=epsg:31467')).extent)\n    # Output: (3507360.12813,5395719.27", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "   if self.want.parent is not None:\n        self.want.parent = fq_name(self.partition, self.want.parent)\n    if self.want.destination is not None:\n        self.want.destination = self.want.", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   @navigator.register(KeywordBase.NAVIGATE_TO_PARENT)\n    def navigate_to_parent(self, *args, **kwargs):\n        # ...\n        raise BZ(BZ_HIGH, \"Feature not implemented: navigate_to_", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           throw new Exception(\"No action class specified for \" + className);\n        }\n        return result;\n    }\n    public void setActionObject(String className, IAction action) {\n        String classPath = getActionProperty(className);\n        if (classPath != null) {\n", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "           {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},\n            {\"body\": \"foo\"},\n            mock_request\n        )\n    def test_update_thread_empty_title(self, mock_request):\n        self._test_", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "           print \"Embeding manifest for %s\" % target[0]\n            embedManifestDllAction(target, source, env)\n            return 0\n        else:\n            raise SCons.Errors.UserError(\"Manifest file %s not found\" % manifestSrc)", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           execute(getSelectedResources(), new SubProgressMonitor(getShell().getProgressBar().getProgressMonitor(), 1000));\n        } catch (CoreException e) {\n            recordError(errorStatus, e);\n        }\n        if (errorStatus[0] !=", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\treturn super.init(smi, sdi);\n\t}\n\t\n\tpublic void setOutputContext(OutputContext context)\n\t{\n\t\tsuper.setOutputContext(context);\n\t\t\n\t\t// Add the output fields to the context\n\t\tfor (int", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "   assert f('12:30..+5', last=d(2014,1,31, 12,30)) == (d(2014,1,31, 12,35), d.now())\n    assert f('", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           int count = 0;\n            for (int i = 0; i < fakespawnsA.Length; i++)\n            {\n                string spawnname = fakespawnsA[i];\n                //Check if the spawnname is already in the list\n                for", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "       s, o = self._session_cmd_close(session, suspend_log_chk_cmd)\n        if s:\n            raise exceptions.TestError(\"Guest system log is not cleaned up.\")\n        else:\n            logging.info(\"Guest system log is cleaned", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       rc.get(10, TimeUnit.SECONDS);\n        // ...\n    }\n}\n\nPlease help me to complete this code.\n\nI have tried to understand the code but I am unable to complete it.\n\nPlease provide me the complete code for the above code", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n            \t((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfterParameters(res, destination);\n            }\n            this.owner.getDecorator().on", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\treturn (uint)((value << 24) | (value << 16) | (value << 8) | value);\n\t\t}\n\t}\n}\n```\nThis code is a `MakeEverythingPublic` task that modifies the `IVTString`", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "       self.fm.env.status.append(descr)\n        self.fm.env.status.append(\"Extracting...\")\n        self.fm.env.status.append(\"Press Enter to continue...\")\n        self.fm.env.status.append(\"or Ctrl", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\tpublic void CreateInstance_StringType ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, typeof (COMTest));\n\t\t\tCOMTest objCOMTest = (COMTest)objHandle.Unwrap ();\n\t\t\tobjCOMTest.", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "       repo = self._setup(da, Action.ACCEPTED, Action.REJECTED)\n        self.assertEqual(repo.changesets.count(), 3)\n        avs = AppVersion.objects.all()\n        flagdata = flags4appversions(avs)", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "               userstate.texture = cmd.parameters[\"texture\"]\n            self.Log.debug(\"Modifying user state\")\n            self.send_message(PYMUMBLE_MSG_TYPES_USERSTATE, userstate)\n            cmd.response = True\n            self", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "       PlayerGroup group = player.getPlayerGroup2();\n        if (group != null) {\n            group.onEvent(new ChangeLeaderEvent(group, player));\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "   def highlight(self, toks, formatter=None, outfile=None):\n        formatter = formatter or Formats.get(conf.UI.formatter)\n        outfile = outfile or StringIO()\n        formatter.format(toks, outfile)\n", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "       column, tree_model, tree_iter = self._setup_column(1, False)\n        tree_model.add_map(tree_iter, self._create_store_map(1, False, 15, 2))\n        # ...\n    def test_update", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t    if (parent != null) parent.setAttributes(parent.getAttributes() + \" \" + getName() + \"='\" + getExpression() + \"'\" + getCssStyle());\n\t} while (parent != null);\n\treturn super.doStartTag();\n    }\n", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "\n                nl = element.SelectSingleNode(\"Frames\").ChildNodes;\n                FramesCount = Convert.ToByte(ReadElement(element, \"FramesCount\"));\n                FramesLoaded = Convert.ToByte(ReadElement(element, \"FramesLoaded\"));\n                ImageIndex =", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "\t\t\t\t\tm_key[i] = new ExodusActivation();\n\t\t\t\t\telse\n\t\t\t\t\t\tm_key[i] = new KeyActivation();\n\t\t\t\t}\n\t\t\t\tfrom.Add( new InternalKey", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tif(beans == null)\n\t\t\treturn coll;\n\t\tjava.util.Iterator iter = beans.iterator();\n\t\twhile (iter.hasNext())\n\t\t{\n\t\t\tcoll.add((ChangeOfServiceVo)iter.next());\n\t", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "new Version(1, new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0 }),\nnew Version(2, new int[] { 0, 0, 0, 0, 0, 0", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn (int) (dispatchManaExact(stack, player, cost, remove) / multiplier);\n\t}\n\tprivate static float getFullDiscountForTools(EntityPlayer player) {\n\t\tList<ItemStack> armor = player.getInventory().getAr", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "\n# Create a new Django project\ndjango-agfk project\n\nPlease provide the complete code for the above file.", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\"but was given {1}\"),\n\t\t\t\t\tLightCount, NextFrame.PixelCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t\t}\n\t\t}\n\t", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage != null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        if ((this.actionTraceList", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.number = p.readString();\n            response.add(dc);\n        }\n        return response;\n    }\n    @Override\n    protected Object\n    responseVoid(Parcel p) {\n        return null;\n    }\n    @Override\n    protected", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isApplicable()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           for (int x = 0; x < xSizeP; x++)\n            {\n                // Calculate UV coordinates\n                newUV[x * ySizeP + y] = new Vector2(x * xPixelsPerTile, y * yPixelsPer", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\t\n\t\t\tObject testInt2 = new Integer(testInt1);\n\t\t\t\n\t\t\tLog.i(TAG, \"Testing connection with server at \" + url.toString() + \" using testInt1 = \" + testInt1 + \" and testInt2", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\n\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t};\n\t}", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeBoolean(false);\n            out.writeUTF(\"Not found\");\n        }\n        else {\n            try {\n                out.writeBoolean(true);\n                out.writeObject(convertRvalue(found.object));\n            }\n            catch (CannotCompileException", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "\n    drawgfx(bitmap, Machine.gfx[5],\n            16 + (~stactics_display_buffer.read(i) & 0x0f),\n            16,\n            0, 0,\n             pixel_x, pixel_y,", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                   .Distance(spell.From.To2D()) <= spell.Range &&\n                                    minionPrediction.Hitchance > hitchance)\n                                    {\n                                        // very high prediction\n                                        rad = target.BoundingRadius + spell.", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       Node z = graph.getNode(graph.getAdjacentNodes(x).get(0));\n        if (z == null) return false:\n        for (int i = 0; i < 2; i++) {\n            Node a = graph.getNode(graph.", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   var child = pop[i];\n                    if (child is Drawable)\n                        return child as Drawable;\n                    plcs.Push(child as PlaceBase);\n                }\n            }\n            return null;\n        }\n        public void Update()\n        {", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       if (getClass() != other.getClass()) {\n            return false\n        }\n        if (super.equals(other)) {\n            return true;\n        }\n        if (getAttachmentId() == null) {\n            if (other.getAttachmentId() !=", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                   AOS.Damage(mobiles[i], from, GetDamage(), 0, 100, 0, 0, 0);\n                    mobiles[i].PlaySound(0x208);\n                    }\n                    m", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tvar old = History.Where(u => CanSee(u, msg)).FirstOrDefault();\n\t\t\t\tif (old != null)\n\t\t\t\t{\n\t\t\t\t\told.Value.User = user.ToAccessString(true, true, true", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public String getComponentNameByCompoId(String sCompoId) {\n    return mock.getComponentNameByCompoId(sCompoId);", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                           final DialogFragment dialog = ZipFilesDialog.instantiate(new File((String) mListView\n                                    .getItemAtPosition(key)), mListView.getItemCount());\n                            dialog.show(mActivity.getFragmentManager(), BrowserActivity.TAG_DIALO", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "       this.j.writeLock().lock();\n        try {\n            // Spigot Start\n            if (this.preparing) {\n                this.channel.attr(NetworkManager.c).set(EnumProtocol.HANDSHAKING);\n                this.preparing =", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "\n    def read_header(self):\n        \"\"\"\n        read the header of the j-file\n        \"\"\"\n        self.processing_dict = {}\n        self.nref = 0\n        self.ninp = 0\n        self.nout = 0\n       ", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getString(resourceOne).replace(\"{name}\", name);\n    } else {\n      String name = recipients.get(0).toShortString();\n      return context.getString(resourceMany).replace(\"{names}\", StringUtil.pluralize(name, recipients.", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "           env[\"PATH\"] = os.path.join * extra_path\n        if extra_lib:\n            env[\"LIBRARY_PATH\"] = os.path.join * extra_lib\n        if gonk:\n            # Set up the gonk environment\n            env[\"GONK", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "       for path, tests in sorted(iteritems(type_paths)):\n            source_file = SourceFile(tests_root,\n                                     rel_path_to_url(path),\n                                     self.url_base)\n            source_files[source_file.rel_", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       if (compileTimeStrategy.canUseOldCompiledScript()) {\n            // :fixme: This line is only reached, if\n            // canUseOldCompiledScript() is true.\n            // Should it be here at all?\n            // And if: Shouldn't it raise", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "           }\n        }\n    }\n}\n\nThis code is for a network layer testing tool, and it defines a base class called \"WrappedNetworkLayer\" that can be used to implement a network layer in a more straightforward way. The class provides a way to wrap a network layer in a simpler", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "     for i in range(energy.size):\n        Etf = energy[i]\n        grad_Etf = grad[i].flatten()\n        grad_E = Etf*grad_var+energy_var*grad_Etf+grad_means\n        grad_E", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif (isValidated())\n\t\t\tthrow new DomainException(\"Variable not validated\");\n\t\telse\n\t\t\tsuper.compareTo(obj, caseInsensitive);\n\t\treturn 0;\n\t}\n\tpublic ims.ocrr.vo.Order", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found.size(), 2);\n    }\n    private void updateAll() {\n        stackDao.updateAll(stacks);\n    }\n}", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       crawlParameters.add(new Parameter(CrawlerFactory.DEPTH_PARAM_KEY, depth));\n        //EXCLUSION REGEX\n        crawlParameters.add(new Parameter(CrawlerFactory.EXCLUSION_REGEX_PARAM_", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\tswitch (kind)\n\t\t\t{\n\t\t\tcase LNodeKind.Value:\n\t\t\t\t// [$capture] (...)\n\t\t\t\tif (!ValueMatch(candidate, pattern, ref captures, out unmatchedAttrs))\n", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "                   if (colisionList.Any())\n                    {\n                        extendedWillHit += 1;\n                        extendedFarmLocation = objAiBase.Position;\n                    }\n                }\n                int shortenWillHit = MinionManager.GetMinions(", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tcmbGPSelected.setComboBoxMode(ComboBox.CASE_SELECT);\n\t\t// Create a temporary instance of the form type that calls onPreCreate\n\t\t// so that we can use the instance for the OnPreCreate event\n\t\t//  To avoid a potential issue where the On", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "   for line in frozen_output.split(\"\\n\"):\n        match = re.match(pattern, line)\n        if match:\n            return package_name\n    return False\n    # If we get here, the package isn't in the frozen output.\n    return False", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           'subs\": [(\"2\", 2, 2)]\n        })\n        f = Form(r)\n        with self.assertRaises(AssertionError):\n            f.subs.edit(index=0)\n        with self.assertRaises(Assert", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert simplify(Sum(x, (x, a, b)) + Sum(x, (x, b + 1, c))) == \\\n        Sum(x, (x, a, c))\n    assert simplify(Sum(x, (x, a, b)) + Sum(", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif(argc==1){\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l,1,out a1);\n\t\t\t\tvar ret", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "               this._newItemList = new ArrayList(changedItems);\n            }\n            else\n            {\n                this._newItemList = new ArrayList(changedItems.SubSet(startingIndex));\n            }\n            this._newStartingIndex = startingIndex;\n        }\n        private", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           StringReader reader = new StringReader(writer.toString());\n            InputSource inputSource = new InputSource(reader);\n            Document testDocument = parser.parse(inputSource);\n            reader.close();\n            writer.close();\n            objectToXMLDocumentTest(testDocument);\n       ", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                   c.Campus = Token2Csv();\n                    break;\n                default:\n                    throw new QueryParserException($\"Unknow parameter {Token.Text}\");\n            }\n            NextToken(TokenType.RParen);\n        }\n        private string Token", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "#endif\n\t\t\t\tif (ide.width == 0 || ide.height == 0) {\n\t\t\t\t\t// invalid image size\n\t\t\t\t\tthrow new System.ArgumentException (\"Invalid Argument\", \"stream\");\n\t\t\t\t}\n\t\t\t\t", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "               // adds the JSR block as a successor of the current block\n                // (the current block is the last one of the subroutine)\n                JSR.addSuccessor(l);\n            }\n        }\n        // marks the current block as belonging to the given subroutine\n", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            UnityEngine.Ray instance_of_this_method = (UnityEngine.Ray)typeof(UnityEngine.Ray).CheckCL", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "       self._getLastValue( driver, \"Image\" )\n        lastImageValue = self._getCurrentValue( driver, \"Image\" )\n        print \"Check decrease image...\"\n        print \"oldImageValue=\", lastImageValue, \"newImageValue=\", self._getCurrentValue(", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "       self.transport.gss_kex_used = True\n        self.transport._activate_outbound()\n        self.transport._expect_packet(MSG_KEXGSS_COMPLETE,\n                                      MSG_KEXGSS_ERROR)\n       ", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           // Create the folder node\n            FSTree.FolderNode folderNode = new FSTree.FolderNode(overallNodeName);\n            // Add the folder node to the tree\n            tree.addNode(folderNode, PROGRESS_NODE_TITLE);\n            //", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "                          (self.employee_id, from_date, to_date, code))\n                res = self.cr.fetchone()[0]\n                return res or (0.0, 0.0)\n        # Get the contracts for the employee\n        contract_ids =", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "       mf, dlnmdlnm = integrate_kkhalo(ell, lnzarr, chiarr, dVdzdOm, marr, mf, BDarr, rhobarr, rho_crit_arr, bias, Darr, pk, zsarr", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.width = font.getWidth(\"x\");\n        d.height = font.getHeight();\n        return d;\n    }\n    @Override\n    public void setFont(Font font) {\n        super.setFont(font);\n        if (font != null) {", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "       self.all_in_all(phi=phi,ref_p=None,flag='off_center')\n        #print \"all in all\"\n        #print self.p2\n        #print self.face\n        #print self.flag\n        #print self.p4", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\twindow.Show();\n\t\t}\n\t}\n}\n```\n\nThe code above is a sample implementation of a `MainWindow` for the Rithmic trading platform. It contains a `Connect` button, which when clicked, will connect to the Rithmic server and display", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "       for i in range(1, len(args)):\n            if len(args) == 3:\n                nbins = args[0]\n                low = args[1]\n                high = args[2]\n                if nbins is None or low is None or high is", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           protocol.getStorage().updateFirstServerMsgId(contact);\n        }\n    }\n}\n\nI have a problem with the code, I am not able to understand how to use the `getQueryMessageArchiveManagement` function.\nPlease help me to understand how to use it correctly.", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "               im1L = im1.convert(\"L\", rgb2I)\n            elif channel == \"R\":\n                im1L = im1.convert(\"L\", rgb2r)\n            elif channel == \"G\":\n                im1L = im1.convert(\"L\",", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\twhile (rsp.isOkey() && ret.size() < MAX_LOG) {\n\t\t\t\taddLog24(rsp, ret);\n\t\t\t\trsp = tag.readRecord(sfi);\n\t\t\t}\n\t\t}\n", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "   yield textHandler(UInt16(self, \"crc16\", \"Archive CRC16 (from byte 4 on)\"), hexadecimal)\n    yield filesizeHandler(UInt16(self, \"head_size\", \"Block size (from byte ", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\tsocketAdapter = null;\n\t}\n}", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "       path_info = environ['PATH_INFO']\n        app = self.find_app(path_info)\n        if app is None:\n            raise HTTPServerError(\"No matching app for PATH_INFO %s\" % path_info)\n        return app.handle(environ, start", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tmodel = Model()\n\t\tmodel.loadmodel( sys.argv[1] )\n\t\tmodel.entropyvalues = {}\n\t\tmodel.sizevalues = {}\n\t\tmodel.bicvalues = {}\n\t\tmodel.bestparents = {}\n\t\tmodel", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           switch (Utility.Random(chance))\n            {\n                case 0:\n                    res = EnhanceResult.Failure;\n                    break;\n                case 1:\n                    res = EnhanceResult.NoResources;\n                    break;\n                case", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "           entries[entry_name] = rdltypes.UserEnum(entry_value, displayname, desc)\n        return entries\n    #---------------------------------------------------------------------------\n    def parse_integer(self, s: str) -> int:\n        \"\"\"\n        Parses an integer value", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                   MessageBox.Show(\"No Services found!\");\n                    this.Close();\n                }\n            }\n            else\n            {\n                MessageBox.Show(\"FOG Service configuration file not found in AppDomain.CurrentDomain.BaseDirectory!\");\n                this.Close();\n            }\n", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "               return (bool)this.ViewState[\"SubmitText\"] ?? true\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        private void AfterStoreAdd(object sender, StoreAddEventArgs e)\n        {\n           ", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               for(int tri = 0, vi = 0, ci = 0, ti = 0; tri < this.trianglesUsed[textureHash]; tri++)\n                {\n                    beginTriangle(this.textureArray[textureHash]);\n                    for(", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   if header not in exposedHeaders:\n        response['Access-Control-Expose-Headers'] = exposedHeaders + ', ' + header\n    return response\ndef handle_404(request, template_name='404.html'):\n    \"\"\"\n    View for handling 40", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   Driver d = idlePool.Dequeue();\n                    oldDrivers.Add(d);\n                    if (d.ConnectionLifetimeExpired())\n                    {\n                        // we are not holding the lock on the inUse pool, so we\n                        // can", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "       var = [var] if isinstance(var, (int, float)) else var\n    return var\ndef _round_shape(shape, radius, resolution):\n    \"\"\"Round shape to nearest integer.\n    Args:\n        shape (float): Shape to round.\n       ", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "qn = QUEST.getState()\n\n#Code to give rewards\ndef giveRewards(st):\n    rewards = QUEST.getRewards()\n    for i in range(len(rewards)):\n        st.giveItems(rewards[", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tempty = string.Concat(PlayTime.TimeTagRegex.Match(this.Seconds.ToString()).Groups[1].Value, \" \", num.ToString(\"D2\"), \":\", num1.ToString(\"D2\"));\n\t\t\t\t\t}\n\t\t\t", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           VertexDataStride = 0;\n            VertexDataSize = 0;\n            _attributes = new List<AttributeInfo>();\n            _textures = new Dictionary<String, TextureInfo>();\n            _uniforms = new Dictionary<String, int>();\n            Program = GL", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "   def __str__(self):\n        return self.name\n\n    def __repr__(self):\n        return \"Model(\" + str(self.id) + \")\"\n\n    def __eq__(self, other):\n        if not isinstance(other, Model):\n            return", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor(int x = 0; x < beans.size() : x)\n\t\t{\n\t\t\tTumourGroupListVo vo = (TumourGroupListVo)beans.get(x);\n\t\t\tcoll.add(vo);\n\t", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tcurrent.x=lines[selectedLine].x;\n\t\t\t\tcurrent.y=lines[selectedLine].y;\n\t\t\t\tcurrent.width=lines[selectedLine].width;\n\t\t\t\tcurrent.height=lines[selectedLine].height;\n", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       \n        mListView.setAnimation(set);\n    }\n\t\n\tprivate void fillData() {\n\t\tmCursor = mDbAdapter.getCursor();\n\t\tif (mCursor != null) {\n\t\t\tmNavigationList.clear();\n\t\t\twhile (", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (PartnerInterestRow.FieldKey == ARow.FieldKey)\n                {\n                    HighestNumber = PartnerInterestRow.FieldKey + 1;\n                    break;\n                }\n            }\n            ARow.FieldKey = HighestNumber;\n", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\t\n\t\tthis.predictScores(pssm, scoresSol);\n\t\t\n\t\tfor (int i = 0; i < scoresSol.length; ++i)\n\t\t{\n\t\t\tif (scoresSol[i] == 0) \t\t", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
